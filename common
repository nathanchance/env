# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2016-2020 Nathan Chancellor
#
# Helper functions

###############
#             #
#  VARIABLES  #
#             #
###############

# Location of "scripts" folder
[[ ${0} =~ /proc ]] || SCRIPTS_FOLDER=$(dirname "$(readlink -f "${0}")")
export SCRIPTS_FOLDER
unset SCRIPT

# Colors
BLUE="\033[01;34m"
BOLD="\033[1m"
GRN="\033[01;32m"
RED="\033[01;31m"
RST="\033[0m"
YLW="\033[01;33m"

export BLUE BOLD GRN RED RST YLW

# Number of make threads
THREADS=$(($(nproc) + 1))
JOBS_FLAG="-j${THREADS}"

export THREADS JOBS_FLAG

###############
#             #
#  FUNCTIONS  #
#             #
###############

# Prints a formatted header to point out what is being done to the user
function header() {
    BORDER="====$(for _ in $(seq ${#1}); do printf '='; done)===="
    printf '\n%b%s\n%s\n%s%b\n\n' "${2:-${BLUE}}" "${BORDER}" "==  ${1}  ==" "${BORDER}" "${RST}"
}

# Formats the time
function format_time() {
    python3 -c "import datetime; print(str(datetime.timedelta(seconds=int(${2} - ${1}))))"
}

# Prints an error in bold red
function display_error() {
    printf '\n%b%s%b\n\n' "${COLOR:-${RED}}" "${1}" "${RST}"
}

# Prints an error in bold red and exits the script
function die() {
    if [[ -n ${TG} ]]; then
        local TMP_FILE
        TMP_FILE=$(mktemp)
        # Info must be resourced so public chats don't get notified
        load_botinfo
        {
            echo "\`\`\`"
            echo "${*}"
            echo "\`\`\`"
        } >"${TMP_FILE}"
        tg_msg "$(cat "${TMP_FILE}")"
        rm -f "${TMP_FILE}"
    fi

    display_error "${@}"
    type pre_exit_commands &>/dev/null && pre_exit_commands
    builtin exit 1
}

# Prints a warning in bold yellow
function warn() {
    COLOR=${YLW} display_error "${@}"
}

# Enforces the value needed for two-part flags
function enforce_value() {
    [[ ${#} -lt 1 ]] && die "A additional value is needed for one of the flags passed to this script!"
}

# Add a remote if it doesn't exist
function git_remote_add() { (
    REMOTE_ARGS=()
    while ((${#})); do
        case ${1} in
            -*) REMOTE_ARGS=("${REMOTE_ARGS[@]}" "${1}") ;;
            http* | git://* | *@*:*) REMOTE_URL=${1} ;;
            *) REMOTE_NAME=${1} ;;
        esac
        shift
    done
    git ls-remote "${REMOTE_NAME:?}" &>/dev/null || git remote add "${REMOTE_ARGS[@]}" "${REMOTE_NAME}" "${REMOTE_URL:?}"
); }

# Source Telegram bot information
function load_botinfo() {
    [[ -f ${MAIN_FOLDER:?}/.botinfo ]] && source "${MAIN_FOLDER}"/.botinfo
}

# Telegram notifier function
function tg_msg() {
    if [[ -z ${TOKEN} ]]; then
        [[ -f ${MAIN_FOLDER:?}/.botinfo ]] && source <(tail -n1 "${MAIN_FOLDER}"/.botinfo)
        if [[ -z ${TOKEN} ]]; then
            display_error "tg_msg() was called but there was no token!"
            return 1
        fi
    fi

    if [[ -z ${CHAT_ID} ]]; then
        [[ -f ${MAIN_FOLDER:?}/.botinfo ]] && source <(head -n1 "${MAIN_FOLDER}"/.botinfo)
        if [[ -z ${CHAT_ID} ]]; then
            display_error "tg_msg() was called but there was no chat ID!"
            return 1
        fi
    fi

    curl -s -X POST https://api.telegram.org/bot"${TOKEN}"/sendMessage \
        -d chat_id="${CHAT_ID}" \
        -d parse_mode="Markdown" \
        -d text="${*}" 1>/dev/null
}

# Telegram uploader function
function tg_upload() {
    local FILE
    FILE=${1}
    shift

    if [[ -z ${TOKEN} ]]; then
        display_error "tg_upload() was called but there was no token!"
        return 1
    fi

    if [[ -z ${CHAT_ID} ]]; then
        display_error "tg_upload() was called but there was no chat ID!"
        return 1
    fi

    if [[ ! -f ${FILE} ]]; then
        display_error "tg_upload() failed to find ${FILE}!"
        return 1
    fi

    curl \
        -s \
        -F chat_id="${CHAT_ID}" \
        -F document=@"${FILE}" \
        -F caption="${*}" \
        -X POST https://api.telegram.org/bot"${TOKEN}"/sendDocument 1>/dev/null
}

# Is GPG passphrase cached?
# https://demu.red/blog/2016/06/how-to-check-if-your-gpg-key-is-in-cache/
function gpg_key_cached() {
    NUM=$(gpg-connect-agent 'keyinfo --list' /bye 2>/dev/null | awk 'BEGIN{CACHED=0} /^S/ {if($7==1){CACHED=1}} END{if($0!=""){print CACHED} else {print "none"}}')
    if [[ ${NUM} = "none" || ${NUM} -eq 0 ]]; then
        die "Please run 'echo \"test\" | gpg --clearsign &>/dev/null' to cache gpg passphrase!"
    fi
}

# Check if my GPG key can be used
function gpg_key_usable() {
    command -v gpg &>/dev/null || return 1
    gpg --list-secret-keys --keyid-format LONG | grep -q 1D6B269171C01A96
}

# Add something to the end of PATH if it isn't already there
function add_to_path_post() {
    local ARRAY ITEM
    IFS=: read -rA ARRAY <<<"${1}"
    for ITEM in $(printf '%s\n' "${ARRAY[@]}" | tac); do
        [[ -d ${ITEM} ]] || continue
        echo "${PATH}" | grep -s -q "${ITEM}" || export PATH="${PATH}:${ITEM}"
    done
}

# Does the same thing as add_to_path_pre but doesn't check if item exists or not
function move_to_front_of_path() {
    local ARRAY ITEM
    IFS=: read -rA ARRAY <<<"${1}"
    for ITEM in $(printf '%s\n' "${ARRAY[@]}" | tac); do
        [[ -d ${ITEM} ]] || continue
        export PATH="${ITEM}:${PATH//${ITEM}:/}"
    done
}

# Add something to the beginning of PATH if it isn't already there
function add_to_path_pre() {
    local ARRAY ITEM
    IFS=: read -rA ARRAY <<<"${1}"
    for ITEM in $(printf '%s\n' "${ARRAY[@]}" | tac); do
        [[ -d ${ITEM} ]] || continue
        echo "${PATH}" | grep -s -q "${ITEM}" || export PATH="${ITEM}:${PATH}"
    done
}
# Easy alias
function path_push() { add_to_path_pre "${@}"; }

# Delete the first folder in PATH
function path_pop() {
    export PATH=${PATH#*:}
}

# Get latest release of a GitHub project
function glr() { (
    curl --silent "https://api.github.com/repos/${1:?}/releases/latest" | jq -r .tag_name
); }

# Function for parsing os-release
function get_distro() {
    case "$(cat /usr/lib/os-release)" in
        *"Arch Linux"*) echo "arch" ;;
        *Debian* | *Raspbian*) echo "debian" ;;
        *Ubuntu*) echo "ubuntu" ;;
        *) echo "unknown" ;;
    esac
}

# Common ccache variable
CCACHE=$(
    path_push "${HOME}/usr/bin"
    command -v ccache
)
export CCACHE

# Decrypt gpg signed file
function decrypt_gpg_file() { (
    [[ -z ${SCRIPTS_FOLDER} && -z ${SCRIPTS} ]] && die "Scripts folder cannot be found!"
    [[ -z ${SCRIPTS_FOLDER} ]] && SCRIPTS_FOLDER=${SCRIPTS}
    gpg --batch --yes --pinentry-mode loopback --output "${HOME}"/."${1:?}" --decrypt "${SCRIPTS_FOLDER:?}"/configs/common/"${1}".gpg
); }

# Update server_ip file from scripts folder
function decrypt_serv_ip() { decrypt_gpg_file server_ip; }

# Update del_dog_api_key file from scripts folder
function decrypt_del_dog_api_key() { decrypt_gpg_file del_dog_api_key; }

# curl wrapper
function crl() { (
    curl -LSs "${@}"
); }
# vi: filetype=zsh
