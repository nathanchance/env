#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful
#
# Copyright (C) 2016-2021 Nathan Chancellor
#
# Helper functions

###############
#             #
#  VARIABLES  #
#             #
###############

# Location of "scripts" folder
[[ ${0} =~ /proc ]] || SCRIPTS_FOLDER=$(dirname "$(readlink -f "${0}")")
export SCRIPTS_FOLDER
unset SCRIPT

# Colors
BLUE="\033[01;34m"
BOLD="\033[1m"
GRN="\033[01;32m"
RED="\033[01;31m"
RST="\033[0m"
YLW="\033[01;33m"
export BLUE BOLD GRN RED RST YLW

# Number of make threads
JOBS_FLAG="-j$(nproc)"
export JOBS_FLAG

###############
#             #
#  FUNCTIONS  #
#             #
###############

# Add something to the beginning of PATH if it isn't already there
function add_to_path_pre() {
    local ARRAY ITEM
    IFS=: read -rA ARRAY <<<"${1}"
    for ITEM in $(printf '%s\n' "${ARRAY[@]}" | tac); do
        [[ -d ${ITEM} ]] || continue
        echo "${PATH}" | grep -s -q "${ITEM}" || export PATH="${ITEM}:${PATH}"
    done
}
# Add something to the end of PATH if it isn't already there
function add_to_path_post() {
    local ARRAY ITEM
    IFS=: read -rA ARRAY <<<"${1}"
    for ITEM in $(printf '%s\n' "${ARRAY[@]}" | tac); do
        [[ -d ${ITEM} ]] || continue
        echo "${PATH}" | grep -s -q "${ITEM}" || export PATH="${PATH}:${ITEM}"
    done
}

# curl wrapper
function crl() { (
    curl -LSs "${@}"
); }

# Update del_dog_api_key file from scripts folder
function decrypt_del_dog_api_key() { decrypt_gpg_file del_dog_api_key; }

# Decrypt gpg signed file
function decrypt_gpg_file() { (
    [[ -z ${SCRIPTS_FOLDER} && -z ${SCRIPTS} ]] && die "Scripts folder cannot be found"
    [[ -z ${SCRIPTS_FOLDER} ]] && SCRIPTS_FOLDER=${SCRIPTS}
    gpg_key_cache
    OUTPUT=${2:-"${HOME}/${1:?}"}
    mkdir -p "${OUTPUT%/*}"
    gpg --batch --yes --pinentry-mode loopback --output "${OUTPUT}" --decrypt "${SCRIPTS_FOLDER:?}"/configs/common/"${1}".gpg
); }

# Update server_ip file from scripts folder
function decrypt_serv_ip() { decrypt_gpg_file server_ip; }

# Prints an error in bold red and exits the script
function die() {
    # SC2016: Expressions don't expand in single quotes, use double quotes for that.
    # shellcheck disable=SC2016
    ${TG:=false} && tg_msg "$(printf '```\n%s\n```' "${*}")"
    display_error "${@}"
    type pre_exit_commands &>/dev/null && pre_exit_commands
    builtin exit 1
}

# Prints an error in bold red
function display_error() {
    printf '\n%b%s%b\n\n' "${COLOR:-${RED}}" "${1}" "${RST}"
}

# Enforces the value needed for two-part flags
function enforce_value() {
    [[ ${#} -lt 1 ]] && die "A additional value is needed for one of the flags passed to this script"
}

# Formats the time
function format_time() {
    python3 -c "import datetime; print(str(datetime.timedelta(seconds=int(${2} - ${1}))))"
}

# Function for parsing os-release
function get_distro() {
    case "$(cat /usr/lib/os-release)" in
        *"Arch Linux"*) echo "arch" ;;
        *Debian* | *Raspbian*) echo "debian" ;;
        *Ubuntu*) echo "ubuntu" ;;
        *) echo "unknown" ;;
    esac
}

# Add a remote if it doesn't exist
function git_remote_add() { (
    REMOTE_ARGS=()
    while ((${#})); do
        case ${1} in
            -*) REMOTE_ARGS=("${REMOTE_ARGS[@]}" "${1}") ;;
            http* | git://* | *@*:*) REMOTE_URL=${1} ;;
            *) REMOTE_NAME=${1} ;;
        esac
        shift
    done
    git ls-remote "${REMOTE_NAME:?}" &>/dev/null || git remote add "${REMOTE_ARGS[@]}" "${REMOTE_NAME}" "${REMOTE_URL:?}"
); }

# Get latest release of a GitHub project
function glr() { (
    curl --silent "https://api.github.com/repos/${1:?}/releases/latest" | jq -r .tag_name
); }

# Cache GPG passphrase
function gpg_key_cache() { (
    gpg_key_usable || die "gpg key is not available"
    NUM=$(gpg-connect-agent 'keyinfo --list' /bye 2>/dev/null | awk 'BEGIN{CACHED=0} /^S/ {if($7==1){CACHED=1}} END{if($0!=""){print CACHED} else {print "none"}}')
    [[ ${NUM} = "none" || ${NUM} -eq 0 ]] && echo | gpg --pinentry-mode loopback --clearsign &>/dev/null
); }

# Check if my GPG key can be used
function gpg_key_usable() { (
    command -v gpg &>/dev/null || exit ${?}
    gpg --list-secret-keys --keyid-format LONG | grep -q 1D6B269171C01A96
); }

# Prints a formatted header to point out what is being done to the user
function header() {
    BORDER="====$(for _ in $(seq ${#1}); do printf '='; done)===="
    printf '\n%b%s\n%s\n%s%b\n\n' "${2:-${BLUE}}" "${BORDER}" "==  ${1}  ==" "${BORDER}" "${RST}"
}

# Source Telegram bot information
function load_botinfo() {
    [[ -f ${MAIN_FOLDER:?}/.botinfo ]] && source "${MAIN_FOLDER}"/.botinfo
}

# Does the same thing as add_to_path_pre but doesn't check if item exists or not
function move_to_front_of_path() {
    local ARRAY ITEM
    IFS=: read -rA ARRAY <<<"${1}"
    for ITEM in $(printf '%s\n' "${ARRAY[@]}" | tac); do
        [[ -d ${ITEM} ]] || continue
        export PATH="${ITEM}:${PATH//${ITEM}:/}"
    done
}

# Easy alias
function path_push() {
    add_to_path_pre "${@}"
}

# Delete the first folder in PATH
function path_pop() {
    export PATH=${PATH#*:}
}

# Telegram notifier function
function tg_msg() { (
    # To prevent recursive calls in die
    export TG=false

    if [[ -z ${TOKEN} ]]; then
        [[ -f ${MAIN_FOLDER:?}/.botinfo ]] && source <(tail -n1 "${MAIN_FOLDER}"/.botinfo)
        [[ -z ${TOKEN} ]] && die "tg_msg() was called but there was no token"
    fi

    if [[ -z ${CHAT_ID} ]]; then
        [[ -f ${MAIN_FOLDER:?}/.botinfo ]] && source <(head -n1 "${MAIN_FOLDER}"/.botinfo)
        [[ -z ${CHAT_ID} ]] && die "tg_msg() was called but there was no chat ID"
    fi

    curl -s -X POST https://api.telegram.org/bot"${TOKEN}"/sendMessage \
        -d chat_id="${CHAT_ID}" \
        -d parse_mode="Markdown" \
        -d text="${*}" 1>/dev/null
); }

# Telegram uploader function
function tg_upload() { (
    FILE=${1}
    shift

    [[ -z ${TOKEN} ]] && die "tg_upload() was called but there was no token"
    [[ -z ${CHAT_ID} ]] && die "tg_upload() was called but there was no chat ID"
    [[ -f ${FILE} ]] || die "tg_upload() failed to find ${FILE}"

    curl \
        -s \
        -F chat_id="${CHAT_ID}" \
        -F document=@"${FILE}" \
        -F caption="${*}" \
        -X POST https://api.telegram.org/bot"${TOKEN}"/sendDocument 1>/dev/null
); }

# Prints a warning in bold yellow
function warn() {
    COLOR=${YLW} display_error "${@}"
}

# ssh-agent handling
function ssh_agent() {
    [[ -r ${HOME}/.ssh/id_ed25519 ]] || return ${?}

    SSH_AGENT_FILE=${HOME}/.ssh/.ssh-agent
    ssh-add -l &>/dev/null
    if [[ ${?} -eq 2 ]]; then
        [[ -r ${SSH_AGENT_FILE} ]] && eval "$(<"${SSH_AGENT_FILE}")" >/dev/null

        ssh-add -l &>/dev/null
        if [[ ${?} -eq 2 ]]; then
            (
                umask 066
                ssh-agent >"${SSH_AGENT_FILE}"
            )
            eval "$(<"${SSH_AGENT_FILE}")" >/dev/null
            ssh-add "${HOME}"/.ssh/id_ed25519
        fi
    fi
}
# vi: filetype=zsh
