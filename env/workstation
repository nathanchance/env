#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful
#
# Copyright (C) 2017-2021 Nathan Chancellor
#
# Utility and terminal setup functions for my remote workstation

# Setup workstation function
#
# Assumes that rootstrap has been run
function bootstrap() { (
    # Super debug :)
    set -x

    # Grab common variables
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/main/env/stubs/folders) &>/dev/null || return 1
    # Grab common functions
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/main/common) &>/dev/null || return 1

    # Do not run this as root
    [[ $(EUID) -eq 0 ]] && die "Do not run bootstrap as root"

    SCRIPTS=${GITHUB_FOLDER}/scripts

    # Setup folders that will be used
    mkdir -p "${ANDROID_TC_FOLDER}" \
        "${CBL}"/{android,github,kernels/clean,kernels/patched,mirrors,src,worktrees} \
        "${GITHUB_FOLDER}" \
        "${HOME}"/usr/bin \
        "${SRC_FOLDER}" || die "Can't create folders, wtf"

    # Setup keys
    KEYS=/tmp/keys
    [[ -f ${HOME}/.ssh/id_ed25519 ]] || INSTALL_SSH_KEY=true
    gpg_key_usable || INSTALL_GPG_KEY=true
    if [[ ${INSTALL_SSH_KEY:=false} = "true" || ${INSTALL_GPG_KEY:=false} = "true" ]]; then
        [[ -d ${KEYS} ]] || { git clone https://github.com/nathanchance/keys "${KEYS}" || die "Error downloading keys"; }
        if ${INSTALL_SSH_KEY}; then
            cp "${KEYS}"/ssh/id_ed25519{,.pub} "${HOME}"/.ssh
            cp "${KEYS}"/ssh/korg-nathan "${HOME}"/.ssh/id_korg
            cat <<'EOF' >>"${HOME}"/.ssh/config
Host gitolite.kernel.org
  User git
  IdentityFile ~/.ssh/id_korg
  IdentitiesOnly yes
  ClearAllForwardings yes
  # We prefer ed25519 keys, but will fall back to others if your
  # openssh client does not support that
  HostKeyAlgorithms ssh-ed25519,ecdsa-sha2-nistp256,ssh-rsa
  # Below are very useful for speeding up repeat access
  # and for 2-factor validating your sessions
  ControlPath ~/.ssh/cm-%r@%h:%p
  ControlMaster auto
  ControlPersist 30m
  # Helps behind some NAT-ing routers
  ServerAliveInterval 60
EOF
            chmod 600 "${HOME}"/.ssh/{id_ed25519,id_korg}
        fi
        if ${INSTALL_GPG_KEY}; then
            gpg --pinentry-mode loopback --import "${KEYS}"/signing/private.asc || die "Error installing gpg keys"
            gpg --import "${KEYS}"/main/public.asc || die "Error installing gpg keys"
            gpg --import-ownertrust "${KEYS}"/main/ownertrust*.asc || die "Error installing gpg ownertrust"
            printf 'default-cache-ttl 604800\nmax-cache-ttl 2419200\n' | tee -a "${HOME}"/.gnupg/gpg-agent.conf
            gpg-connect-agent reloadagent /bye
        fi
        rm -rf "${KEYS}"
    fi
    gpg_key_cache
    ssh-add "${HOME}"/.ssh/id_ed25519

    # Download repos
    [[ -d ${SCRIPTS} ]] || { git clone git@github.com:nathanchance/scripts "${SCRIPTS}" || die "Error cloning scripts"; }
    git -C "${SCRIPTS}" pull
    source <(cat "${SCRIPTS}"/env/common)
    source "${SCRIPTS}"/env/stubs/zsh && setup_zsh_env
    source "${SCRIPTS}"/env/stubs/setup && global_gitignore
    SCRIPTS_FOLDER=${SCRIPTS} rbld_usr || exit ${?}
    path_push "${HOME}/usr/bin"
    source "${SCRIPTS}"/env/stubs/git && git_setup
    zsh "${SCRIPTS}"/configs/common/vim/vim_setup.sh
    ln -fs "${SCRIPTS}"/configs/workstation/.tmux.conf "${HOME}"/.tmux.conf
    decrypt_gpg_file botinfo || NEEDS_GPG_DECRYPT=true
    decrypt_del_dog_api_key || NEEDS_GPG_DECRYPT=true
    decrypt_gpg_file neomuttrc || NEEDS_GPG_DECRYPT=true
    for REPO in bug-files hugo-files nathanchance.github.io patches; do
        [[ -d ${GITHUB_FOLDER}/${REPO} ]] || { git -C "${GITHUB_FOLDER}" clone git@github.com:nathanchance/"${REPO}" || die "Error cloning ${REPO}!"; }
    done
    # [[ -d ${ALS}/sp ]] || { git -C "${ALS}" clone git@github.com:nathanchance/stable-patches sp || die "Error cloning stable-patches!"; }
    [[ -d ${SRC_FOLDER}/android-wireguard-module-builder ]] || git -C "${SRC_FOLDER}" clone git@github.com:WireGuard/android-wireguard-module-builder.git
    [[ -d ${SRC_FOLDER}/pahole ]] || git -C "${SRC_FOLDER}" clone https://git.kernel.org/pub/scm/devel/pahole/pahole.git

    # Download toolchains
    [[ -d ${ANDROID_TC_FOLDER}/clang-master ]] || tmux new-window zsh -c "git -C ${ANDROID_TC_FOLDER} clone --single-branch https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/ clang-master"
    [[ -d ${ANDROID_TC_FOLDER}/gcc-arm ]] || git -C "${ANDROID_TC_FOLDER}" clone --depth=1 -b android-9.0.0_r1 --single-branch https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/ gcc-arm
    [[ -d ${ANDROID_TC_FOLDER}/gcc-arm64 ]] || git -C "${ANDROID_TC_FOLDER}" clone --depth=1 -b android-9.0.0_r1 --single-branch https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/ gcc-arm64

    # Grab linux, linux-next, and linux-stable for CBL
    for REPO in linux linux-next linux-stable; do
        tmux new-window zsh -c "source ${SCRIPTS}/env/stubs/setup && cbl_linux_repos ${REPO}"
    done

    # Download other CBL things
    tmux new-window zsh -c "source ${SCRIPTS}/env/stubs/setup && cbl_other_repos"

    # Use new GPG keyserver
    grep -q keyserver "${HOME}/.gnupg/dirmngr.conf" || echo "keyserver hkps://keys.openpgp.org" | tee -a "${HOME}"/.gnupg/dirmngr.conf

    # Reminder of things to do
    set +x
    echo
    echo
    echo "Things still to do!"
    echo
    echo "$ EDITOR=vim crontab -e"
    if ${NEEDS_GPG_DECRYPT:=false}; then
        echo
        echo "$ decrypt_gpg_file botinfo && decrypt_del_dog_api_key && decrypt_gpg_file neomuttrc"
    fi
    echo
    echo "$ sudo systemctl reboot"
    echo
) || return 1; }

# Clean up certain high volume git repos
function clean_repos() { (
    for REPO in "${ALS}"/* "${CBL}"/linux* "${CBL}"/wsl2 "${SRC_FOLDER}"/linux*; do
        header "${REPO}"
        if cd "${REPO}"; then
            git fetch --all
            git reflog expire --all --expire=now
            git gc --aggressive --prune=now --force
        else
            display_error "${REPO##*/} doesn't exist"
        fi
    done
    cd "${CBL_KC}" || die "${CBL_KC} does not exist"
    repo sync
    repo forall -c "git reflog expire --all --expire=now && git gc --aggressive --prune=now --force"
); }

# Qualify new LLVM revision
function qualify_llvm_uprev() { (
    bllvm --bootstrap || exit ${?}
    bllvm
); }

# Rebuild ~/usr
function rbld_usr() { (
    source "${SCRIPTS_FOLDER:?}"/env/stubs/updbin || die "Cannot source updbin"
    rm -rf "${HOME:?}"/usr
    case "$(get_distro)" in
        debian | ubuntu)
            updbin || die "Error installing updated binaries"
            bcttlfshtools || die "Error installing Cuttlefish host package"
            bdtc || die "Error building dtc"
            iandroidtools || die "Error installing Android tools"
            iarc || die "Error installing arcanist"
            ib4 || die "Error installing b4"
            ituxmake || die "Error installing tuxmake"
            if [[ -d ${LLVM_TC_FOLDER} ]]; then
                # This will never not be alphanumeric and find is insanely convoluted
                # shellcheck disable=SC2012
                DATE=$(ls -1ht "${LLVM_TC_FOLDER}" | head -n1)
                [[ -n ${DATE} ]] && symlink_llvm "${DATE}"
            fi
            ;;
    esac
    for SCRIPT in "${SCRIPTS_FOLDER}"/kernel/*.sh; do
        ln -fs "${SCRIPT}" "${HOME}"/usr/bin/"${SCRIPT##*/}"
    done
); }

# Do a full system LLVM update
function updllvm() { (
    LLVM_SRC=${SRC_FOLDER:-${HOME}/src}/llvm-project
    [[ -d ${LLVM_SRC} ]] || git clone https://github.com/llvm/llvm-project "${LLVM_SRC}"
    git -C "${LLVM_SRC}" pull --rebase

    qualify_llvm_uprev && updpgollvm
); }

# Alias for running PGO LLVM build
function updpgollvm() { (
    DATE=$(date +%Y-%m-%d)
    PREFIX=${LLVM_TC_FOLDER}/${DATE} bpgollvm &&
        symlink_llvm "${DATE}" &&
        ccache_clear llvm
); }

# Additional setup steps for my workstation
function workstation_setup() {
    # Generate a kernel version for the current tree
    alias kver='make -s kernelversion'

    ccache_setup 100
    source "${SCRIPTS_FOLDER}"/env/stubs/bldgcc
    source "${SCRIPTS_FOLDER}"/env/stubs/cbl
    load_botinfo
    gpg_key_cache
}
# vi: filetype=zsh
