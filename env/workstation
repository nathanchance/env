#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful
#
# Copyright (C) 2017-2021 Nathan Chancellor
#
# Utility and terminal setup functions for my remote workstation

# Clean up certain high volume git repos
function clean_repos() { (
    for REPO in "${ALS}"/* "${CBL}"/linux* "${CBL}"/wsl2 "${SRC_FOLDER}"/linux*; do
        header "${REPO}"
        if cd "${REPO}"; then
            git fetch --all
            git reflog expire --all --expire=now
            git gc --aggressive --prune=now --force
        else
            display_error "${REPO##*/} doesn't exist"
        fi
    done
    cd "${CBL_KC}" || die "${CBL_KC} does not exist"
    repo sync
    repo forall -c "git reflog expire --all --expire=now && git gc --aggressive --prune=now --force"
); }

# Qualify new LLVM revision
function qualify_llvm_uprev() { (
    bllvm --bootstrap || exit ${?}
    bllvm
); }

# Rebuild ~/usr
function rbld_usr() { (
    source "${SCRIPTS_FOLDER:?}"/env/stubs/updbin || die "Cannot source updbin"

    # Clean up PREFIX
    RBLD_USR_PREFIX=${PREFIX:-${USR_FOLDER:?}}
    RBLD_USR_STOW=${RBLD_USR_PREFIX}/stow
    if [[ -d ${RBLD_USR_STOW} ]]; then (
        header "Cleaning up stow directory"
        cd "${RBLD_USR_STOW}" || exit ${?}
        for PACKAGE in *-latest git prebuilts scripts; do [[ -d ${PACKAGE} ]] && stow -D -v "${PACKAGE}"; done
    ); fi
    rm -rf "${RBLD_USR_PREFIX:?}"/{bin,doc,include,lib,libexec,share}
    mkdir -p "${RBLD_USR_STOW}"

    # Distribution specific packages
    case "$(get_distro)" in
        arch)
            bgit || exit ${?}
            bcvise || exit ${?}
            ;;
        debian | ubuntu)
            updbin || exit ${?}
            bcttlfshtools || exit ${?}
            bdtc || exit ${?}
            iandroidtools || exit ${?}
            ;;
    esac

    # Binaries to install on any distribution
    iarc || exit ${?}
    ib4 || exit ${?}
    ituxmake || exit ${?}

    # Standalone kernel development scripts
    SCRIPTS_BIN=${RBLD_USR_STOW}/scripts/bin
    mkdir -p "${SCRIPTS_BIN}"
    for SCRIPT in "${SCRIPTS_FOLDER}"/kernel/*.sh; do
        ln -fsv "${SCRIPT}" "${SCRIPTS_BIN}"/"${SCRIPT##*/}"
    done
    stow -d "${RBLD_USR_STOW}" -v scripts

    # git functions
    GIT_BIN=${RBLD_USR_STOW}/git/bin
    mkdir -p "${GIT_BIN}"
    for SCRIPT in "${SCRIPTS_FOLDER}"/git/*; do
        ln -fsv "${SCRIPT}" "${GIT_BIN}"/git-"${SCRIPT##*/}"
    done
    stow -d "${RBLD_USR_STOW}" -v git

    # Self compiled ToT LLVM
    if [[ -d ${LLVM_TC_FOLDER} ]]; then
        # This will never not be alphanumeric and find is insanely convoluted
        # shellcheck disable=SC2012
        DATE=$(command ls -1ht "${LLVM_TC_FOLDER}" | head -n1)
        [[ -n ${DATE} ]] && stow_llvm "${DATE}"
    fi
); }

# Do a full system LLVM update
function updllvm() { (
    LLVM_SRC=${SRC_FOLDER:-${HOME}/src}/llvm-project
    [[ -d ${LLVM_SRC} ]] || git clone https://github.com/llvm/llvm-project "${LLVM_SRC}"
    git -C "${LLVM_SRC}" pull --rebase

    qualify_llvm_uprev && updpgollvm
); }

# Alias for running PGO LLVM build
function updpgollvm() { (
    DATE=$(date +%F)
    PREFIX=${LLVM_TC_FOLDER}/${DATE} bpgollvm &&
        stow_llvm "${DATE}" &&
        ccache_clear llvm
); }

# Update kernel using makepkg
function upd_kernel() { (
    WORK_DIR=${GITHUB_FOLDER}/archpkgbuilds/trunk
    LLVM_CFG=${WORK_DIR}/llvm_config
    SRC_DIR=${WORK_DIR}/src/linux-llvm
    SRC_CFG=${SRC_DIR}/.config

    set -x

    cd "${WORK_DIR}" || exit ${?}

    # Step 1: Rebase so that source information can be properly updated
    git fetch https://github.com/archlinux/svntogit-packages packages/linux
    git rebase -i FETCH_HEAD || exit ${?}

    # Step 2: Download and extract files
    makepkg -Cdo || exit ${?}
    rm "${SRC_CFG}"

    # Step 3: Copy configuration
    cp "${WORK_DIR}"/config "${LLVM_CFG}"
    git add "${LLVM_CFG}"
    git c -m "llvm_config: Create from current config"

    # Step 4: Run olddefconfig
    make -C "${SRC_DIR}" -j"$(nproc)" KCONFIG_CONFIG="${LLVM_CFG}" olddefconfig
    git add "${LLVM_CFG}"
    git c -m "llvm_config: Run through olddefconfig"

    # Step 5: Run through olddefconfig with Clang
    PATH=${CBL_LLVM}:${PATH} make -C "${SRC_DIR}" -j"$(nproc)" KCONFIG_CONFIG="${LLVM_CFG}" LLVM=1 LLVM_IAS=1 olddefconfig
    git add "${LLVM_CFG}"
    git c -m "llvm_config: Run through olddefconfig with LLVM=1 LLVM_IAS=1"

    # Step 6: Disable debug info and enable ThinLTO
    "${SRC_DIR}"/scripts/config --file "${LLVM_CFG}" -d DEBUG_INFO -d LTO_NONE -e LTO_CLANG_THIN
    PATH=${CBL_LLVM}:${PATH} make -C "${SRC_DIR}" -j"$(nproc)" KCONFIG_CONFIG="${LLVM_CFG}" LLVM=1 LLVM_IAS=1 olddefconfig
    git add "${LLVM_CFG}"
    git c -m "llvm_config: Disable debug info and enable ThinLTO"

    # Step 7: Enable and use the new LLVM configuration
    cat <<'EOF' | git ap || exit ${?}
diff --git a/trunk/PKGBUILD b/trunk/PKGBUILD
index 78d7e87..ed32971 100644
--- a/trunk/PKGBUILD
+++ b/trunk/PKGBUILD
@@ -18,6 +18,7 @@ _srcname=$pkgbase
 source=(
   "$_srcname::git+https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git?signed#tag=$_srctag"
   config         # the main kernel config file
+  llvm_config    # personal server config file
 )
 validpgpkeys=(
   'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
@@ -53,7 +54,7 @@ prepare() {
   done
 
   echo "Setting config..."
-  cp ../config .config
+  cp ../llvm_config .config
   _kmake olddefconfig
 
   _kmake -s kernelrelease > version
EOF
    updpkgsums
    git add PKGBUILD
    git c -m "PKGBUILD: Use LLVM configuration"

    # Step 8: Build it!
    makepkg -Cf
); }

# Additional setup steps for my workstation
function workstation_setup() {
    # Generate a kernel version for the current tree
    alias kver='make -s kernelversion'

    ccache_setup 100
    source "${SCRIPTS_FOLDER}"/env/stubs/bldgcc
    source "${SCRIPTS_FOLDER}"/env/stubs/cbl
    load_botinfo
    gpg_key_cache

    [[ "$(get_distro)" = "arch" ]] && export STORAGE_DRIVER=overlay
}
# vi: filetype=zsh
