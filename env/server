# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2017-2019 Nathan Chancellor
#
# Utility and terminal setup functions for my build server


# Setup server function
#
# Assumes the following things have been done:
#
# 1. The server has had its OS installed (if using Hetzner)
#
#    $ installimage -r yes -l 0 -f yes -n archlinux-<suffix>
#
# 2. My user account has been created
#
#    $ pacman -S zsh
#    $ useradd -m -G wheel -s /bin/zsh nathan
#    $ passwd
#    $ passwd nathan
#
# 3. sudo is installed and configured
#
#    $ pacman -S sudo
#    $ EDITOR=vim visudo
#
#    nathan ALL=(ALL) NOPASSWD:ALL
#
# 4. Keys to be installed are available at /tmp/keys
#
#    $ ssh-copy-id nathan@<ip>
#    $ ssh nathan@<ip> mkdir /tmp/keys
#    $ scp {id_ed25519,*.asc} nathan<ip>:/tmp/keys
#
function bootstrap() {(
    # Grab common variables
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/master/constants/server_folders) &>/dev/null || return 1
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/master/constants/versions) &>/dev/null || return 1
    # Grab common functions
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/master/common) &>/dev/null || return 1

    DOTFILES=${REPO_FOLDER}/dotfiles
    KEYS=/tmp/keys
    SCRIPTS=${MAIN_FOLDER}/scripts

    # Check if keys are available for installation
    [[ ! -d ${KEYS} ]] && die "${KEYS} doesn't exist, create it, and copy keys!"

    # Setup folders that will be used
    mkdir -p "${ALS}" \
             "${CBL}"/{android,git,mirrors} \
             "${KERNEL_FOLDER}"/sony \
             "${MISC_FOLDER}"/building \
             "${REPO_FOLDER}" \
             "${TC_FOLDER}" || die "Can't create folders, wtf?"

    # Enable multilib
    sudo sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf

    # Custom makepkg config
    sudo sed -i "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$(nproc --all)\"/g" /etc/makepkg.conf
    sudo sed -i 's/!ccache/ccache/g' /etc/makepkg.conf

    # Set the correct time
    sudo timedatectl set-timezone America/Phoenix

    # Install required binaries
    sudo pacman -Syyu --noconfirm || die "Error updating packages!"
    sudo pacman -S --needed --noconfirm aarch64-linux-gnu-gcc \
                                        asciidoc \
                                        base-devel \
                                        bat \
                                        ca-certificates \
                                        clang \
                                        ccache \
                                        cmake \
                                        cpio \
                                        docker \
                                        dtc \
                                        expect \
                                        fd \
                                        git \
                                        htop \
                                        hugo \
                                        iputils \
                                        jq \
                                        linux-zen \
                                        linux-zen-headers \
                                        lld \
                                        llvm \
                                        mosh \
                                        most \
                                        multilib-devel \
                                        mutt \
                                        neofetch \
                                        ninja \
                                        openssl \
                                        pacman-contrib \
                                        perl-authen-sasl \
                                        perl-mime-tools \
                                        perl-net-smtp-ssl \
                                        python \
                                        python-pip \
                                        qemu-headless-arch-extra \
                                        ripgrep \
                                        rubygems \
                                        tmux \
                                        uboot-tools \
                                        wget \
                                        xmlto || die "Error installing packages!"
    sudo pacman -R --noconfirm linux
    sudo grub-mkconfig -o /boot/grub/grub.cfg

    # Download and install mkdtimg
    MKDTIMG_FOLDER=$(mktemp -d)
    curl -LSs https://android.googlesource.com/platform/prebuilts/misc/+archive/master/linux-x86/libufdt.tar.gz | tar -C "${MKDTIMG_FOLDER}" -xzf -
    sudo mv "${MKDTIMG_FOLDER}"/mkdtimg /usr/local/bin
    rm -rf "${MKDTIMG_FOLDER}"

    # Setup keys
    mv "${KEYS}"/id_ed25519{,.pub} "${HOME}"/.ssh
    chmod 600 "${HOME}"/.ssh/id_ed25519
    gpg --pinentry-mode loopback --import "${KEYS}"/{public*,private*}.asc || die "Error installing gpg keys!"
    gpg --import-ownertrust "${KEYS}"/ownertrust*.asc || die "Error installing gpg ownertrust!"
    {
        echo "default-cache-ttl 604800"
        echo "max-cache-ttl 2419200"
    } > "${HOME}"/.gnupg/gpg-agent.conf
    gpg-connect-agent reloadagent /bye
    rm -rf "${KEYS}"

    # Install yay and AUR packages
    cd "${MISC_FOLDER}"/building || die "wtf?"
    curl -LSs -o PKGBUILD "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=yay"
    makepkg --noconfirm -si || die "Error installing yay!"
    gpg --recv-keys 702353E0F7E48EDB
    yay -S --needed lineageos-devel || die "Error running yay!"

    # Download repos
    [[ ! -d ${SCRIPTS} ]] && { git clone git@github.com:nathanchance/scripts "${SCRIPTS}" || die "Error cloning scripts!"; }
    source "${SCRIPTS}"/funcs/bldupdbin && bgit
    path_push "${HOME}/usr/bin"
    source "${SCRIPTS}"/funcs/git && git_setup
    source "${SCRIPTS}"/funcs/pure && pure_prompt
    for REPO in chromeos-adb-fastboot dotfiles hugo-files patches; do
        [[ ! -d ${REPO_FOLDER}/${REPO} ]] && { git -C "${REPO_FOLDER}" clone git@github.com:nathanchance/"${REPO}" || die "Error cloning ${REPO}!"; }
    done
    [[ ! -d ${REPO_FOLDER}/git ]] && { git -C "${REPO_FOLDER}" clone git://github.com/git/git || die "Error cloning git!"; }
    [[ ! -d ${ALS}/sp ]] && { git -C "${ALS}" clone git@github.com:nathanchance/stable-patches sp || die "Error cloning stable-patches!"; }

    # Install dotfiles
    (
        zsh "${DOTFILES}"/common/global_gitignore.sh
        zsh "${DOTFILES}"/common/vim/vim_setup.sh
        zsh "${DOTFILES}"/common/zshrc.sh
        cp -v "${DOTFILES}"/server/.tmux.conf "${HOME}"
        gpg --pinentry-mode loopback --output "${MAIN_FOLDER}"/.botinfo --decrypt "${DOTFILES}"/common/botinfo.gpg
        gpg --pinentry-mode loopback --output "${HOME}"/.muttrc --decrypt "${DOTFILES}"/common/muttrc.gpg
    ) || die "Error installing dotfiles"

    # Download toolchains
    git -C "${TC_FOLDER}" clone --single-branch https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/ aosp-clang
    git -C "${TC_FOLDER}" clone --depth=1 -b android-9.0.0_r1 --single-branch https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/ aosp-gcc-arm64
    git -C "${TC_FOLDER}" clone --depth=1 -b android-9.0.0_r1 --single-branch https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/ aosp-gcc-arm
    for VERSION in clang-4053586:android-9.0.0_r1 clang-4393122:android-9.0.0_r1 clang-4691093:android-9.0.0_r1 clang-r349610b:a59d17df840d203e477534a3312b36e2310712d0; do
        BRANCH=${VERSION#*:}
        VERSION=${VERSION%:*}
        mkdir -pv "${TC_FOLDER}/${VERSION}"
        curl -LSs https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/${BRANCH}/${VERSION}.tar.gz | tar -C "${TC_FOLDER}/${VERSION}" -xzf - || display_error "Error downloading ${VERSION}!"
    done
    git -C "${TC_FOLDER}" clone https://github.com/ThankYouMario/proprietary_vendor_qcom_sdclang-6.0_linux-x86 sd-llvm-6.0.2

    # Grab linux, linux-next, and linux-stable for CBL
    # https://www.kernel.org/cloning-linux-from-a-bundle.html
    (
        cd "${CBL}" || die "wtf?"
        for COMBO in torvalds/linux.git:linux torvalds/linux.git:mirrors/linux next/linux-next.git:linux-next stable/linux.git:linux-stable; do
            FOLDER=${COMBO#*:}
            URL=${COMBO%:*}
            CB=clone.bundle-${FOLDER##*/}
            [[ ! -f ${CB} ]] && wget -O "${CB}" -c https://git.kernel.org/pub/scm/linux/kernel/git/"${URL}"/clone.bundle
            git clone "${CB}" "${FOLDER}"
            (
                cd "${FOLDER}"
                git remote remove origin
                git remote add origin git://git.kernel.org/pub/scm/linux/kernel/git/"${URL}"
                git fetch origin
                git reset --hard origin/"$(git rev-parse --abbrev-ref HEAD)"
                [[ ${URL} =~ torvalds ]] && git branch --set-upstream-to=origin/master master
                [[ ${FOLDER} =~ mirrors ]] && git remote add github git@github.com:ClangBuiltLinux/linux.git
            )
        done
        rm -rf clone.bundle-*
        git clone -b personal git@github.com:nathanchance/tc-build.git
    )

    # Download other CBL things
    (
        cd "${CBL}"/android || die "wtf?"
        git clone https://android.googlesource.com/kernel/build
        git clone https://android.googlesource.com/kernel/common
        curl -LSso common/.git/hooks/commit-msg https://android-review.googlesource.com/tools/hooks/commit-msg
        chmod u+x common/.git/hooks/commit-msg

        cd "${CBL}"/git || die "wtf?"
        git clone git@github.com:ClangBuiltLinux/continuous-integration.git ci
        git clone git@github.com:ClangBuiltLinux/continuous-integration.git ci-master
        git clone git@github.com:ClangBuiltLinux/dockerimage.git
        git clone git@github.com:ClangBuiltLinux/tc-build.git
        for FOLDER in ci dockerimage tc-build; do (
            cd "${FOLDER}"
            hub fork
        ) done

        cd "${CBL}"/mirrors || die "wtf?"
        git clone git://github.com/llvm/llvm-project llvm
        cd llvm || die "wtf?"
        git remote add github git@github.com:ClangBuiltLinux/llvm-project.git
    )

    # Clone sonyxperiadev/kernel
    git -C "${KERNEL_FOLDER}/sony" clone git://github.com/sonyxperiadev/kernel

    # Clone marlin and msm-3.18 repos (for pulling their upstream updates, not stables)
    (
        cd "${ALS}"
        for REPO in msm-3.18:https://source.codeaurora.org/quic/la/kernel/msm-3.18 marlin:https://android.googlesource.com/kernel/msm/; do
            URL=${REPO#*:}
            REPO=${REPO%%:*}
            git clone git@github.com:android-linux-stable/"${REPO}".git || { display_error "Couldn't clone ${REPO}"; continue; }
            (
                cd "${REPO}"
                git remote add upstream "${URL}"
                git fetch upstream || { display_error "Couldn't fetch ${URL}"; continue; }
            )
        done
    )

    # Start Docker
    sudo gpasswd -a nathan docker
    sudo systemctl enable --now docker.service

    # Install gist
    gem install gist
    "${HOME}/.gem/ruby/2.6.0/bin/gist" --login

    # Reminder of things to do
    echo
    echo "Things still to do!"
    echo
    echo "1. EDITOR=vim crontab -e"
    echo
    echo "2. cd && source ~/.zshrc"
    echo
) || return 1; }


# Build server specific aliases
function server_aliases() {
    # default Arch ls alias
    alias ls='ls --color=auto'

    # Change directory aliases
    alias ack='cd ${KERNEL_FOLDER}/sources/kernel-common'
    alias pkg='cd ${REPO_FOLDER}/pkgbuilds'
    alias op6='cd ${KERNEL_FOLDER}/flash/op6'
    alias op6c='cd ${KERNEL_FOLDER}/flash/op6-custom'
    alias op6ak='cd ${KERNEL_FOLDER}/flash/anykernel2-op6'
    alias pi='cd ${KERNEL_FOLDER}/pi'
    alias pxl='cd ${KERNEL_FOLDER}/flash/marlin'
    alias pxlak='cd ${KERNEL_FOLDER}/flash/anykernel2-marlin'
    alias pxl2='cd ${KERNEL_FOLDER}/flash/wahoo'
    alias pxl2ak='cd ${KERNEL_FOLDER}/flash/anykernel2-wahoo'
    alias tlc='cd ${TC_FOLDER}'
    alias sod='cd ${KERNEL_FOLDER}/sony/kernel'
    alias spt='cd ${SCRIPTS_FOLDER}'

    # Generate a kernel version for the current tree
    alias kver='make kernelversion'

    # Setup build for AOSP
    alias senv='. build/envsetup.sh'

    # Alias for flash-kernel script
    alias fk='flash-kernel'

    # Alias for merge-stable script
    alias ms='merge-stable'

    # Clean out web folder
    alias wfc='git -C ${WEB_FOLDER}/downloads/kernels cl'
}


# Setup ccache
# ccache_setup <size>
function ccache_setup() {
    if [[ -f ${CCACHE} ]]; then
        if [[ -n ${1} ]]; then
            ccache -M "${1}"G &> /dev/null
            ccache --set-config=compression=true
            ccache --set-config=compression_level=9
            export USE_CCACHE=1
            add_to_path_pre "/usr/lib/ccache/bin"
        else
            display_error "Please specify ccache size!"
        fi
    else
        display_error "Please install ccache!"
    fi
}


# Setup build folders
function sbf() {
    [[ ! -d ${BLDF:?} ]] && { sudo mkdir "${BLDF}"; sudo chown -R "nathan:nathan" "${BLDF}"; }
    [[ -z $(findmnt "${BLDF}") ]] && sudo mount -t tmpfs -o "nodev,nosuid,size=30G" tmpfs "${BLDF}"
    type crbf &>/dev/null && crbf
}


# Clean build folder
function cbf() {(
    case "${1}" in
        b) FTC=${BBF:?} ;;
        l) FTC=${LBF:?} ;;
        k) FTC=${KBF:?} ;;
        *) FTC=${BLDF} ;;
    esac
    find "${FTC:?}" -mindepth 1 -delete 2>/dev/null
    type crbf &>/dev/null && crbf
)}


# Additional setup steps for my build server
function server_setup() {
    ccache_setup 250
    LOG=$(mktemp); export LOG
    add_to_path_pre "${SCRIPTS_FOLDER}/server"
    source "${SCRIPTS_FOLDER}"/constants/server_folders
    source "${SCRIPTS_FOLDER}"/funcs/bk
    source "${SCRIPTS_FOLDER}"/funcs/bldgcc
    source "${SCRIPTS_FOLDER}"/funcs/cbl
    add_to_path_post "${HOME}/.gem/ruby/2.6.0/bin"
    load_botinfo
    sbf
    ( gpg_available )
}


# Repo sync shorthand
function rps {
    repo sync "${JOBS_FLAG}" --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune "${@}"
}


# Repo init and sync function
# ris <url> <branch> |-s|
function ris {
    # User requested a shallow clone
    [[ ${3} = "-s" ]] && local DEPTH="--depth=1"

    repo init -u "${1}" -b "${2}" --no-clone-bundle ${DEPTH}

    time rps
}


# Neofetch alias
function nf() {
    echo
    neofetch \
        --kernel_shorthand on \
        --distro_shorthand tiny \
        --os_arch off \
        --uptime_shorthand tiny \
        --speed_shorthand on \
        --install_time off \
        --color_blocks off \
        "${@}"
    echo
    echo
}


# Find config values in a kernel tree
# kfg [-c <defconfig_file>] [-f <config>] [-e <config>] [-d <config>]
function kfg() {
    local ARCH CONFIG DEFCONFIGS LIST
    [[ -z ${ARCH} ]] && ARCH=arm64
    DEFCONFIGS="$(ls arch/${ARCH}/configs/flash*_defconfig 2>/dev/null)"

    while (( ${#} )); do
        case ${1} in
            "-c"|"--config")
                shift

                DEFCONFIGS=${1} ;;

            "-d"|"--disable")
                shift

                CONFIG=${1//CONFIG_/}
                for DEFCONFIG in ${DEFCONFIGS}; do
                    echo "# CONFIG_${CONFIG} is not set" >> arch/${ARCH}/configs/"$(basename "${DEFCONFIG}")"
                done ;;

            "-e"|"--enable")
                shift

                CONFIG=${1//CONFIG_/}

                for DEFCONFIG in ${DEFCONFIGS}; do
                    echo "CONFIG_${CONFIG}=y" >> arch/${ARCH}/configs/"$(basename "${DEFCONFIG}")"
                done ;;

            "-f"|"--find")
                shift

                CONFIG=${1//CONFIG_/}

                header "LOCATIONS OF ${CONFIG} IN TREE"
                git grep -n -1 "${CONFIG}" | rg --color=never Kconfig

                LIST=$(rg --color=never "${CONFIG}" out/.config)
                if [[ -n ${LIST} ]]; then
                    header "LOCATIONS OF ${CONFIG} IN CONFIG FILE"
                    echo "${LIST}"
                fi

                echo ;;

            "-u"|"--update")
                shift

                for DEFCONFIG in ${DEFCONFIGS}; do
                    [[ "${*}" =~ "-fc" ]] && FILE=out/.config || FILE=out/defconfig
                    rm -rf out
                    make O=out ARCH=${ARCH} "$(basename "${DEFCONFIG}")"
                    make O=out ARCH=${ARCH} savedefconfig
                    cp -v "${FILE}" arch/${ARCH}/configs/"$(basename "${DEFCONFIG}")"
                done ;;
        esac

        shift
    done
}


# A version of dib for android-kernel-clang
function dib-clang() {(
    case "$(git cb)" in
        "msm-3.18"*) DEFCONFIG=msm-perf_defconfig ;;
        "msm-4.4"*) DEFCONFIG=msmcortex-perf_defconfig ;;
        "msm-4.9"*) DEFCONFIG=sdm845-perf_defconfig ;;
    esac

    TC_LIST=( "--clang --clang-toolchain aosp-clang/clang-r344140"
              "--clang --clang-toolchain aosp-clang/clang-r328903"
              "--clang --clang-toolchain aosp-clang/clang-4691093"
              "" )
    [[ "$(git cb)" =~ oreo ]] && TC_LIST+=( "--clang --clang-toolchain aosp-clang/clang-4053586" )

    for ITEM in "${TC_LIST[@]}"; do
        read -rA ITEM_ARRAY <<< "${ITEM}"
        build-kernel -d "${DEFCONFIG}" -w -Werror -v oreo-small "${ITEM_ARRAY[@]}" "${@}"
    done
)}


# Update all remotes and run git gc/prune
function clean-kernels() {(
    REPOS=( "${MAIN_FOLDER}/als/jasmine"
            "${MAIN_FOLDER}/als/marlin"
            "${MAIN_FOLDER}/als/msm-3.18"
            "${MAIN_FOLDER}/als/msm-4.4"
            "${MAIN_FOLDER}/als/msm-4.9"
            "${MAIN_FOLDER}/als/nash"
            "${MAIN_FOLDER}/als/op3"
            "${MAIN_FOLDER}/als/op5"
            "${MAIN_FOLDER}/als/op6"
            "${MAIN_FOLDER}/als/polaris"
            "${MAIN_FOLDER}/als/sagit"
            "${MAIN_FOLDER}/als/tissot"
            "${MAIN_FOLDER}/als/wahoo"
            "${MAIN_FOLDER}/als/whyred"
            "${KERNEL_FOLDER}/flash/marlin"
            "${KERNEL_FOLDER}/flash/op6"
            "${KERNEL_FOLDER}/flash/op6-custom"
            "${KERNEL_FOLDER}/flash/wahoo"
            "${KERNEL_FOLDER}/pi"
            "${KERNEL_FOLDER}/roms/aicp-op5"
            "${KERNEL_FOLDER}/roms/aicp-op6"
            "${KERNEL_FOLDER}/roms/gzr-op3"
            "${KERNEL_FOLDER}/roms/gzr-op5"
            "${KERNEL_FOLDER}/roms/lineage-nash"
            "${KERNEL_FOLDER}/roms/lineage-op6"
            "${KERNEL_FOLDER}/sony/kernel" )

    for REPO in "${REPOS[@]}"; do
        header "${REPO}"
        if cd "${REPO}"; then
            git fetch --all
            git reflog expire --all --expire=now
            git gc --aggressive --prune=now --force
        else
            display_error "$(basename "${REPO}") doesn't exist!"
        fi
    done
)}


# Change email for git repositories
function change-email() {
    if [[ ${#} -lt 1 ]]; then
        display_error "This function takes an argument!"
        return 1
    fi

    case ${1} in
        "du")
            git config user.email "nathan@dirtyunicorns.com" ;;
        "prjkt")
            git config user.email "nathan@prjkt.io" ;;
        "personal")
            git config --unset user.email ;;
    esac
}


# Function to incrementally patch a kernel with stable
function stable-patch() {(
    CURRENT_VERSION=$(kver)
    TARGET_PATCH_LEVEL=$((${CURRENT_VERSION##*.} + 1))

    URL=https://cdn.kernel.org/pub/linux/kernel/v4.x/incr/patch-"${CURRENT_VERSION}"-"${TARGET_PATCH_LEVEL}".xz

    MESSAGE="treewide: Linux ${CURRENT_VERSION%.*}.${TARGET_PATCH_LEVEL}

source kernel.org
${URL}"

    if curl "${URL}" | xz -cd | git ap "${@}"; then
        git ac -m "${MESSAGE}"
    else
        echo
        echo
        echo "git ac -m \"${MESSAGE}\""
        echo
        echo
    fi
)}


# Update/init qcacld-3.0 tree
function qcacld() {(
    REPOS=( "fw-api" "qcacld-3.0" "qca-wifi-host-cmn" )

    while (( ${#} )); do
        case ${1} in
            "-i"|"--init") INIT=true ;;
            "-t"|"--tag") shift; TAG=${1} ;;
            "-u"|"--update") UPDATE=true ;;
        esac
        shift
    done
    [[ -n ${INIT} && -n ${UPDATE} ]] && { display_error "Both init and update were specified!"; return; }

    case "${PWD}" in
        *"sony"*)
            case "$(make kernelversion)" in
                4.4*) TAG=aosp/LA.UM.6.4.r1 ;;
                4.9*) TAG=aosp/LA.UM.7.3.r1 ;;
            esac
            URL=https://github.com/sonyxperiadev/vendor-qcom-opensource-wlan-
            SUBFOLDER=drivers/staging/wlan-qc ;;

        *)
            URL=https://source.codeaurora.org/quic/la/platform/vendor/qcom-opensource/wlan/
            SUBFOLDER=drivers/staging ;;
    esac
    [[ -z ${TAG} ]] && { display_error "No tag was specified!"; return; }

    for REPO in "${REPOS[@]}"; do
        echo "${REPO}"
        if ! git ls-remote --exit-code "${REPO}" &>/dev/null; then
            git remote add "${REPO}" "${URL}${REPO}"
        fi
        git fetch "${REPO}" "${TAG}"
        if [[ -n ${INIT} ]]; then
            if [[ "${PWD}" =~ "sony" ]]; then
                git rm "${SUBFOLDER}/${REPO}"
                git ac -m "staging: ${REPO}: Remove submodule reference"
            fi

            git m --allow-unrelated-histories -s ours --no-commit FETCH_HEAD
            git read-tree --prefix="${SUBFOLDER}/${REPO}" -u FETCH_HEAD
            git c --no-edit -m "staging: ${REPO}: Checkout at ${TAG}"
        elif [[ -n ${UPDATE} ]]; then
            git m --no-edit -m "staging: ${REPO}: Merge tag '${TAG}' into $(git cb)" \
                  -X subtree="${SUBFOLDER}/${REPO}" FETCH_HEAD
        fi
    done
)}


# Symlink the generic-commands file to all of the android-linux-stable trees for a particular kernel version
function symlink-commands() {(
    case ${1} in
        "3.18") FILES=( "marlin" "msm-3.18" "op3-8.0.0" "tissot" ) ;;
        "4.4") FILES=( "jasmine-p" "msm-4.4" "nash-lineage-16.0" "op5-android-9.0" "op5-lineage-16.0" "op5-P_9.0" "op5-P_9.0_Beta" "sagit" "wahoo" "whyred" ) ;;
        "4.9") FILES=( "bluecross" "msm-4.9" "op6-android-9.0" "op6-lineage-16.0" "op6-P_9.0" "op6-P_9.0_Beta" "polaris" ) ;;
        "4.14") FILES=( "msm-4.14" ) ;;
    esac

    for FILE in "${FILES[@]}"; do
        ln -sf generic-commands "${FILE}-commands"
    done
)}


# Shellcheck through Docker
function shellcheck() {(
    docker pull r.j3ss.co/shellcheck 1>/dev/null
    docker_mount --rm r.j3ss.co/shellcheck shellcheck "${@}"

)}

# vi: filetype=zsh
