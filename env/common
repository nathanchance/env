#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful
#
# Copyright (C) 2017-2021 Nathan Chancellor
#
# Utility and terminal setup functions

# Source the machine specific functions
case "$(id -un)@$(uname -n)" in
    nathan@archlinux-* | nathan@debian-* | nathan@ubuntu-*) LOCATION=workstation ;;
    nathan@MSI | nathan@Ryzen-5-4500U | nathan@Ryzen-9-3900X) LOCATION=wsl ;;
    pi@raspberrypi) LOCATION=pi ;;
    *) LOCATION=generic ;;
esac

# Source our universal function and location specific scripts if we are not being run via source <(cat ...)
if [[ ! ${0} =~ /proc ]]; then
    source "$(dirname "$(readlink -f "${0}")")"/../common
    source "${SCRIPTS_FOLDER}/env/${LOCATION}"
fi

# Universal aliases/functions/variables
function universal_setup() {
    # Use exa as ls
    alias ls='exa'

    # scripts folder alias
    alias spt='cd ${SCRIPTS_FOLDER}'

    # hub alias
    command -v hub &>/dev/null && alias git='hub'

    # tmux alias
    command -v tmux &>/dev/null && alias tmux='tmux -u'

    source "${SCRIPTS_FOLDER}/env/stubs/ccache"
    source "${SCRIPTS_FOLDER}/env/stubs/deldog"
    source "${SCRIPTS_FOLDER}/env/stubs/folders"
    source "${SCRIPTS_FOLDER}/env/stubs/git"
    source "${SCRIPTS_FOLDER}/env/stubs/kernel"
    source "${SCRIPTS_FOLDER}/env/stubs/updbin"
}

# Clean up /tmp
function cltmp() { (
    fd -t f . /tmp -x rm
    fd -t d -d 1 -E 'tmux*' -E 'systemd*' . /tmp -x rm -r
); }

# Update main server IP address file
function encrypt_serv_ip() { (
    [[ -f ${HOME}/.server_ip ]] || die "Server IP file could not be found"
    gpg_key_cache
    gpg --batch \
        --yes \
        --output "${SCRIPTS_FOLDER:?}"/configs/common/server_ip.gpg \
        --encrypt \
        --recipient natechancellor@gmail.com \
        "${HOME}"/.server_ip
); }

# Run shfmt on all shell files in the repo (assuming they end with .sh)
function fdshfmt() { (
    case ${PWD##*/} in
        scripts) fd -t x -E windows -x shfmt -ci -i 4 -w ;;
        *) fd -e sh -x shfmt -ci -i 4 -w ;;
    esac
); }

# Generate a sha256sum file based on a URL
function gen_sha256sum() { (
    URL=${1:?}
    FILE=${URL##*/}
    curl -LSsO "${URL}"
    sha256sum "${FILE}" >"${FILE}".sha256
    rm -rf "${FILE}"
    curl -LSsO "${URL}"
    sha256sum -c "${FILE}".sha256
    rm -rf "${FILE}"
); }

# Get the current status of hardware vulnerabilities
function hwvulns() {
    grep --color=always . /sys/devices/system/cpu/vulnerabilities/*
}

# Upgrade pip packages
function pipup() { (
    python3 -m pip install \
        --upgrade \
        --user \
        pip

    read -rA PIP_PACKAGES <<<"$(python3 -m pip list --outdated | tail -n +3 | cut -d ' ' -f 1)"
    python3 -m pip install \
        --upgrade \
        --user \
        "${PIP_PACKAGES[@]}"
); }

# Bind mount current PWD into Podman container
function podman_mount() {
    podman run \
        --mount type=bind,source="${PWD}",target=/"${PWD##*/}",ro=true \
        --workdir /"${PWD##*/}" \
        "${@}"
}

# {bash,zsh}rc reload function
function rld() {
    source "${SCRIPTS_FOLDER}/env/common"
    shell_setup
}

function shell_setup() {
    # Shell specific options
    if [[ -n ${ZSH_NAME} ]]; then
        # These come from the environment
        # shellcheck disable=SC2154
        [[ -n ${terminfo[khome]} ]] && bindkey "${terminfo[khome]}" beginning-of-line
        [[ -n ${terminfo[kend]} ]] && bindkey "${terminfo[kend]}" end-of-line
        bindkey "^[[1;5D" beginning-of-line
        bindkey "^[[1;5C" end-of-line

        setopt autocd
        # zsh-ism, which shellcheck doesn't understand
        # shellcheck disable=SC2034
        typeset -gU path

        echo "${fpath[*]}" | grep -q -s "${HOME}/.zfunctions" || fpath=("${HOME}/.zfunctions" "${fpath[@]}")

        export HISTSIZE=100000
        export PURE_GIT_PULL=0
        export TIMEFMT=$'\nreal\t%*E\nuser\t%*U\nsys\t%*S'

        GIT_COMPLETIONS=${HOME}/usr/share/bash-completion/completions/git
        [[ -f ${GIT_COMPLETIONS} ]] && zstyle ':completion:*:*:git:*' script "${GIT_COMPLETIONS}"

        # Enable Pure and make it look more like Spaceship
        # https://github.com/denysdovhan/spaceship-prompt
        # I would just use Spaceship but it does not have async
        # git commands so it is significantly slower than Pure.
        autoload -U compinit && compinit
        autoload -U promptinit &&
            promptinit &&
            prompt pure &&
            zstyle :prompt:pure:git:stash show yes &&
            zstyle :prompt:pure:git:arrow color red &&
            zstyle :prompt:pure:git:dirty color red &&
            zstyle :prompt:pure:git:stash color red &&
            zstyle :prompt:pure:git:action color magenta &&
            zstyle :prompt:pure:git:branch color magenta &&
            zstyle :prompt:pure:host color green &&
            zstyle :prompt:pure:prompt:continuation color yellow &&
            zstyle :prompt:pure:prompt:success color green &&
            zstyle :prompt:pure:user color yellow &&
            zstyle :prompt:pure:user:root color red &&
            zstyle :prompt:pure:virtualenv color blue

        ZSH_HGHLGHT_SYNTAX=${HOME}/.zfunctions/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
        [[ -f ${ZSH_HGHLGHT_SYNTAX} ]] && source "${ZSH_HGHLGHT_SYNTAX}"
    elif [[ -n ${BASH} ]]; then
        shopt -s checkwinsize
    else
        echo "Unsupported shell!"
        return 1
    fi

    # Environment setup
    path_push "${HOME}/.local/bin"
    path_push "${HOME}/.cargo/bin"
    path_push "${HOME}/usr/bin"
    [[ -f ${HOME}/.del_dog_api_key ]] && source "${HOME}/.del_dog_api_key"
    [[ -f ${HOME}/.server_ip ]] && source "${HOME}/.server_ip"
    universal_setup
    "${LOCATION}"_setup
    GPG_TTY=$(tty)
    export GPG_TTY
    ssh_agent
    tmxa
}

# Symlink an LLVM toolchain into ${HOME}/usr
function symlink_llvm() { (
    header "Removing symlinks"
    for FILE in $(fd -t l . "${HOME}"/usr); do
        [[ $(readlink -f "${FILE}") =~ toolchains/llvm ]] && rm -vrf "${FILE}"
    done

    header "Removing empty directories"
    while true; do
        OUTPUT=$(fd -t e . "${HOME}"/usr -x rm -vrf)
        if [[ -n ${OUTPUT} ]]; then
            echo "${OUTPUT}"
        else
            break
        fi
    done

    header "Symlinking LLVM"
    cp -frsv "${LLVM_TC_FOLDER}/${1:?}"/* "${HOME}"/usr
); }

# Try to attach via tmux
function tmxa() {
    command -v tmux &>/dev/null || return ${?}
    [[ -z ${TMUX} ]] && tmux new-session -AD -s main
    return 0
}

# Try to detach via tmux
function tmxd() {
    command -v tmux &>/dev/null || return ${?}
    if [[ -z ${TMUX} ]]; then
        builtin exit
    else
        tmux detach
    fi
}

# Update function
function upd() { (
    case "$(get_distro)" in
        arch) yay ;;
        debian | ubuntu) sudo sh -c 'apt update && apt upgrade && apt autoremove -y' ;;
    esac
); }

# Update my website
function upd_website() { (
    WEBSITE=${GITHUB_FOLDER}/nathanchance.github.io
    HUGO_FILES=${GITHUB_FOLDER}/hugo-files

    [[ -d ${WEBSITE} && -d ${HUGO_FILES} ]] || die "Website and hugo-files should be cloned before running this function"

    while ((${#})); do
        case ${1} in
            -p | --push) PUSH=true ;;
        esac
        shift
    done

    cd "${HUGO_FILES}" || die "${HUGO_FILES} is not cloned"
    fd -E CNAME . "${WEBSITE}" -x rm -rf
    hugo -d "${WEBSITE}"

    HF_URL=$(git remote get-url origin | sed 's/git@github.com:/https:\/\/github.com\//')
    HF_HASH=$(git sh -s --format=%H)

    cd "${WEBSITE}" || die "Website is not cloned"
    git aa
    git ac -m "website: Update to ${HF_URL}/commit/${HF_HASH}"
    ${PUSH:=false} || return 0
    git push
); }
# vi: filetype=zsh
