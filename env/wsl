#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful
#
# Copyright (C) 2019-2021 Nathan Chancellor
#
# Utility and terminal setup functions for WSL

# $ sh -c 'apt update && apt dist-upgrade -y && apt install -y --no-install-recommends ca-certificates curl zsh && chsh -s /bin/zsh nathan'

# Setup function
#
# Requires Keys folder to be available in /mnt/c/Users/natec/Documents
function bootstrap() { (
    # Grab common functions/variables
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/main/common) &>/dev/null || exit ${?}
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/main/env/stubs/folders) &>/dev/null || exit ${?}

    # Keys location
    KEYS=/mnt/c/Users/natec/Documents/Keys
    [[ -d ${KEYS} ]] || die "Keys are not available, please download them to Documents"

    # Setup SSH and GPG if keys are present
    install_ssh_keys || exit ${?}
    ssh_agent

    # Setup GPG
    if ! gpg_key_usable; then
        gpg --pinentry-mode loopback --import "${KEYS}"/signing/private.asc || die "Error installing gpg keys"
        gpg --import "${KEYS}"/main/public.asc || die "Error installing gpg keys"
        gpg --import-ownertrust "${KEYS}"/main/ownertrust*.asc || die "Error installing gpg ownertrust"
        printf 'default-cache-ttl 604800\nmax-cache-ttl 2419200\n' | tee "${HOME}"/.gnupg/gpg-agent.conf
        gpg-connect-agent reloadagent /bye
    fi
    gpg_key_cache

    # Clone scripts
    mkdir -p "${GITHUB_FOLDER}"
    SCRIPTS=${GITHUB_FOLDER}/scripts
    [[ -d ${SCRIPTS} ]] || { git clone git@github.com:nathanchance/scripts "${SCRIPTS}" || die "Error cloning script"; }
    git -C "${SCRIPTS}" pull
    source <(cat "${SCRIPTS}"/env/common)
    source "${SCRIPTS}"/env/stubs/zsh && setup_zsh_env
    source "${SCRIPTS}"/env/stubs/setup && global_gitignore
    SCRIPTS_FOLDER=${SCRIPTS} rbld_usr
    path_push "${HOME}/usr/bin"
    source "${SCRIPTS}"/env/stubs/git && git_setup
    ln -fs "${SCRIPTS}"/configs/local/.tmux.conf "${HOME}"/.tmux.conf
    zsh "${SCRIPTS}"/configs/common/vim/vim_setup.sh
    decrypt_del_dog_api_key
    decrypt_gpg_file neomuttrc
    decrypt_serv_ip

    # Clone password store
    [[ -d ${HOME}/.password-store ]] || { git clone git@github.com:nathanchance/password-store.git "${HOME}"/.password-store || die "Error cloning password store"; }

    # Download website files
    for REPO in hugo-files nathanchance.github.io; do
        [[ -d ${GITHUB_FOLDER}/${REPO} ]] || git clone git@github.com:nathanchance/"${REPO}" "${GITHUB_FOLDER}/${REPO}"
    done
    git -C "${GITHUB_FOLDER}"/hugo-files submodule update --init --recursive
) && source "${HOME}"/.zshrc; }

# Rebuild ~/usr
function rbld_usr() { (
    source "${SCRIPTS_FOLDER:?}"/env/stubs/updbin || die "Cannot source updbin"
    rm -rf "${HOME:?}"/usr
    updbin || die "updbin failed"
    ib4 || die "ib4 failed"
    ihugo || die "ihugo failed"
    ipneofetch || die "ipneofetch failed"
    if [[ -d ${LLVM_TC_FOLDER} ]]; then
        # This will never not be alphanumeric and find is insanely convoluted
        # shellcheck disable=SC2012
        DATE=$(ls -1ht "${LLVM_TC_FOLDER}" | head -n1)
        [[ -n ${DATE} ]] && symlink_llvm "${DATE}"
    fi

    for SCRIPT in "${SCRIPTS_FOLDER}"/kernel/*.sh; do
        ln -fs "${SCRIPT}" "${HOME}"/usr/bin/"${SCRIPT##*/}"
    done
); }

# Build tip of tree LLVM
function updllvm() { (
    DATE=$(date +%Y-%m-%d)

    LLVM_SRC=${SRC_FOLDER:?}/llvm-project
    mkdir -p "${SRC_FOLDER}"
    [[ -d ${LLVM_SRC} ]] || git clone https://github.com/llvm/llvm-project "${LLVM_SRC}"
    git -C "${LLVM_SRC}" pull || die "Error updating LLVM"

    mkdir -p "${LLVM_TC_FOLDER:?}"
    PREFIX=${LLVM_TC_FOLDER}/${DATE} bllvm -i &&
        symlink_llvm "${DATE}" &&
        ccache -Cz
); }

# Install and patch neofetch to work around 'uname -r' hijack
function ipneofetch() { (
    [[ -z ${NEOFETCH_VERSION} ]] && NEOFETCH_VERSION=$(glr dylanaraps/neofetch)
    NEOFETCH=${PREFIX:-${HOME}/usr}/bin/neofetch
    rm -rf "${NEOFETCH}"
    mkdir -p "${NEOFETCH%/*}"
    curl -LSso "${NEOFETCH}" https://github.com/dylanaraps/neofetch/raw/"${NEOFETCH_VERSION}"/neofetch
    chmod +x "${NEOFETCH}"
    sed -i "s/kernel_version=.*/kernel_version=\"\$(cat \/proc\/sys\/kernel\/osrelease)\"/g" "${NEOFETCH}"
); }

function mshpi3() { (
    mosh pi@192.168.4.89
); }

function mshpi4() { (
    mosh pi@192.168.4.104
); }

function mshsvr() { (
    mosh nathan@"${SERVER_IP:?}"
); }

# Laptop specific setup
function wsl_setup() {
    # Account for VS Code Insiders having a different binary name
    # But only overwrite code if it does not already exist
    (! type -f code && type -f code-insiders) &>/dev/null && alias code='code-insiders'

    gpg_key_cache

    source "${SCRIPTS_FOLDER}"/env/stubs/folders
    CBL_LLVM_BNTL=${TC_FOLDER}/cbl/llvm-binutils/bin
    export CBL_LLVM_BNTL

    # Load the stock completions to make sure we don't miss out on anything
    echo "${fpath[*]}" | grep -q -s "vendor-completions" || fpath=("${fpath[@]}" /usr/share/zsh/vendor-completions)
    compinit

    # Setup ccache
    ccache_setup 25
}

# Update WSL kernel from server
function upd_kernel() { (
    while ((${#})); do
        case ${1} in
            -g | --github) KERNEL_LOCATION=github ;;
            -l | --local) KERNEL_LOCATION=local ;;
            -s | --server) KERNEL_LOCATION=server ;;
            -k | --kernel-prefix) shift && KERNEL_SUFFIX=${1} ;;
        esac
        shift
    done

    set -x

    KERNEL=/mnt/c/Users/natec/Linux/kernel${KERNEL_SUFFIX}
    rm -r "${KERNEL}"

    case ${KERNEL_LOCATION:-github} in
        local)
            cp -v "${SRC_FOLDER}"/wsl2-kernel/build/x86_64/arch/x86/boot/bzImage "${KERNEL}"
            ;;
        github)
            REPO=nathanchance/WSL2-Linux-Kernel
            curl -LSso "${KERNEL}" https://github.com/"${REPO}"/releases/download/"$(glr "${REPO}")"/bzImage
            ;;
        server)
            KSRC_FOLDER=${CBL}/build/wsl2
            OUT_FOLDER=build/x86_64
            KERNEL_IMAGE=arch/x86/boot/bzImage
            scp nathan@"${SERVER_IP:?}":"${KSRC_FOLDER}"/${OUT_FOLDER}/${KERNEL_IMAGE} "${KERNEL}"
            ;;
    esac
); }

# Install rust using the recommended command
function install_rust_wsl() { (
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
); }

# Shortcut for properly running 'hugo server' in WSL 2
function hugo_serve() { (
    IP=$(ip addr | grep eth0 | grep inet | awk '{print $2}')
    hugo server --baseUrl="${IP%/*}" --bind=0.0.0.0
); }

# Strip executables within a folder
function stripall() { (
    cd "${1:?}" || exit ${?}
    for FILE in $(fd -t file -x file | grep 'not stripped' | cut -d: -f1); do strip "${FILE}"; done
); }

function bldtcs() { (
    DATE_TIME=$(date +%Y%m%d-%H%M)
    TC_PREFIX=${TC_FOLDER}/cbl

    # Update tc-build
    TCBLD=${SRC_FOLDER}/tc-build
    [[ -d ${TCBLD} ]] || git clone -b personal git@github.com:nathanchance/tc-build.git "${TCBLD}"
    cd "${TCBLD}" || die "Error downloading tc-build"
    git ru
    git rh origin/"$(git cb)"

    # Build binutils
    TC_BLD_BNTLS=${TCBLD}/binutils
    [[ -d ${TC_BLD_BNTLS} ]] || git clone https://sourceware.org/git/binutils-gdb.git "${TC_BLD_BNTLS}"
    git -C "${TC_BLD_BNTLS}" pull --rebase || die "Updating binutils failed (${?})"
    BLDBN_INSTALL_FOLDER=${TC_PREFIX}/binutils-${DATE_TIME}-$(git -C "${TC_BLD_BNTLS}" sh -s --format=%H origin/master)
    "${TCBLD}"/build-binutils.py --install-folder "${BLDBN_INSTALL_FOLDER}" || die "bldbn failed with exit code ${?}"
    stripall "${BLDBN_INSTALL_FOLDER}"

    # Update binutils
    (cd "${TC_PREFIX}" &&
        rm -f binutils &&
        ln -s "${BLDBN_INSTALL_FOLDER##*/}" binutils)

    # Build LLVM/Clang/lld
    TC_BLD_LLVM_PRJCT=${TCBLD}/llvm-project
    [[ -d ${TC_BLD_LLVM_PRJCT} ]] || git clone https://github.com/llvm/llvm-project "${TC_BLD_LLVM_PRJCT}"
    git -C "${TC_BLD_LLVM_PRJCT}" pull --rebase || die "Updating llvm-project failed (${?})"
    BLDLLVM_INSTALL_FOLDER=${TC_PREFIX}/llvm-${DATE_TIME}-$(git -C "${TC_BLD_LLVM_PRJCT}" sh -s --format=%H origin/master)
    "${TCBLD}"/build-llvm.py \
        --assertions \
        --check-targets lld clang llvm \
        --install-folder "${BLDLLVM_INSTALL_FOLDER}" \
        --pgo || die "bldllvm failed with exit code ${?}"
    stripall "${BLDLLVM_INSTALL_FOLDER}"

    # Update llvm-tot symlink
    (cd "${TC_PREFIX}" &&
        rm -f llvm-tot &&
        ln -sf "${BLDLLVM_INSTALL_FOLDER##*/}" llvm-tot)

    # Combine CBL_LLVM and CBL_BNTL for llvm-kernel-testing
    COMBO_FOLDER=${CBL_LLVM_BNTL%/*}
    rm -rf "${COMBO_FOLDER}" &&
        mkdir -p "${COMBO_FOLDER}" &&
        cp -frs "${BLDBN_INSTALL_FOLDER}"/* "${COMBO_FOLDER}" &&
        cp -frs "${BLDLLVM_INSTALL_FOLDER}"/* "${COMBO_FOLDER}"
); }
# vi: filetype=zsh
