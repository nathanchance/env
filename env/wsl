#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful
#
# Copyright (C) 2019-2021 Nathan Chancellor
#
# Utility and terminal setup functions for WSL

# Rebuild ~/usr
function rbld_usr() { (
    source "${SCRIPTS_FOLDER:?}"/env/stubs/updbin || die "Cannot source updbin"

    # Clean up PREFIX
    RBLD_USR_PREFIX=${PREFIX:-${USR_FOLDER:?}}
    RBLD_USR_STOW=${RBLD_USR_PREFIX}/stow
    if [[ -d ${RBLD_USR_STOW} ]]; then (
        header "Cleaning up stow directory"
        cd "${RBLD_USR_STOW}" || exit ${?}
        for PACKAGE in *-latest git prebuilts scripts; do [[ -d ${PACKAGE} ]] && stow -D -v "${PACKAGE}"; done
    ); fi
    rm -rf "${RBLD_USR_PREFIX:?}"/{bin,doc,include,lib,libexec,share}
    mkdir -p "${RBLD_USR_STOW}"

    # Distribution specific packages
    case "$(get_distro)" in
        arch)
            bgit || exit ${?}
            bcvise || exit ${?}
            ;;
        debian | ubuntu)
            updbin || die "updbin failed"
            ihugo || die "ihugo failed"
            ;;
    esac

    # Binaries to install on any distribution
    ib4 || exit ${?}

    # Standalone kernel development scripts
    SCRIPTS_BIN=${RBLD_USR_STOW}/scripts/bin
    mkdir -p "${SCRIPTS_BIN}"
    for SCRIPT in "${SCRIPTS_FOLDER}"/kernel/*.sh; do
        ln -fsv "${SCRIPT}" "${SCRIPTS_BIN}"/"${SCRIPT##*/}"
    done
    stow -d "${RBLD_USR_STOW}" -v scripts

    # git functions
    GIT_BIN=${RBLD_USR_STOW}/git/bin
    mkdir -p "${GIT_BIN}"
    for SCRIPT in "${SCRIPTS_FOLDER}"/git/*; do
        ln -fsv "${SCRIPT}" "${GIT_BIN}"/git-"${SCRIPT##*/}"
    done
    stow -d "${RBLD_USR_STOW}" -v git

    # Self compiled ToT LLVM
    if [[ -d ${LLVM_TC_FOLDER} ]]; then
        # This will never not be alphanumeric and find is insanely convoluted
        # shellcheck disable=SC2012
        DATE=$(command ls -1ht "${LLVM_TC_FOLDER}" | head -n1)
        [[ -n ${DATE} ]] && stow_llvm "${DATE}"
    fi
); }

# Build tip of tree LLVM
function updllvm() { (
    DATE=$(date +%F)

    LLVM_SRC=${SRC_FOLDER:?}/llvm-project
    mkdir -p "${SRC_FOLDER}"
    [[ -d ${LLVM_SRC} ]] || git clone https://github.com/llvm/llvm-project "${LLVM_SRC}"
    git -C "${LLVM_SRC}" pull || die "Error updating LLVM"

    mkdir -p "${LLVM_TC_FOLDER:?}"
    PREFIX=${LLVM_TC_FOLDER}/${DATE} bllvm -i &&
        stow_llvm "${DATE}" &&
        ccache -Cz
); }

function mshpi3() { (
    mosh pi@192.168.4.89
); }

function mshpi4() { (
    mosh pi@192.168.4.104
); }

function mshsvr() { (
    mosh nathan@"${SERVER_IP:?}"
); }

# Laptop specific setup
function wsl_setup() {
    # Account for VS Code Insiders having a different binary name
    # But only overwrite code if it does not already exist
    (! type -f code && type -f code-insiders) &>/dev/null && alias code='code-insiders'

    gpg_key_cache

    source "${SCRIPTS_FOLDER}"/env/stubs/folders
    CBL_LLVM_BNTL=${TC_FOLDER}/cbl/llvm-binutils/bin
    export CBL_LLVM_BNTL

    # Load the stock completions to make sure we don't miss out on anything
    echo "${fpath[*]}" | grep -q -s "vendor-completions" || fpath=("${fpath[@]}" /usr/share/zsh/vendor-completions)
    compinit

    # Setup ccache
    ccache_setup 25
}

# Update WSL kernel from server
function upd_kernel() { (
    while ((${#})); do
        case ${1} in
            -g | --github) KERNEL_LOCATION=github ;;
            -l | --local) KERNEL_LOCATION=local ;;
            -s | --server) KERNEL_LOCATION=server ;;
            -k | --kernel-prefix) shift && KERNEL_SUFFIX=${1} ;;
        esac
        shift
    done

    set -x

    KERNEL=/mnt/c/Users/natec/Linux/kernel${KERNEL_SUFFIX}
    rm -r "${KERNEL}"

    case ${KERNEL_LOCATION:-github} in
        local)
            cp -v "${SRC_FOLDER}"/wsl2-kernel/build/x86_64/arch/x86/boot/bzImage "${KERNEL}"
            ;;
        github)
            REPO=nathanchance/WSL2-Linux-Kernel
            curl -LSso "${KERNEL}" https://github.com/"${REPO}"/releases/download/"$(glr "${REPO}")"/bzImage
            ;;
        server)
            KSRC_FOLDER=${CBL}/build/wsl2
            OUT_FOLDER=build/x86_64
            KERNEL_IMAGE=arch/x86/boot/bzImage
            scp nathan@"${SERVER_IP:?}":"${KSRC_FOLDER}"/${OUT_FOLDER}/${KERNEL_IMAGE} "${KERNEL}"
            ;;
    esac
); }

# Install rust using the recommended command
function install_rust_wsl() { (
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
); }

# Shortcut for properly running 'hugo server' in WSL 2
function hugo_serve() { (
    IP=$(ip addr | grep eth0 | grep inet | awk '{print $2}')
    hugo server --baseUrl="${IP%/*}" --bind=0.0.0.0
); }

# Strip executables within a folder
function stripall() { (
    cd "${1:?}" || exit ${?}
    for FILE in $(fd -t file -x file | grep 'not stripped' | cut -d: -f1); do strip "${FILE}"; done
); }

function bldtcs() { (
    DATE_TIME=$(date +%F_%H-%M-%S)
    TC_PREFIX=${TC_FOLDER}/cbl

    # Update tc-build
    TCBLD=${SRC_FOLDER}/tc-build
    [[ -d ${TCBLD} ]] || git clone -b personal git@github.com:nathanchance/tc-build.git "${TCBLD}"
    cd "${TCBLD}" || die "Error downloading tc-build"
    git ru
    git rh origin/"$(git cb)"

    # Build binutils
    TC_BLD_BNTLS=${TCBLD}/binutils
    [[ -d ${TC_BLD_BNTLS} ]] || git clone https://sourceware.org/git/binutils-gdb.git "${TC_BLD_BNTLS}"
    git -C "${TC_BLD_BNTLS}" pull --rebase || die "Updating binutils failed (${?})"
    BLDBN_INSTALL_FOLDER=${TC_PREFIX}/binutils-${DATE_TIME}-$(git -C "${TC_BLD_BNTLS}" sh -s --format=%H origin/master)
    "${TCBLD}"/build-binutils.py --install-folder "${BLDBN_INSTALL_FOLDER}" || die "bldbn failed with exit code ${?}"
    stripall "${BLDBN_INSTALL_FOLDER}"

    # Update binutils
    ln -fnrsv "${BLDBN_INSTALL_FOLDER}" "${TC_PREFIX}"/binutils-latest

    # Build LLVM/Clang/lld
    TC_BLD_LLVM_PRJCT=${TCBLD}/llvm-project
    [[ -d ${TC_BLD_LLVM_PRJCT} ]] || git clone https://github.com/llvm/llvm-project "${TC_BLD_LLVM_PRJCT}"
    git -C "${TC_BLD_LLVM_PRJCT}" pull --rebase || die "Updating llvm-project failed (${?})"
    BLDLLVM_INSTALL_FOLDER=${TC_PREFIX}/llvm-${DATE_TIME}-$(git -C "${TC_BLD_LLVM_PRJCT}" sh -s --format=%H origin/master)
    "${TCBLD}"/build-llvm.py \
        --assertions \
        --check-targets lld clang llvm \
        --install-folder "${BLDLLVM_INSTALL_FOLDER}" \
        --pgo || die "bldllvm failed with exit code ${?}"
    stripall "${BLDLLVM_INSTALL_FOLDER}"

    # Update llvm-latest symlink
    ln -fnrsv "${BLDLLVM_INSTALL_FOLDER}" "${TC_PREFIX}"/llvm-latest

    # Combine CBL_LLVM and CBL_BNTL for llvm-kernel-testing
    stow -d "${TC_PREFIX}" -R -t "${CBL_LLVM_BNTL%/*}" -v binutils-latest
    stow -d "${TC_PREFIX}" -R -t "${CBL_LLVM_BNTL%/*}" -v llvm-latest
); }
# vi: filetype=zsh
