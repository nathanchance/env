# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2019-2020 Nathan Chancellor
#
# Functions to build the latest versions of certain pieces of software

#######################
#  BUILD FROM SOURCE  #
#######################

# Build/update ccache
function bccache() { (
    header "Building ccache"
    CCACHE_REPO=ccache/ccache
    [[ -z ${CCACHE_VERSION} ]] && CCACHE_VERSION=$(glr "${CCACHE_REPO}")
    CCACHE_FOLDER=ccache-${CCACHE_VERSION//v/}
    TMP_FOLDER=$(mktemp -d)
    cd "${TMP_FOLDER}"
    curl -LSs https://github.com/"${CCACHE_REPO}"/releases/download/"${CCACHE_VERSION}"/"${CCACHE_FOLDER}".tar.gz | tar -xzf -
    cd "${CCACHE_FOLDER}" || die "Downloading or extracting ccache failed"
    mkdir -p build
    cd build || die "Could not create build folder"
    cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX="${CCACHE_PREFIX:=${PREFIX:-${HOME}/usr}}" \
        -DZSTD_FROM_INTERNET=ON .. || die "cmake configuration failed"
    make "${JOBS_FLAG:--j"$(nproc)"}" || die "make failed"
    make install || die "install failed"
    rm -rf "${TMP_FOLDER}"

    move_to_front_of_path "${CCACHE_PREFIX}"/bin
    command -v ccache
    ccache --version
); }

# Build/update cmake
function bcmake() { (
    header "Building cmake"
    CMAKE_REPO=Kitware/CMake
    [[ -z ${CMAKE_VERSION} ]] && CMAKE_VERSION=$(glr "${CMAKE_REPO}")
    CMAKE_FOLDER=cmake-${CMAKE_VERSION//v/}
    TMP_FOLDER=$(mktemp -d)

    cd "${TMP_FOLDER}"
    curl -LSs https://github.com/"${CMAKE_REPO}"/releases/download/"${CMAKE_VERSION}"/"${CMAKE_FOLDER}".tar.gz | tar -xzf -
    cd "${CMAKE_FOLDER}" || die "Downloading or extracting cmake failed"

    ./bootstrap \
        --parallel="${THREADS:-$(nproc)}" \
        --prefix="${CMAKE_PREFIX:=${PREFIX:-${HOME}/usr}}"

    make "${JOBS_FLAG:--j"$(nproc)"}" || die "make failed"
    make install || die "install failed"
    rm -rf "${TMP_FOLDER}"
    cd || die "Can't go home"

    move_to_front_of_path "${CMAKE_PREFIX}"/bin
    command -v cmake
    cmake --version
); }

# Build/update cuttlefish tools
function bcttlfshtools() { (
    header "Building Cuttlefish host package"
    TMP_FOLDER=$(mktemp -d)
    cd "${TMP_FOLDER}"
    git clone https://github.com/google/android-cuttlefish
    cd android-cuttlefish
    debuild -i -us -uc -b
    sudo dpkg -i ../cuttlefish-common_*_amd64.deb
    sudo apt-get install -f -y
    rm -rf "${TMP_FOLDER}"
    sudo usermod -aG cvdnetwork "${USER}"
    sudo usermod -aG kvm "${USER}"
); }

# Build/update cvise
function bcvise() { (
    header "Building cvise"
    CVISE_REPO=marxin/cvise
    [[ -z ${CVISE_VERSION} ]] && CVISE_VERSION=$(glr ${CVISE_REPO})
    TMP_FOLDER=$(mktemp -d)
    cd "${TMP_FOLDER}" || die "Cannot move into TMP_FOLDER"
    curl -LSs https://github.com/${CVISE_REPO}/archive/v"${CVISE_VERSION//v/}".tar.gz | tar -xzf -
    cd cvise-"${CVISE_VERSION//v/}" || die "Error downloading cvise source"
    mkdir -p build
    cd build || die "Error creating build folder"
    pipup
    python3 -m pip install \
        --upgrade \
        --user \
        pebble psutil pytest
    path_push "${HOME}"/.local/bin
    cmake \
        -DCMAKE_C_COMPILER="$(command -v clang || command -v gcc)" \
        -DCMAKE_CXX_COMPILER="$(command -v clang++ || command -v g++)" \
        -DCMAKE_INSTALL_PREFIX="${CVISE_PREFIX:-${PREFIX:-${HOME}/usr}}" \
        -DCMAKE_PREFIX_PATH=/usr/lib/llvm-10 \
        -DPYTHON_EXECUTABLE="$(command -v python3)" \
        .. &&
        make "${JOBS_FLAG:--j"$(nproc)"}" &&
        make install
    rm -rf "${TMP_FOLDER}"
); }

# Build/update dtc
function bdtc() { (
    header "Building dtc"
    DTC_FOLDER=${SRC_FOLDER:-${HOME}/src}/dtc
    if [[ ! -d ${DTC_FOLDER} ]]; then
        mkdir -p "${DTC_FOLDER%/*}"
        git clone https://git.kernel.org/pub/scm/utils/dtc/dtc.git "${DTC_FOLDER}"
    fi
    cd "${DTC_FOLDER}" || die "Couldn't move into ${DTC_FOLDER}"

    git clean -fxdq
    git fetch

    [[ -z ${DTC_VERSION} ]] && DTC_VERSION=$(git describe --tags "$(git rev-list --tags --max-count=1)")
    git checkout v"${DTC_VERSION//v/}"

    make "${JOBS_FLAG:--j"$(nproc)"}" PREFIX="${PREFIX:-${HOME}/usr}" install
); }

# Build/update git
function bgit() { (
    ihub || exit ${?}
    header "Building git"
    [[ $(uname -m) =~ x86 ]] && MARCH="-march=native "
    MAKE=(make "${JOBS_FLAG:--j"$(nproc)"}"
    prefix="${GIT_PREFIX:=${PREFIX:-${HOME}/usr}}"
    CFLAGS="${MARCH}-O2 -pipe -fstack-protector-strong -fno-plt"
    LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now"
    USE_LIBPCRE2=1
    NO_CROSS_DIRECTORY_HARDLINKS=1
    NO_PERL_CPAN_FALLBACKS=1)

    GIT_FOLDER=${SRC_FOLDER:-${HOME}/src}/git
    if [[ ! -d ${GIT_FOLDER} ]]; then
        mkdir -p "${GIT_FOLDER%/*}"
        git clone https://github.com/git/git "${GIT_FOLDER}"
    fi
    cd "${GIT_FOLDER}" || die "Couldn't move into ${GIT_FOLDER}"

    git clean -fxdq
    git fetch

    [[ -z ${GIT_VERSION} ]] && GIT_VERSION=$(git describe --tags "$(git rev-list --tags --max-count=1)")
    git checkout v"${GIT_VERSION//v/}"

    "${MAKE[@]}" all install || die "git build/install failed"

    if [[ -n ${ZSH_NAME} ]]; then
        install -Dm644 "${GIT_FOLDER}"/contrib/completion/git-completion.bash "${GIT_PREFIX}"/share/bash-completion/completions/git
        install -Dm644 "${GIT_FOLDER}"/contrib/completion/git-completion.zsh "${HOME}"/.zfunctions/_git
    fi

    move_to_front_of_path "${GIT_PREFIX}"/bin
    command -v git
    git --version
); }

# Build a "regular" LLVM toolchain or a bootstrap compiler
function bllvm() { (
    set -u

    LLVM_SRC=${SRC_FOLDER:-${HOME}/src}/llvm-project
    if [[ ! -d ${LLVM_SRC} ]]; then
        header "Cloning LLVM"
        mkdir -p "${LLVM_SRC%/*}"
        git clone https://github.com/llvm/llvm-project "${LLVM_SRC}" || exit ${?}
    fi

    LLVM_BLD=${LLVM_SRC}/build/stage1
    rm -rf "${LLVM_BLD%/*}"
    mkdir -p "${LLVM_BLD}"
    cd "${LLVM_BLD}" || exit ${?}

    while ((${#})); do
        case ${1} in
            -b | --bootstrap) BOOTSTRAP=true ;;
            -i | --install) INSTALL=true ;;
        esac
        shift
    done

    CMAKE=(
        cmake
        -G Ninja
        -Wno-dev
        "-DCLANG_DEFAULT_LINKER=lld"
        "-DCLANG_VENDOR=$(uname -n)"
        "-DCMAKE_AR=$(command -v llvm-ar)"
        "-DCMAKE_BUILD_TYPE=Release"
        "-DCMAKE_C_COMPILER=$(command -v clang)"
        "-DCMAKE_CXX_COMPILER=$(command -v clang++)"
        "-DCMAKE_LINKER=$(command -v ld.lld)"
        "-DCMAKE_RANLIB=$(command -v llvm-ranlib)"
        "-DLLVM_CCACHE_BUILD=ON"
        "-DLLVM_ENABLE_PROJECTS=all"
        "-DLLVM_ENABLE_WARNINGS=OFF"
        "-DLLVM_USE_LINKER=lld"
        "-DPYTHON_EXECUTABLE=$(command -v python3)"
    )

    if ${BOOTSTRAP:=false}; then
        CMAKE=(
            "${CMAKE[@]}"
            "-DCLANG_PLUGIN_SUPPORT=OFF"
            "-DCOMPILER_RT_BUILD_SANITIZERS=OFF"
            "-DLLVM_ENABLE_BACKTRACES=OFF"
            "-DLLVM_INCLUDE_DOCS=OFF"
            "-DLLVM_INCLUDE_EXAMPLES=OFF"
            "-DLLVM_INCLUDE_TESTS=OFF"
            "-DLLVM_TARGETS_TO_BUILD=host"
        )
    fi

    if ${INSTALL:=false}; then
        CMAKE=("${CMAKE[@]}" "-DCMAKE_INSTALL_PREFIX=${PREFIX:-${HOME}/usr}")
    fi

    header "Configuring LLVM"
    set -x
    "${CMAKE[@]}" "${LLVM_SRC}"/llvm >/dev/null || exit ${?}
    set +x

    header "Building LLVM"
    ninja || exit ${?}

    if ! ${BOOTSTRAP}; then
        header "Running LLVM tests"
        ninja check-clang check-lld check-llvm check-llvm-unit || exit ${?}
    fi

    if ${INSTALL}; then
        header "Installing LLVM"
        ninja install || exit ${?}
    fi
); }

# Build/install GNU make
function bmake() { (
    header "Building make"
    [[ -z ${MAKE_VERSION} ]] && MAKE_VERSION=4.3
    MAKE_FOLDER=make-${MAKE_VERSION}
    TMP_FOLDER=$(mktemp -d)

    cd "${TMP_FOLDER}"
    curl -LSs http://ftp.gnu.org/gnu/make/"${MAKE_FOLDER}".tar.gz | tar -xzf -
    cd "${MAKE_FOLDER}" || die "Downloading or extracting make failed"

    ./configure --prefix="${MAKE_PREFIX:=${PREFIX:-${HOME}/usr}}"
    make "${JOBS_FLAG:--j"$(nproc)"}" install

    move_to_front_of_path "${MAKE_PREFIX}"/bin
    command -v make
    make --version
    rm -rf "${TMP_FOLDER}"
); }

# Build/update ninja
function bninja() { (
    header "Building ninja"
    NINJA_REPO=ninja-build/ninja
    [[ -z ${NINJA_VERSION} ]] && NINJA_VERSION=$(glr "${NINJA_REPO}")
    NINJA_FOLDER=ninja-${NINJA_VERSION//v/}
    TMP_FOLDER=$(mktemp -d)

    cd "${TMP_FOLDER}"
    curl -LSs https://github.com/"${NINJA_REPO}"/archive/"${NINJA_VERSION}".tar.gz | tar -xzf -
    cd "${NINJA_FOLDER}" || die "Downloading or extracting ninja failed"

    python3 ./configure.py --bootstrap
    if [[ -f ninja ]]; then
        NINJA_BIN=${PREFIX:-${HOME}/usr}/bin
        mkdir -p "${NINJA_BIN}"
        cp -v ninja "${NINJA_BIN}"
        rm -rf "${TMP_FOLDER}"

        move_to_front_of_path "${NINJA_BIN}"
        command -v ninja
        ninja --version
    fi
); }

# Build/install PGO'd LLVM
function bpgollvm() { (
    CMAKE=(
        cmake
        -G Ninja
        -Wno-dev
        "-DCLANG_DEFAULT_LINKER=lld"
        "-DCLANG_VENDOR=$(uname -n)"
        "-DCMAKE_BUILD_TYPE=Release"
        "-DPYTHON_EXECUTABLE=$(command -v python3)"
    )
    LLVM_SRC=${SRC_FOLDER:-${HOME}/src}/llvm-project
    LLVM_BLD=${LLVM_SRC}/build
    ORIG_PATH=${PATH}
    START=$(date +%s)

    set -eu

    while ((${#})); do
        case ${1} in
            -b | --branch)
                shift
                LLVM_VERSION=${1}
                ;;
            -u | --update) UPDATE=true ;;
        esac
        shift
    done

    if [[ ! -d ${LLVM_SRC} ]]; then
        header "Downloading LLVM"
        mkdir -p "${LLVM_SRC%/*}"
        git clone https://github.com/llvm/llvm-project "${LLVM_SRC}"
    fi

    cd "${LLVM_SRC}"
    git clean -fxdq

    if ${UPDATE:=false}; then
        header "Updating LLVM"
        git reset --hard
        git fetch origin
        git checkout "${LLVM_VERSION:=master}"
        [[ ${LLVM_VERSION} = "master" || ${LLVM_VERSION} =~ release ]] && git pull --rebase
    fi

    # Ensure that we don't build llgo, it's broken
    LLVM_ALL_PROJECTS=$(grep -F "set(LLVM_ALL_PROJECTS " llvm/CMakeLists.txt | cut -d \" -f 2)
    CMAKE=("${CMAKE[@]}" -DLLVM_ENABLE_PROJECTS="${LLVM_ALL_PROJECTS/;llgo/}")

    # Stage 1: Bootstrap compiler
    (
        header "Building LLVM stage 1"
        mkdir -p "${LLVM_BLD}"/stage1
        cd "${LLVM_BLD}"/stage1 || die "Error creating stage1 build folder"
        LINKER=$(if command -v ld.lld &>/dev/null; then echo lld; else echo gold; fi)
        "${CMAKE[@]}" \
            -DCLANG_PLUGIN_SUPPORT=OFF \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
            -DLLVM_ENABLE_BACKTRACES=OFF \
            -DLLVM_INCLUDE_DOCS=OFF \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_TARGETS_TO_BUILD=host \
            -DLLVM_USE_LINKER="${LINKER}" \
            "${LLVM_SRC}"/llvm || die "Error configuring stage 1"
        ninja || die "Error building stage 1"
    )

    STAGE_ONE_BIN=${LLVM_BLD}/stage1/bin
    STAGE_ONE_BIN_DEFINES=(
        -DCMAKE_AR="${STAGE_ONE_BIN}"/llvm-ar
        -DCMAKE_C_COMPILER="${STAGE_ONE_BIN}"/clang
        -DCLANG_TABLEGEN="${STAGE_ONE_BIN}"/clang-tblgen
        -DCMAKE_CXX_COMPILER="${STAGE_ONE_BIN}"/clang++
        -DCMAKE_LINKER="${STAGE_ONE_BIN}"/ld.lld
        -DLLVM_USE_LINKER=lld
        -DLLVM_TABLEGEN="${STAGE_ONE_BIN}"/llvm-tblgen
        -DCMAKE_RANLIB="${STAGE_ONE_BIN}"/llvm-ranlib
    )

    # Stage 2a: Instrumented compiler
    export PATH=${STAGE_ONE_BIN:?}:${ORIG_PATH}
    (
        header "Building LLVM stage 2a"
        mkdir -p "${LLVM_BLD}"/stage2a
        cd "${LLVM_BLD}"/stage2a || die "Error creating stage2a build folder"
        "${CMAKE[@]}" \
            "${STAGE_ONE_BIN_DEFINES[@]}" \
            -DLLVM_BUILD_INSTRUMENTED=IR \
            -DLLVM_BUILD_RUNTIME=OFF \
            -DLLVM_INCLUDE_GO_TESTS=OFF \
            "${LLVM_SRC}"/llvm || die "Error configuring stage 2a"
        ninja clang lld check-clang check-llvm || die "Error building or checking stage2a"
    )

    STAGE_TWO_BIN=${LLVM_BLD}/stage2a/bin
    STAGE_TWO_BIN_DEFINES=(
        -DCMAKE_AR="${STAGE_TWO_BIN}"/llvm-ar
        -DCMAKE_C_COMPILER="${STAGE_TWO_BIN}"/clang
        -DCLANG_TABLEGEN="${STAGE_TWO_BIN}"/clang-tblgen
        -DCMAKE_CXX_COMPILER="${STAGE_TWO_BIN}"/clang++
        -DCMAKE_LINKER="${STAGE_TWO_BIN}"/ld.lld
        -DLLVM_USE_LINKER=lld
        -DLLVM_TABLEGEN="${STAGE_TWO_BIN}"/llvm-tblgen
        -DCMAKE_RANLIB="${STAGE_TWO_BIN}"/llvm-ranlib
    )

    # Stage 2b: Build clang with instrumented compiler
    export PATH=${STAGE_TWO_BIN:?}:${ORIG_PATH}
    (
        header "Building LLVM stage 2b"
        mkdir -p "${LLVM_BLD}"/stage2b
        cd "${LLVM_BLD}"/stage2b
        "${CMAKE[@]}" \
            "${STAGE_TWO_BIN_DEFINES[@]}" \
            "${LLVM_SRC}"/llvm || die "Error configuring stage 2b"
        ninja || die "Error building stage 2b"
    )

    # Stage 3: Build final compiler
    : "${PGO_LLVM_PREFIX:=${PREFIX:-${HOME}/usr}}"
    export PATH=${STAGE_ONE_BIN:?}:${ORIG_PATH}
    (
        header "Building LLVM stage 3"
        mkdir -p "${LLVM_BLD}"/stage3
        cd "${LLVM_BLD}"/stage3 || die "Error creating stage 3 build folder"

        # Merge profile data
        PROFILE_DATA=${LLVM_BLD}/stage3/profdata.prof
        llvm-profdata merge \
            -output="${PROFILE_DATA}" \
            "${LLVM_BLD}"/stage2a/profiles/*.profraw || die "Error merging profile data"

        # Build compiler with that data
        "${CMAKE[@]}" \
            "${STAGE_ONE_BIN_DEFINES[@]}" \
            -DCMAKE_C_FLAGS="-Wno-backend-plugin" \
            -DCMAKE_CXX_FLAGS="-Wno-backend-plugin" \
            -DCMAKE_INSTALL_PREFIX="${PGO_LLVM_PREFIX}" \
            -DLLVM_ENABLE_LTO=Thin \
            -DLLVM_PROFDATA_FILE="${PROFILE_DATA}" \
            "${LLVM_SRC}"/llvm || die "Error configuring stage 3"
        ninja || die "Error building stage 3"
        ninja install || die "Error installing stage 3"
    )

    header "Final LLVM information"

    echo "Total build time: $(format_time "${START}" "$(date +%s)")"

    move_to_front_of_path "${PGO_LLVM_PREFIX}/bin"

    echo
    command -v clang
    clang --version | head -n1

    echo
    command -v ld.lld
    ld.lld --version
); }

# Build/install ripgrep
function birg() { (
    RG_REPO=BurntSushi/ripgrep
    [[ -z ${RG_VERSION} ]] && RG_VERSION=$(glr "${RG_REPO}")
    BASE_URL=https://github.com/${RG_REPO}
    TMP_FOLDER=$(mktemp -d)
    DEB=ripgrep_${RG_VERSION}_amd64.deb

    cd "${TMP_FOLDER}"

    if [[ $(uname -m) = "x86_64" ]] && command -v dpkg &>/dev/null; then
        header "Installing ripgrep"
        curl -LSsO "${BASE_URL}"/releases/download/"${RG_VERSION}"/"${DEB}" || die "Error downloading ${DEB}"
        sudo dpkg -i "${DEB}" || die "Error installing ${DEB}"
    else
        header "Building ripgrep"
        curl -LSs "${BASE_URL}"/archive/"${RG_VERSION}".tar.gz | tar -xzf - || die "Error downloading ripgrep source"
        cd ripgrep-"${RG_VERSION}" || die "Can't move into ripgrep source"
        [[ -d ${HOME}/.cargo/bin ]] || irust
        move_to_front_of_path "${HOME}/.cargo/bin"
        cargo build --release --locked --features 'pcre2' || die "cargo build failed"
        cargo install --force --path . || die "cargo install failed"
        if [[ -n ${ZSH_NAME} ]]; then
            install -Dm644 complete/_rg "${HOME}"/.zfunctions/_rg
        fi
    fi

    command -v rg
    rg --version

    rm -rf "${TMP_FOLDER}"
); }

# Build/install sharkdp binaries
function bisharkdp() { (
    BINARIES=()
    while ((${#})); do
        case ${1} in
            all) BINARIES=(bat diskus fd hyperfine) ;;
            bat | diskus | fd | hyperfine) BINARIES+=("${1}") ;;
            *) die "Unsupported binary detected" ;;
        esac
        shift
    done

    TMP_FOLDER=$(mktemp -d)
    cd "${TMP_FOLDER}"

    for BINARY in "${BINARIES[@]}"; do (
        BINARY_REPO=sharkdp/${BINARY}
        URL_BASE=https://github.com/${BINARY_REPO}
        [[ -z ${BIN_VERSION} ]] && BIN_VERSION=$(glr "${BINARY_REPO}")
        if [[ $(uname -m) = "x86_64" ]] && command -v dpkg &>/dev/null; then
            header "Installing ${BINARY}"
            DEB=${BINARY}_${BIN_VERSION//v/}_amd64.deb
            curl -LSsO "${URL_BASE}"/releases/download/"${BIN_VERSION}"/"${DEB}" || die "Error downloading ${DEB}"
            sudo dpkg -i "${DEB}" || die "Error installing ${DEB}"
        else
            header "Building ${BINARY}"
            curl -LSs "${URL_BASE}"/archive/"${BIN_VERSION}".tar.gz | tar -xzf - || die "Error downloading ${BINARY} source"
            cd "${BINARY}-${BIN_VERSION//v/}" || die "Can't move into ${BINARY} source"
            [[ -d ${HOME}/.cargo/bin ]] || irust
            move_to_front_of_path "${HOME}/.cargo/bin"
            cargo build --release --locked || die "cargo build failed"
            cargo install --force --path . || die "cargo install failed"
            if [[ -n ${ZSH_NAME} ]]; then
                case ${BINARY} in
                    fd) install -Dm644 target/release/build/fd-find-*/out/_fd "${HOME}"/.zfunctions/_fd ;;
                esac
            fi
        fi

        command -v "${BINARY}"
        "${BINARY}" --version
    ); done

    rm -rf "${TMP_FOLDER}"
); }

# Build/install QEMU
function bqemu() { (
    header "Building QEMU"
    QEMU_FOLDER=${SRC_FOLDER:-${HOME}/src}/qemu
    if [[ ! -d ${QEMU_FOLDER} ]]; then
        mkdir -p "${QEMU_FOLDER%/*}"
        git clone --recursive "${JOBS_FLAG:--j"$(nproc)"}" https://git.qemu.org/git/qemu.git "${QEMU_FOLDER}"
    fi
    cd "${QEMU_FOLDER}" || die "Couldn't move into ${QEMU_FOLDER}"
    git fetch origin
    [[ -z ${QEMU_VERSION} ]] && QEMU_VERSION=$(git tag -l --sort=-taggerdate | grep -v rc | head -n1)
    git clean -dfqx
    git submodule foreach --recursive git clean -dfqx
    git reset --hard
    git submodule foreach --recursive git reset --hard
    git submodule deinit slirp 2>/dev/null
    git checkout v"${QEMU_VERSION//v/}"
    (git merge-base --is-ancestor fc1120a7f5f2d4b601003205c598077d3eb11ad2 HEAD &&
        ! git merge-base --is-ancestor ece628fcf69cbbd4b3efb6fbd203af07609467a2 HEAD) &&
        git format-patch -1 --stdout ece628fcf69cbbd4b3efb6fbd203af07609467a2 | git apply -3v

    ./configure \
        --disable-docs \
        --disable-gcrypt \
        --disable-gnutls \
        --disable-gtk \
        --disable-libssh \
        --disable-nettle \
        --disable-opengl \
        --disable-sdl \
        --disable-strip \
        --disable-user \
        --disable-virglrenderer \
        --disable-vnc-png \
        --disable-vte \
        --disable-xen \
        --disable-xen-pci-passthrough \
        --extra-cflags=-g \
        --prefix="${QEMU_PREFIX:=${PREFIX:-${HOME}/usr}}"

    make "${JOBS_FLAG:--j"$(nproc)"}" install

    move_to_front_of_path "${QEMU_PREFIX}"/bin
    for QEMU_SUFFIX in aarch64 arm mipsel ppc ppc64 riscv64 s390x x86_64; do
        command -v qemu-system-${QEMU_SUFFIX}
        qemu-system-${QEMU_SUFFIX} --version
    done
); }

# Build/update tmux
function btmux() { (
    header "Building tmux"
    TMUX_REPO=tmux/tmux
    [[ -z ${TMUX_VERSION} ]] && TMUX_VERSION=$(glr "${TMUX_REPO}")
    TMP_FOLDER=$(mktemp -d)
    TMUX_FOLDER=tmux-${TMUX_VERSION}

    cd "${TMP_FOLDER}"
    curl -LSs https://github.com/"${TMUX_REPO}"/releases/download/"${TMUX_VERSION}"/"${TMUX_FOLDER}".tar.gz | tar -xzf -
    cd "${TMUX_FOLDER}" || die "Downloading or extracting tmux failed"
    ./configure --prefix="${TMUX_PREFIX:=${PREFIX:-${HOME}/usr}}"
    make "${JOBS_FLAG:--j"$(nproc)"}" || die "make failed"
    make install || die "install failed"
    rm -rf "${TMP_FOLDER}"

    move_to_front_of_path "${TMUX_PREFIX}"/bin
    command -v tmux
    tmux -V
); }

# Build/update zsh
function bzsh() { (
    header "Building zsh"
    TMP_FOLDER=$(mktemp -d)

    cd "${TMP_FOLDER}"
    case ${BZSH_VERSION:=5.8} in
        latest) URL=https://sourceforge.net/projects/zsh/files/latest/download ;;
        *) URL=https://www.zsh.org/pub/zsh-"${BZSH_VERSION//zsh-/}".tar.xz ;;
    esac
    curl -LSs "${URL}" | tar -xvJf -
    cd zsh-* || die "Downloading or extracting zsh failed"
    ./configure --prefix="${ZSH_PREFIX:=${PREFIX:-${HOME}/usr}}"
    make "${JOBS_FLAG:--j"$(nproc)"}" || die "make failed"
    make install || die "install failed"
    rm -rf "${TMP_FOLDER}"

    ZSH_BIN=${ZSH_PREFIX:?}/bin/zsh
    grep -q "${ZSH_BIN}" /etc/shells || echo "${ZSH_BIN}" | sudo tee -a /etc/shells
    [[ ${SHELL} != "${ZSH_BIN}" ]] && sudo chsh -s "${ZSH_BIN}" "$(whoami)"

    move_to_front_of_path "${ZSH_PREFIX}"/bin
    command -v zsh
    zsh --version
); }

#######################
#  INSTALL PREBUILTS  #
#######################

# Install Android tools
function iandroidtools() { (
    header "Installing Android tools"
    ANDROID_BIN=${PREFIX:-${HOME}/usr}/bin
    mkdir -p "${ANDROID_BIN}"
    curl -LSso "${ANDROID_BIN}"/repo https://storage.googleapis.com/git-repo-downloads/repo
    chmod a+x "${ANDROID_BIN}"/repo

    MKDTIMG_FOLDER=$(mktemp -d)
    curl -LSs https://android.googlesource.com/platform/prebuilts/misc/+archive/master/linux-x86/libufdt.tar.gz | tar -C "${MKDTIMG_FOLDER}" -xzf -
    cp "${MKDTIMG_FOLDER}"/mkdtimg "${ANDROID_BIN}"
    rm -rf "${MKDTIMG_FOLDER}"
); }

# Install hugo
function ihugo() { (
    header "Installing hugo"
    HUGO_REPO=gohugoio/hugo
    HUGO_VERSION=$(glr ${HUGO_REPO})
    SUFFIX=64bit
    HUGO_URL=https://github.com/${HUGO_REPO}/releases/download/${HUGO_VERSION}/hugo_extended_${HUGO_VERSION//v/}_Linux-${SUFFIX}
    if command -v dpkg &>/dev/null; then
        curl -LSso "${TMP_DEB:=$(mktemp --suffix=.deb)}" "${HUGO_URL}".deb
        sudo dpkg -i "${TMP_DEB}"
        rm -rf "${TMP_DEB}"
    else
        TMP_FOLDER=$(mktemp -d)
        curl -LSs "${HUGO_URL}".tar.gz | tar -C "${TMP_FOLDER}" -xzf -
        install -Dm755 "${TMP_FOLDER}"/hugo "${PREFIX:-${HOME}/usr}"/bin/hugo
        rm -rf "${TMP_FOLDER}"
    fi
); }

# Install hub
function ihub() { (
    header "Installing hub"
    HUB_REPO=github/hub
    [[ -z ${HUB_VERSION} ]] && HUB_VERSION=$(glr ${HUB_REPO})
    case "$(uname -m)" in
        armv7l) ARCH=arm ;;
        aarch64)
            # The Raspberry Pi might be running a 64-bit kernel but 32-bit OS
            if command -v dpkg &>/dev/null; then
                case "$(dpkg --print-architecture)" in
                    armhf) ARCH=arm ;;
                    *) ARCH=arm64 ;;
                esac
            else
                ARCH=arm64
            fi
            ;;
        x86_64) ARCH=amd64 ;;
        *) die "Architecture not supported" ;;
    esac
    HUB_TUPLE="hub-linux-${ARCH}-${HUB_VERSION/v/}"
    cd "$(mktemp -d)" || die "Error moving into temporary directory!"
    curl -LSsO https://github.com/${HUB_REPO}/releases/download/"${HUB_VERSION}"/"${HUB_TUPLE}".tgz || die "Error downloading hub!"
    tar -xf "${HUB_TUPLE}".tgz || die "Error extracting hub!"
    prefix="${PREFIX:-${HOME}/usr}" ./"${HUB_TUPLE}"/install || die "Error installing hub!"
    if [[ -n ${ZSH_NAME} ]]; then
        mkdir -p "${HOME}"/.zfunctions
        curl -LSso "${HOME}"/.zfunctions/_hub https://github.com/${HUB_REPO}/raw/"${HUB_VERSION}"/etc/hub.zsh_completion
    fi
    rm -rf "${PWD}"
); }

# Install shellcheck
function ishellcheck() { (
    header "Installing shellcheck"
    SHCHK_REPO=koalaman/shellcheck
    [[ -z ${SHELLCHECK_VERSION} ]] && SHELLCHECK_VERSION=$(glr "${SHCHK_REPO}")
    SHCHK_FOLDER=$(mktemp -d)/shellcheck-v"${SHELLCHECK_VERSION//v/}"
    curl -LSs https://github.com/"${SHCHK_REPO}"/releases/download/"${SHELLCHECK_VERSION}"/"${SHCHK_FOLDER##*/}".linux.x86_64.tar.xz | tar -C "${SHCHK_FOLDER%/*}" -xJf - || exit ${?}
    install -Dm755 "${SHCHK_FOLDER}"/shellcheck "${PREFIX:-${HOME}/usr}"/bin/shellcheck || exit ${?}
    rm -rf "${SHCHK_FOLDER%/*}"
); }

# Install shfmt
function ishfmt() { (
    header "Installing shfmt"
    SHFMT_REPO=mvdan/sh
    [[ -z ${SHFMT_VERSION} ]] && SHFMT_VERSION=$(glr ${SHFMT_REPO})
    SHFMT_VERSION=v${SHFMT_VERSION//v/}

    BIN_FOLDER=${PREFIX:-${HOME}/usr}/bin
    mkdir -p "${BIN_FOLDER}"
    rm -rf "${BIN_FOLDER}"/shfmt
    curl -LSso "${BIN_FOLDER}"/shfmt https://github.com/${SHFMT_REPO}/releases/download/"${SHFMT_VERSION}"/shfmt_"${SHFMT_VERSION}"_linux_amd64 || die "Error downloading/installing shfmt"
    chmod +x "${BIN_FOLDER}"/shfmt
); }

function irust() { (
    curl https://sh.rustup.rs -sSf | bash -s -- -y --no-modify-path
); }

# Install/upgrade b4
function ib4() { (
    header "Installing b4"
    PIP_ARGS=()
    case ${1} in
        -u | --upgrade) PIP_ARGS=("${PIP_ARGS[@]}" --upgrade) ;;
    esac

    python3 -m pip install --user ${PIP_ARGS:+"${PIP_ARGS[@]}"} b4
); }

# Main install function
function updbin() { (
    # git comes first in case we are rebuilding ~/usr from scratch
    # 'alias git=hub' can cause issues
    bgit || exit ${?}

    # Everything else is alphabetical
    bccache || exit ${?}
    bcmake || exit ${?}
    bcvise || exit ${?}
    bmake || exit ${?}
    bninja || exit ${?}
    birg || exit ${?}
    bisharkdp all || exit ${?}
    btmux || exit ${?}
    bzsh || exit ${?}
    ishellcheck || exit ${?}
    ishfmt || exit ${?}
); }
# vi: filetype=zsh
