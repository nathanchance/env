#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2021 Nathan Chancellor
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful

# Add Google DNS servers to resolv.conf
function add_google_dns() { (
    grep -q "nameserver 8.8.8.8" /etc/resolv.conf || cat <<EOF | tee -a /etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF
); }

# Arch Linux setup function (as root)
# Requires that:
#   1. Arch Linux has been setup with partitions
#      For Hetzner: $ installimage -r yes -l 0 -f yes -n archlinux-<suffix>
function arch_rootstrap() { (
    set -x

    : "${ROOT_PASS:?}" "${USER_PASS:?}"

    # Remove the root password so that all commands that would normally require a root password are non-interactive
    passwd -d root

    # Enable the multilib repository
    sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf

    # Build with ccache and all cores with makepkg
    sed -i "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$(nproc --all)\"/g" /etc/makepkg.conf
    sed -i 's/!ccache/ccache/g' /etc/makepkg.conf

    # Populate pacman keyring
    pacman-key --init || exit ${?}
    pacman-key --populate archlinux || exit ${?}

    # Update all currently installed packages
    pacman -Syyu --noconfirm || exit ${?}

    # Remove fakeroot-tcp if it is installed (fakeroot is in the base-devel packages)
    sed -i 's/IgnorePkg   = fakeroot/#IgnorePkg =/g' /etc/pacman.conf
    remove_if_installed fakeroot-tcp

    # Install all packages that we want
    PACKAGES=(
        asciidoc
        base-devel
        bat
        bc
        bpytop
        ca-certificates
        ccache
        clang
        cmake
        cpio
        diskus
        doas
        dtc
        exa
        expect
        fd
        gcc-multilib
        hub
        hugo
        hyperfine
        iputils
        jq
        lld
        llvm
        mosh
        most
        multilib-devel
        mutt
        neofetch
        ninja
        openssl
        perl-authen-sasl
        perl-mime-tools
        perl-net-smtp-ssl
        php
        python
        python-pip
        python-psutil
        qemu-headless-arch-extra
        repo
        ripgrep
        shellcheck
        shfmt
        swig
        tmux
        uboot-tools
        unifdef
        unzip
        wget
        xmlto
        zsh
    )
    ${WSL} || PACKAGES+=(podman)
    is_installed git-git || PACKAGES+=(git)
    # This conflicts with sudo in base-devel, remove it as it will be reinstalled after the fact
    remove_if_installed opendoas-sudo
    pacman -S --needed --noconfirm "${PACKAGES[@]}" || exit ${?}

    # doas configuration
    cat <<EOF >/etc/doas.conf
# Allow me to be root for 5 minutes at a time
permit persist ${USER_NAME} as root
# Allow me to update or install packages without a password
permit nopass ${USER_NAME} cmd pacman
# Do not require root to put in a password (makes no sense)
permit nopass root
# Allow nobody with no password for this function only (will be deleted later)
permit nopass nobody
EOF
    cp -v /etc/pam.d/sudo /etc/pam.d/doas
    # Remove sudo, which comes in via base-devel
    pacman -R --noconfirm sudo

    # Create my user account and password if it is not already created
    if ! getent passwd "${USER_NAME}"; then
        useradd -m -G wheel -s /bin/zsh "${USER_NAME}"
        echo "${USER_NAME}:${USER_PASS}" | chpasswd
    fi

    # Build certain AUR packages in a temporary directory
    AUR_DIR=$(mktemp -d)
    cd "${AUR_DIR}" || exit ${?}

    # opendoas-sudo NEEDS to be last
    AUR_PACKAGES=(
        yay-bin
        opendoas-sudo
    )
    for AUR_PACKAGE in "${AUR_PACKAGES[@]}"; do
        WORK_DIR=${AUR_DIR}/${AUR_PACKAGE}
        [[ -d ${WORK_DIR} ]] || git clone https://aur.archlinux.org/"${AUR_PACKAGE}".git "${WORK_DIR}"
        chown -R "nobody:nobody" "${AUR_DIR}"
        cd "${WORK_DIR}" || exit ${?}
        su -m -s /bin/bash nobody -c "makepkg -s" || exit ${?}
        pacman -U --needed --noconfirm -- *.tar.zst || exit ${?}
    done
    WORK_DIR=${AUR_DIR}/git-git
    [[ -d ${WORK_DIR} ]] || git clone --depth=1 -b packages/git https://github.com/nathanchance/archpkgbuilds "${WORK_DIR}"
    chown -R "nobody:nobody" "${AUR_DIR}"
    cd "${WORK_DIR}"/trunk || exit ${?}
    HOME=${WORK_DIR} su -m -s /bin/bash nobody -c "makepkg -s --nocheck --noconfirm" || exit ${?}
    yes | pacman -U -- *.tar.zst || exit ${?}
    cd || exit ${?}
    rm -rf "${AUR_DIR}"

    # Remove nobody line from /etc/doas.conf
    head -n -2 /etc/doas.conf >/etc/doas.conf.tmp
    mv /etc/doas.conf.tmp /etc/doas.conf

    # Reset root account's password
    echo "root:${ROOT_PASS}" | chpasswd

    # Rootless podman (https://wiki.archlinux.org/index.php/Podman#Rootless_Podman)
    # Not possible on WSL
    if ! ${WSL}; then
        echo "kernel.unprivileged_userns_clone=1" | tee /etc/sysctl.d/unprivileged_userns_clone.conf
        if ! grep -q "systemd.unified_cgroup_hierarchy=1" /etc/default/grub; then
            OLD_CMDLINE="$(grep GRUB_CMDLINE_LINUX= /etc/default/grub | cut -d \" -f 2)"
            NEW_CMDLINE="${OLD_CMDLINE:+${OLD_CMDLINE} }systemd.unified_cgroup_hierarchy=1"
            sed -i "s;GRUB_CMDLINE_LINUX=\"${OLD_CMDLINE}\";GRUB_CMDLINE_LINUX=\"${NEW_CMDLINE}\";g" /etc/default/grub
            grub-mkconfig -o /boot/grub/grub.cfg
        fi
        touch /etc/subgid /etc/subuid
        usermod --add-subuids 165536-231072 --add-subgids 165536-231072 "${USER_NAME}"
    fi
); }

# Grab linux, linux-next, and linux-stable for CBL
# https://www.kernel.org/cloning-linux-from-a-bundle.html
function cbl_linux_repos() { (
    : "${CBL_B:=${CBL:-${HOME}/cbl}/build}" "${CBL_M:=${CBL:-${HOME}/cbl}/mirrors}" "${CBL_S:=${CBL:-${HOME}/cbl}/src}"

    while ((${#})); do
        case ${1} in
            linux)
                PAIRS=(
                    "torvalds/linux.git:${CBL_B}/clean/linux"
                    "torvalds/linux.git:${CBL_B}/patched/linux"
                    "torvalds/linux.git:${CBL_M}/linux"
                    "torvalds/linux.git:${CBL_S}/linux"
                )
                ;;
            linux-next)
                PAIRS=(
                    "next/linux-next.git:${CBL_B}/clean/linux-next"
                    "next/linux-next.git:${CBL_B}/patched/linux-next"
                    "next/linux-next.git:${CBL_B}/rpi"
                    "next/linux-next.git:${CBL_S}/linux-next"
                )
                ;;
            linux-stable)
                PAIRS=(
                    "stable/linux.git:${CBL_B}/clean/linux-stable-5.4"
                    "stable/linux.git:${CBL_B}/clean/linux-stable-5.10"
                    "stable/linux.git:${CBL_B}/clean/linux-stable-5.11"
                    "stable/linux.git:${CBL_B}/patched/linux-stable-5.4"
                    "stable/linux.git:${CBL_B}/patched/linux-stable-5.10"
                    "stable/linux.git:${CBL_B}/patched/linux-stable-5.11"
                    "stable/linux.git:${CBL_S}/linux-stable"
                )
                ;;
            *) exit 1 ;;
        esac
        shift
    done

    cd "$(mktemp -d)" || die "wtf"
    for PAIR in "${PAIRS[@]}"; do
        FOLDER=${PAIR#*:}
        URL=${PAIR%:*}
        case ${URL} in
            "next/linux-next.git") CB_SUFFIX=next ;;
            "stable/linux.git") CB_SUFFIX=stable ;;
            "torvalds/linux.git") CB_SUFFIX=mainline ;;
        esac
        CB=clone.bundle-${CB_SUFFIX}
        [[ -d ${FOLDER} ]] && continue
        [[ -f ${CB} ]] || wget -O "${CB}" -c https://git.kernel.org/pub/scm/linux/kernel/git/"${URL}"/clone.bundle
        git clone "${CB}" "${FOLDER}"
        (
            cd "${FOLDER}" || die "${FOLDER} does not exist"
            git remote remove origin
            git remote add origin https://git.kernel.org/pub/scm/linux/kernel/git/"${URL}"
            git remote update origin
            case ${FOLDER} in
                *linux-stable-*) BRANCH=linux-${FOLDER##*-}.y ;;
                *) BRANCH=master ;;
            esac
            git checkout "${BRANCH}"
            if [[ ${FOLDER##*/} = "rpi" ]]; then
                source "${SCRIPTS_FOLDER:-${HOME}/github/scripts}"/common || exit ${?}
                git_remote_add -f --tags mainline https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
                git_remote_add -f sami https://github.com/samitolvanen/linux
                git config rerere.enabled true
            else
                git branch --set-upstream-to=origin/"${BRANCH}" "${BRANCH}"
                git reset --hard origin/"${BRANCH}"
            fi
            [[ ${FOLDER} =~ mirrors ]] && git remote add github git@github.com:ClangBuiltLinux/linux.git
            [[ ${FOLDER} =~ ${CBL_B}/patched/linux-stable ]] && git remote add stable-rc https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git/
        )
    done
    rm -rf "${PWD}"
); }

# Download other CBL things
function cbl_other_repos() { (
    source "${SCRIPTS_FOLDER:-${HOME}/github/scripts}"/common || exit ${?}

    cd "${CBL_O_R:=${CBL:-${HOME}/cbl}}"/github || die "wtf"
    for REPO in boot-utils continuous-integration2:ci tc-build qemu-binaries; do
        FOLDER=${REPO#*:}
        REPO=${REPO%:*}

        [[ -d ${FOLDER} ]] || git clone git@github.com:ClangBuiltLinux/"${REPO}".git "${FOLDER}"
        hub -C "${FOLDER}" fork
        git -C "${FOLDER}" remote update
    done
    [[ -d yapf ]] || git clone https://github.com/google/yapf

    cd "${CBL_O_R}"/mirrors || die "wtf"
    [[ -d llvm ]] || git clone https://github.com/llvm/llvm-project llvm
    cd llvm || die "wtf"
    git_remote_add github git@github.com:ClangBuiltLinux/llvm-project.git

    cd "${CBL_O_R}" || die "wtf"
    [[ -d creduce-files ]] || git clone git@github.com:nathanchance/creduce-files.git
    [[ -d llvm-kernel-testing ]] || git clone git@github.com:nathanchance/llvm-kernel-testing.git
    [[ -d tc-build ]] || git clone -b personal git@github.com:nathanchance/tc-build.git

    cd "${CBL_O_R}"/build || die "wtf"
    [[ -d pi-scripts ]] || git clone git@github.com:nathanchance/pi-scripts
    [[ -d wsl2 ]] || git clone git@github.com:nathanchance/WSL2-Linux-Kernel wsl2

    cd "${CBL_O_R}"/build/wsl2 || die "wtf"
    git_remote_add -f --tags mainline https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
    git_remote_add -f --tags next https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
    git_remote_add -f --tags microsoft https://github.com/microsoft/WSL2-Linux-Kernel
    git_remote_add -f sami https://github.com/samitolvanen/linux
    git config rerere.enabled true
    git config status.aheadBehind false

    CBL_O_R_QEMU=${CBL_O_R}/qemu
    mkdir -p "${CBL_O_R_QEMU}"/{bin,install,src}
    cd "${CBL_O_R_QEMU}"/src || die "wtf"
    [[ -d qemu-5.0.1 ]] || curl -LSs https://download.qemu.org/qemu-5.0.1.tar.xz | tar -xJf -
    [[ -d qemu ]] || git clone -j"$(nproc)" --recurse-submodules https://gitlab.com/qemu-project/qemu.git

    cd "${CBL_O_R}"/src || die "wtf"
    [[ -d korg-linux ]] || git clone git@gitolite.kernel.org:pub/scm/linux/kernel/git/nathan/linux korg-linux

    cd "${CBL_O_R}"/src/korg-linux || exit ${?}
    git_remote_add -f linus https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/
    git_remote_add -f --no-tags next https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/
); }

function common_rootstrap { (
    # Set time zone to Arizona time
    # Not needed in WSL
    ${WSL} || timedatectl set-timezone America/Phoenix
); }

function debian_rootstrap { (
    # For rootless podman
    echo "kernel.unprivileged_userns_clone=1" | tee /etc/sysctl.d/00-local-userns.conf
    systemctl restart procps

    grep -q "buster-backports" /etc/apt/sources.list || echo "deb http://deb.debian.org/debian buster-backports main" | tee -a /etc/apt/sources.list
    KUBIC_REPO=Debian_10 kubic_repo || exit ${?}
    apt -y -t buster-backports install libseccomp2 || exit ${?}

    debian_ubuntu_packages
    debian_ubuntu_update_install || exit ${?}
    debian_ubuntu_locales
    add_google_dns
    podman_setup
    systemctl --user restart dbus
); }

function debian_ubuntu_locales() { (
    echo "locales locales/default_environment_locale select en_US.UTF-8" | debconf-set-selections
    echo "locales locales/locales_to_be_generated multiselect en_US.UTF-8 UTF-8" | debconf-set-selections
    rm "/etc/locale.gen"
    dpkg-reconfigure --frontend noninteractive locales
); }

# List of Debian and Ubuntu packages to install
function debian_ubuntu_packages() {
    PACKAGES=(
        abootimg
        binutils-dev
        bison
        build-essential
        ca-certificates
        cdbs
        clang
        cmake
        config-package-dev
        cowsay
        cpio
        creduce
        curl
        debhelper
        debootstrap
        devscripts
        doxygen
        expect
        fakeroot
        file
        flex
        fortune
        fortunes
        gcc
        gcc-multilib
        gettext
        git
        git-email
        g++
        htop
        libarchive-tools
        libauthen-sasl-perl
        libcapstone-dev
        libclang-dev
        libcurl4-openssl-dev
        libdw-dev
        libedit-dev
        libelf-dev
        libemail-valid-perl
        libevent-dev
        libexpat1-dev
        libfdt-dev
        libglib2.0-dev
        libglu1-mesa
        libgmp-dev
        libio-socket-ssl-perl
        liblz4-tool
        libmailtools-perl
        libmpc-dev
        libmpfr-dev
        libncurses-dev
        libnet-smtp-ssl-perl
        libpcre2-dev
        libpixman-1-dev
        libssl-dev
        libtinfo5
        lld
        llvm
        llvm-dev
        locales
        lolcat
        lsb-release
        make
        mosh
        most
        neofetch
        neomutt
        ninja-build
        php
        php-curl
        pkg-config
        psmisc
        python2.7
        python3
        python3-dev
        python3-pip
        python3-setuptools
        qemu-user-static
        re2c
        slirp4netns
        ssh
        software-properties-common
        sudo
        swig
        texinfo
        tcl
        tmux
        u-boot-tools
        uidmap
        unifdef
        unzip
        vim
        zip
        zlib1g-dev
        zsh
        zstd
    )
    if ${WSL}; then
        PACKAGES+=(pass)
    else
        PACKAGES+=(podman)
    fi
}

function debian_ubuntu_update_install() { (
    DEBIAN_FRONTEND=noninteractive apt upgrade -y || exit ${?}
    DEBIAN_FRONTEND=noninteractive apt install -y "${PACKAGES[@]}" || exit ${?}
    # Reinstall 'ping' to avoid issues with permissions
    ${WSL} && apt install -y --reinstall iputils-ping
); }

# Create and configure global .gitignore
function global_gitignore() { (
    GITIGNORE=${HOME}/.gitignore_global
    git config --global core.excludesfile "${GITIGNORE}"
    curl -LSso "${GITIGNORE}" https://gist.githubusercontent.com/octocat/9257657/raw/3f9569e65df83a7b328b39a091f0ce9c6efc6429/.gitignore

    # Add my rules
    cat <<EOF >>"${GITIGNORE}"

# Personal exclusions #
#######################
build/
out.*/
*.ko
Image*
zImage*
dtbo*
net/wireguard
*.rej
EOF
); }

# Install my SSH keys
function install_ssh_keys() { (
    # KEYS variable must be set to properly find keys
    : "${KEYS:?}"

    # If the key is already installed then we are good
    SSH_FOLDER=${HOME}/.ssh
    [[ -f ${SSH_FOLDER}/id_ed25519 ]] && exit 0

    # Download keys if we do not have them already
    [[ -d ${KEYS} ]] || { git clone https://github.com/nathanchance/keys "${KEYS}" || exit ${?}; }

    # Move keys into place and set proper permissions
    SSH_KEYS=${KEYS}/ssh
    cp "${SSH_KEYS}"/id_ed25519{,.pub} "${SSH_FOLDER}"
    cp "${SSH_KEYS}"/korg-nathan "${SSH_FOLDER}"/id_korg
    chmod 600 "${SSH_FOLDER}"/{id_ed25519,id_korg}

    # Special ssh config for kernel.org
    # https://korg.docs.kernel.org/access.html#if-you-received-a-ssh-private-key-from-kernel-org
    cat <<'EOF' >>"${SSH_FOLDER}"/config
Host gitolite.kernel.org
  User git
  IdentityFile ~/.ssh/id_korg
  IdentitiesOnly yes
  ClearAllForwardings yes
  # We prefer ed25519 keys, but will fall back to others if your
  # openssh client does not support that
  HostKeyAlgorithms ssh-ed25519,ecdsa-sha2-nistp256,ssh-rsa
  # Below are very useful for speeding up repeat access
  # and for 2-factor validating your sessions
  ControlPath ~/.ssh/cm-%r@%h:%p
  ControlMaster auto
  ControlPersist 30m
  # Helps behind some NAT-ing routers
  ServerAliveInterval 60
EOF
); }

# Check if a package is installed
function is_installed() { (
    case ${DISTRO} in
        arch) pacman -Q | grep -q "${1:?}" ;;
    esac
); }

function kubic_repo() { (
    echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${KUBIC_REPO}/ /" | tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
    curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/"${KUBIC_REPO}"/Release.key | apt-key add -

    apt update || exit ${?}
); }

# Setup rootless podman as necessary
function podman_setup { (
    echo "${USER_NAME:?}:100000:65536" | tee /etc/subgid /etc/subuid
    [[ -f /etc/containers/registries.conf ]] || cat <<EOF | tee /etc/containers/registries.conf
[registries.search]
registries = ['docker.io', 'quay.io']
EOF
); }

# Remove package but only if it is not installed
function remove_if_installed() { (
    is_installed "${1:?}" || exit ${?}
    case ${DISTRO} in
        arch) pacman -R --noconfirm "${1}" ;;
    esac
); }

# Setup function (as root, calls distribution specific function)
function rootstrap() { (
    : "${USER_NAME:=nathan}"

    [[ ${EUID} -eq 0 ]] || exit ${?}
    set_distro
    set_wsl

    "${DISTRO}"_rootstrap || exit ${?}
    common_rootstrap
); }

# Set distro variable
function set_distro() {
    case "$(cat /usr/lib/os-release)" in
        *"Arch Linux"*) DISTRO=arch ;;
        *Debian* | *Raspbian*) DISTRO=debian ;;
        *Ubuntu*) DISTRO=ubuntu ;;
        *) DISTRO=unsupported ;;
    esac
}

# Set WSL variable if we are in a Windows Subsystem for Linux environment
function set_wsl() {
    uname -r | grep -iq microsoft && WSL=true
    : "${WSL:=false}"
}

function ubuntu_rootstrap { (
    # shellcheck disable=SC1091
    source /etc/os-release
    KUBIC_REPO=xUbuntu_${VERSION_ID} kubic_repo || exit ${?}

    debian_ubuntu_packages
    PACKAGES+=(python-is-python3)
    ${WSL} && PACKAGES+=(wslu)
    debian_ubuntu_update_install
    debian_ubuntu_locales
    add_google_dns
    podman_setup
); }

function unsupported_rootstrap { (
    echo "Unsupported distribution for rootstrap, please add it"
    exit 1
); }
# vi: filetype=zsh
