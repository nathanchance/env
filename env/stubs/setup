#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# Copyright (C) 2021 Nathan Chancellor
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful

# Add Google DNS servers to resolv.conf
function add_google_dns() { (
    grep -q "nameserver 8.8.8.8" /etc/resolv.conf || cat <<EOF | tee -a /etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF
); }

# Arch Linux setup function (as root)
# Requires that:
#   1. Arch Linux has been setup with partitions
#      For Hetzner: $ installimage -r yes -l 0 -f yes -n archlinux-<suffix>
function arch_root_setup() { (
    set -x

    : "${ROOT_PASS:?}" "${USER_PASS:?}"

    # Remove the root password so that all commands that would normally require a root password are non-interactive
    passwd -d root

    # Enable the multilib repository
    sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf

    # Build with ccache and all cores with makepkg
    sed -i "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$(nproc --all)\"/g" /etc/makepkg.conf
    sed -i 's/!ccache/ccache/g' /etc/makepkg.conf

    # Populate pacman keyring
    pacman-key --init || exit ${?}
    pacman-key --populate archlinux || exit ${?}

    # Update all currently installed packages
    pacman -Syyu --noconfirm || exit ${?}

    # Remove fakeroot-tcp if it is installed (fakeroot is in the base-devel packages)
    sed -i 's/IgnorePkg   = fakeroot/#IgnorePkg   =/g' /etc/pacman.conf
    remove_if_installed fakeroot-tcp

    # Ignore linux-llvm{,-headers} because I build that package myself: https://github.com/nathanchance/archpkgbuilds/commits/linux-llvm
    # Ignore podman: https://github.com/containers/podman/issues/9936
    sed -i 's/#IgnorePkg   =/IgnorePkg    = linux-llvm linux-llvm-headers podman/g' /etc/pacman.conf

    # Install all packages that we want
    PACKAGES=(
        asciidoc
        base-devel
        bat
        bc
        catatonit
        ca-certificates
        ccache
        clang
        cmake
        cpio
        debootstrap
        diskus
        doas
        dpkg
        dtc
        exa
        expect
        fd
        gcc-multilib
        git
        htop
        hub
        hugo
        hyperfine
        iputils
        jq
        libxkbcommon
        lld
        llvm
        lm_sensors
        mosh
        most
        multilib-devel
        mutt
        neofetch
        ninja
        openssl
        pacman-contrib
        perl-authen-sasl
        perl-mime-tools
        perl-net-smtp-ssl
        php
        python
        python-dnspython
        python-pip
        python-psutil
        python-requests
        python-setuptools
        python-yaml
        qemu-headless-arch-extra
        re2c
        repo
        ripgrep
        shellcheck
        shfmt
        swig
        tmux
        uboot-tools
        unifdef
        unzip
        wget
        xmlto
        zsh
    )
    if ${WSL}; then
        PACKAGES+=(pass)
    else
        PACKAGES+=(podman)
    fi
    # This conflicts with sudo in base-devel, remove it as it will be reinstalled after the fact
    remove_if_installed opendoas-sudo
    pacman -S --needed --noconfirm "${PACKAGES[@]}" || exit ${?}
    # Reinstall shadow to fix permissions with newuidmap
    pacman -S --noconfirm shadow

    # doas configuration
    cat <<EOF >/etc/doas.conf
# Allow me to be root for 5 minutes at a time
permit persist ${USER_NAME} as root
# Allow me to update or install packages without a password
permit nopass ${USER_NAME} cmd pacman
# Do not require root to put in a password (makes no sense)
permit nopass root
# Allow nobody with no password for this function only (will be deleted later)
permit nopass nobody
EOF
    cp -v /etc/pam.d/sudo /etc/pam.d/doas
    # Remove sudo, which comes in via base-devel
    pacman -R --noconfirm sudo

    # Create my user account and password if it is not already created
    if ! getent passwd "${USER_NAME}"; then
        useradd -m -G wheel -s /bin/zsh "${USER_NAME}"
        echo "${USER_NAME}:${USER_PASS}" | chpasswd
    fi

    # Build certain AUR packages in a temporary directory
    AUR_DIR=$(mktemp -d)
    cd "${AUR_DIR}" || exit ${?}

    # Create 'sudo' symlink temporarily
    ln -s "$(command -v doas)" "${AUR_DIR}"/sudo
    export PATH=${AUR_DIR}:${PATH}

    AUR_PACKAGES=(
        # Alphabetized
        inetutils-hostname
        opendoas-sudo
        yay-bin
        # qemu-user-static depends on glib2-static and pcre-static so build those first
        # binfmt-qemu-static needs qemu-user-static to be installed in order to register properly
        glib2-static
        pcre-static
        qemu-user-static
        binfmt-qemu-static
    )
    for AUR_PACKAGE in "${AUR_PACKAGES[@]}"; do
        WORK_DIR=${AUR_DIR}/${AUR_PACKAGE}
        case "${AUR_PACKAGE}" in
            qemu-user-static)
                HOME=${AUR_DIR} su -m -s /bin/bash nobody -c "gpg --recv-keys 3353C9CEF108B584" || exit ${?}
                GIT_ARGS=(-b "${AUR_PACKAGE}" https://github.com/nathanchance/archpkgbuilds)
                ;;
            *)
                GIT_ARGS=(https://aur.archlinux.org/"${AUR_PACKAGE}".git)
                ;;
        esac
        [[ -d ${WORK_DIR} ]] || git clone "${GIT_ARGS[@]}" "${WORK_DIR}"
        chown -R "nobody:nobody" "${AUR_DIR}"
        cd "${WORK_DIR}" || exit ${?}
        HOME=${AUR_DIR} su -m -s /bin/bash nobody -c "makepkg --nocheck --noconfirm -s" || exit ${?}
        pacman -U --needed --noconfirm -- *.tar.zst || exit ${?}
    done
    cd || exit ${?}
    rm -rf "${AUR_DIR}"

    # Remove nobody line from /etc/doas.conf
    head -n -2 /etc/doas.conf >/etc/doas.conf.tmp
    mv /etc/doas.conf.tmp /etc/doas.conf

    # Reset root account's password
    echo "root:${ROOT_PASS}" | chpasswd

    # Rootless podman (https://wiki.archlinux.org/index.php/Podman#Rootless_Podman)
    # Not possible on WSL
    ${WSL} || podman_setup
); }

# User setup function
function bootstrap() { (
    set -x

    # Do not run this as root
    [[ ${EUID} -eq 0 ]] && die "Do not run bootstrap as root"

    # We need to know if we are in a WSL environment
    # We do NOT need to know the distribution as we should be distribution agnostic
    # at this point, aside from rbld_usr, which is handled in that function
    set_wsl

    # Set yay flags for sudo
    command -v yay &>/dev/null && yay --sudo doas --sudoflags -- --save

    # Assume that we are currently in a scripts folder, bail out if not. git HAS to be available by this point due to root_setup
    for SCRIPT_FILE in common env/common env/stubs/folders env/stubs/git env/stubs/setup env/stubs/zsh; do
        source <(cat "${SCRIPT_FILE}") || exit ${?}
    done
    source env/"${LOCATION:?}"

    # "Trusted" environments need keys and certain repos. Set this variable on certain locations
    [[ ${LOCATION} = "workstation" || ${LOCATION} = "wsl" ]] && TRUSTED=true
    : "${TRUSTED:=false}"

    # Setup keys if trusted
    if ${TRUSTED}; then
        if ${WSL}; then
            # This is such a stupid issue...
            # SC2030: Modification of KEYS_FOLDER is local (to subshell caused by (..) group).
            # shellcheck disable=SC2030
            KEYS_FOLDER=/mnt/c/Users/natec/Documents/Keys
        else
            KEYS_FOLDER=/tmp/keys
        fi
        install_gpg_keys || exit ${?}
        install_ssh_keys || exit ${?}
        ${WSL} || rm -rf "${KEYS_FOLDER}"
        gpg_key_cache
        if [[ -f ${HOME}/.ssh/.ssh-agent ]]; then
            ssh_agent
        else
            ssh-add -l || ssh-add "${HOME}"/.ssh/id_ed25519
        fi
        GITHUB_PREFIX=git@github.com:
    else
        GITHUB_PREFIX=https://github.com/
    fi

    # Download and scripts if necessary
    : "${SCRIPTS_FOLDER:?}"
    mkdir -p "${SCRIPTS_FOLDER%/*}"
    [[ -d ${SCRIPTS_FOLDER} ]] || { git clone "${GITHUB_PREFIX}"nathanchance/scripts.git "${SCRIPTS_FOLDER}" || exit ${?}; }
    git -C "${SCRIPTS_FOLDER}" pull

    # Run setup functions in a particular order order
    setup_zsh_env
    global_gitignore
    rbld_usr || exit ${?}
    path_push "${HOME}/usr/bin"
    git_setup

    zsh "${SCRIPTS_FOLDER}"/configs/common/vim/vim_setup.sh
    if ${WSL}; then
        TMUX_CONF_LOC=local
    else
        TMUX_CONF_LOC=workstation
    fi
    ln -fs "${SCRIPTS_FOLDER}"/configs/${TMUX_CONF_LOC}/.tmux.conf "${HOME}"/.tmux.conf

    if ${TRUSTED}; then
        decrypt_gpg_file botinfo
        decrypt_del_dog_api_key
        decrypt_gpg_file muttrc
        decrypt_gpg_file config.ini "${HOME}"/.config/tuxsuite/config.ini

        # Get hub API setup so that downloading functions is even easier
        hub api || exit ${?}
    fi

    if ${WSL}; then
        decrypt_serv_ip
        [[ -d ${HOME}/.password-store ]] || { hub clone password-store "${HOME}"/.password-store || exit ${?}; }

        GITHUB_REPOS=(
            hugo-files
            nathanchance.github.io
        )
    elif ${TRUSTED}; then
        mkdir -p "${ANDROID_TC_FOLDER:?}"
        [[ -d ${ANDROID_TC_FOLDER}/clang-master ]] || tmux new-window zsh -c "git -C ${ANDROID_TC_FOLDER} clone --single-branch https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/ clang-master"
        [[ -d ${ANDROID_TC_FOLDER}/gcc-arm ]] || git -C "${ANDROID_TC_FOLDER}" clone --depth=1 -b android-9.0.0_r1 --single-branch https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/ gcc-arm
        [[ -d ${ANDROID_TC_FOLDER}/gcc-arm64 ]] || git -C "${ANDROID_TC_FOLDER}" clone --depth=1 -b android-9.0.0_r1 --single-branch https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/ gcc-arm64

        mkdir -p "${SRC_FOLDER:?}"
        [[ -d ${SRC_FOLDER}/android-wireguard-module-builder ]] || git -C "${SRC_FOLDER}" clone git@github.com:WireGuard/android-wireguard-module-builder.git
        [[ -d ${SRC_FOLDER}/pahole ]] || git -C "${SRC_FOLDER}" clone https://git.kernel.org/pub/scm/devel/pahole/pahole.git

        GITHUB_REPOS=(
            bug-files
            hugo-files
            nathanchance.github.io
            patches
        )

        # Grab linux, linux-next, and linux-stable for CBL
        for LINUX_TREE in linux linux-next linux-stable; do
            tmux new-window zsh -c "source ${SCRIPTS_FOLDER}/env/stubs/setup && cbl_linux_repos ${LINUX_TREE}; sleep 180"
        done

        # Download other CBL things
        tmux new-window zsh -c "source ${SCRIPTS_FOLDER}/common && ssh_agent && source ${SCRIPTS_FOLDER}/env/stubs/setup && cbl_other_repos; sleep 180"
    else
        exit 0
    fi

    mkdir -p "${GITHUB_FOLDER}"
    for GITHUB_REPO in "${GITHUB_REPOS[@]}"; do
        [[ -d ${GITHUB_FOLDER}/${GITHUB_REPO} ]] || { hub clone "${GITHUB_REPO}" "${GITHUB_FOLDER}/${GITHUB_REPO}" || exit ${?}; }
    done
    git -C "${GITHUB_FOLDER}"/hugo-files submodule update --init --recursive

    PKGBUILDS=${GITHUB_FOLDER}/archpkgbuilds
    mkdir -p "${PKGBUILDS}"
    cd "${PKGBUILDS}" || exit ${?}
    git clone "${PKGBUILDS##*/}" main || exit ${?}
    for PACKAGE in linux-llvm qemu-user-static; do
        PACKAGE_DIR=${PKGBUILDS}/${PACKAGE}
        [[ -d ${PACKAGE_DIR} ]] || git -C "${PKGBUILDS}"/main worktree add -b "${PACKAGE}" "${PACKAGE_DIR}" origin/"${PACKAGE}"
    done

    set +x
    echo "Things that might still need to be done"
    echo
    echo "* Setup cron jobs via crontab or systemd ($ EDITOR=vim crontab -e)"
    echo
    echo "* Restart ssh-agent ($ eval $(ssh-agent -k) && rm -rf /tmp/ssh-*)"
    echo
    echo "* Reboot to finish updates ($ sudo systemctl reboot)"
); }

# Grab linux, linux-next, and linux-stable for CBL
# https://www.kernel.org/cloning-linux-from-a-bundle.html
function cbl_linux_repos() { (
    : "${CBL_B:=${CBL:-${HOME}/cbl}/build}" "${CBL_M:=${CBL:-${HOME}/cbl}/mirrors}" "${CBL_S:=${CBL:-${HOME}/cbl}/src}"

    while ((${#})); do
        case ${1} in
            linux)
                PAIRS=(
                    "torvalds/linux:${CBL_B}/clean/linux"
                    "torvalds/linux:${CBL_B}/patched/linux"
                    "torvalds/linux:${CBL_M}/linux"
                    "torvalds/linux:${CBL_S}/linux"
                )
                ;;
            linux-next)
                PAIRS=(
                    "next/linux-next:${CBL_B}/clean/linux-next"
                    "next/linux-next:${CBL_B}/patched/linux-next"
                    "next/linux-next:${CBL_B}/rpi"
                    "next/linux-next:${CBL_S}/linux-next"
                )
                ;;
            linux-stable)
                PAIRS=(
                    "stable/linux:${CBL_B}/clean/linux-stable-5.4"
                    "stable/linux:${CBL_B}/clean/linux-stable-5.10"
                    "stable/linux:${CBL_B}/clean/linux-stable-5.11"
                    "stable/linux:${CBL_B}/patched/linux-stable-5.4"
                    "stable/linux:${CBL_B}/patched/linux-stable-5.10"
                    "stable/linux:${CBL_B}/patched/linux-stable-5.11"
                    "stable/linux:${CBL_S}/linux-stable"
                )
                ;;
            *) exit 1 ;;
        esac
        shift
    done

    cd "$(mktemp -d)" || die "wtf"
    for PAIR in "${PAIRS[@]}"; do
        FOLDER=${PAIR#*:}
        URL=${PAIR%:*}
        case ${URL} in
            "next/linux-next") CB_SUFFIX=next ;;
            "stable/linux") CB_SUFFIX=stable ;;
            "torvalds/linux") CB_SUFFIX=mainline ;;
        esac
        CB=clone.bundle-${CB_SUFFIX}
        mkdir -p "${FOLDER%/*}"
        [[ -d ${FOLDER} ]] && continue
        [[ -f ${CB} ]] || { wget -c -O "${CB}" https://mirrors.kernel.org/pub/scm/.bundles/pub/scm/linux/kernel/git/"${URL}"/clone.bundle || exit ${?}; }
        git clone "${CB}" "${FOLDER}"
        (
            cd "${FOLDER}" || die "${FOLDER} does not exist"
            git remote remove origin
            git remote add origin https://git.kernel.org/pub/scm/linux/kernel/git/"${URL}".git
            git remote update origin
            case ${FOLDER} in
                *linux-stable-*) BRANCH=linux-${FOLDER##*-}.y ;;
                *) BRANCH=master ;;
            esac
            git checkout "${BRANCH}"
            if [[ ${FOLDER##*/} = "rpi" ]]; then
                source "${SCRIPTS_FOLDER:-${HOME}/github/scripts}"/common || exit ${?}
                git_remote_add -f --tags mainline https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
                git_remote_add -f sami https://github.com/samitolvanen/linux
                git config rerere.enabled true
            else
                git branch --set-upstream-to=origin/"${BRANCH}" "${BRANCH}"
                git reset --hard origin/"${BRANCH}"
            fi
            [[ ${FOLDER} =~ mirrors ]] && git remote add github git@github.com:ClangBuiltLinux/linux.git
            [[ ${FOLDER} =~ ${CBL_B}/patched/linux-stable ]] && git remote add stable-rc https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git/
        )
    done
    rm -rf "${PWD}"
); }

# Download other CBL things
function cbl_other_repos() { (
    source "${SCRIPTS_FOLDER:-${HOME}/github/scripts}"/common || exit ${?}

    : "${CBL_O_R:=${CBL:-${HOME}/cbl}}"
    CBL_O_R_BUILD=${CBL_O_R}/build
    CBL_O_R_GITHUB=${CBL_O_R}/github
    CBL_O_R_MIRRORS=${CBL_O_R}/mirrors
    CBL_O_R_SRC=${CBL_O_R}/src

    mkdir -p "${CBL_O_R_BUILD}" "${CBL_O_R_GITHUB}" "${CBL_O_R_MIRRORS}" "${CBL_O_R_SRC}"

    cd "${CBL_O_R_GITHUB}" || die "wtf"
    for REPO in boot-utils continuous-integration2:ci tc-build qemu-binaries; do
        FOLDER=${REPO#*:}
        REPO=${REPO%:*}

        [[ -d ${FOLDER} ]] || git clone git@github.com:ClangBuiltLinux/"${REPO}".git "${FOLDER}"
        hub -C "${FOLDER}" fork
        git -C "${FOLDER}" remote update
    done
    [[ -d yapf ]] || git clone https://github.com/google/yapf

    cd "${CBL_O_R_MIRRORS}" || die "wtf"
    [[ -d llvm ]] || git clone https://github.com/llvm/llvm-project llvm
    cd llvm || die "wtf"
    git_remote_add github git@github.com:ClangBuiltLinux/llvm-project.git

    cd "${CBL_O_R}" || die "wtf"
    [[ -d creduce-files ]] || git clone git@github.com:nathanchance/creduce-files.git
    [[ -d llvm-kernel-testing ]] || git clone git@github.com:nathanchance/llvm-kernel-testing.git
    [[ -d tc-build ]] || git clone -b personal git@github.com:nathanchance/tc-build.git

    cd "${CBL_O_R_BUILD}" || die "wtf"
    [[ -d pi-scripts ]] || git clone git@github.com:nathanchance/pi-scripts
    [[ -d wsl2 ]] || git clone git@github.com:nathanchance/WSL2-Linux-Kernel wsl2

    cd "${CBL_O_R_BUILD}"/wsl2 || die "wtf"
    git_remote_add -f --tags mainline https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
    git_remote_add -f --tags next https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
    git_remote_add -f --tags microsoft https://github.com/microsoft/WSL2-Linux-Kernel
    git_remote_add -f sami https://github.com/samitolvanen/linux
    git config rerere.enabled true
    git config status.aheadBehind false

    CBL_O_R_QEMU=${CBL_O_R}/qemu
    mkdir -p "${CBL_O_R_QEMU}"/{bin,install,src}
    cd "${CBL_O_R_QEMU}"/src || die "wtf"
    [[ -d qemu-5.0.1 ]] || curl -LSs https://download.qemu.org/qemu-5.0.1.tar.xz | tar -xJf -
    [[ -d qemu ]] || git clone -j"$(nproc)" --recurse-submodules https://gitlab.com/qemu-project/qemu.git

    cd "${CBL_O_R_SRC}" || die "wtf"
    [[ -d korg-linux ]] || git clone git@gitolite.kernel.org:pub/scm/linux/kernel/git/nathan/linux korg-linux

    cd "${CBL_O_R_SRC}"/korg-linux || exit ${?}
    git_remote_add -f linus https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/
    git_remote_add -f --no-tags next https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/
); }

function common_root_setup { (
    # Set time zone to Arizona time
    # Not needed in WSL
    ${WSL} || timedatectl set-timezone America/Phoenix

    # Always setup my .zshrc if it has not already been so that we can use it during setup
    ZSHRC=/home/${USER_NAME}/.zshrc
    touch "${ZSHRC}"
    if ! grep -q shell_setup "${ZSHRC}"; then
        cat <<'EOF' >"${ZSHRC}"
[[ -z ${SSH_AUTH_SOCK} ]] && eval $(ssh-agent)
[[ -z ${TMUX} ]] && tmux new-session -ADs main
EOF
    fi
    chown -R "${USER_NAME}:${USER_NAME}" "${ZSHRC}"
); }

function debian_root_setup { (
    # For rootless podman
    if ! ${WSL}; then
        echo "kernel.unprivileged_userns_clone=1" | tee /etc/sysctl.d/00-local-userns.conf
        systemctl restart procps

        grep -q "buster-backports" /etc/apt/sources.list || echo "deb http://deb.debian.org/debian buster-backports main" | tee -a /etc/apt/sources.list
        KUBIC_REPO=Debian_10 kubic_repo || exit ${?}
        apt -y -t buster-backports install libseccomp2 || exit ${?}
    fi

    debian_ubuntu_packages
    debian_ubuntu_update_install || exit ${?}
    debian_ubuntu_locales

    if ! ${WSL}; then
        add_google_dns
        podman_setup
        systemctl --user restart dbus
    fi
); }

function debian_ubuntu_doas() { (
    WORK_DIR=$(mktemp -d)
    cd "${WORK_DIR}" || exit ${?}

    DOAS_VERSION=6.8.1-3
    git clone https://salsa.debian.org/debian/doas.git
    cd doas || exit ${?}

    dpkg-buildpackage -b -uc -us || exit ${?}
    dpkg -i ../doas_${DOAS_VERSION}_amd64.deb || exit ${?}

    cat <<EOF >/etc/doas.conf
# Allow me to be root for 5 minutes at a time
permit persist ${USER_NAME:?} as root
# Do not require root to put in a password (makes no sense)
permit nopass root
EOF

    # Uninstall sudo but create a symlink in case a program expects only sudo
    apt remove -y sudo
    SUDO_PREFIX=${PREFIX:-/usr/local}/stow/sudo
    SUDO_BIN=${SUDO_PREFIX}/bin/sudo
    mkdir -p "${SUDO_BIN%/*}"
    ln -frsv "$(command -v doas)" "${SUDO_BIN}"
    stow -d "${SUDO_PREFIX%/*}" -R -v "${SUDO_PREFIX##*/}"
); }

function debian_ubuntu_locales() { (
    echo "locales locales/default_environment_locale select en_US.UTF-8" | debconf-set-selections
    echo "locales locales/locales_to_be_generated multiselect en_US.UTF-8 UTF-8" | debconf-set-selections
    rm "/etc/locale.gen"
    dpkg-reconfigure --frontend noninteractive locales
); }

# List of Debian and Ubuntu packages to install
function debian_ubuntu_packages() {
    PACKAGES=(
        abootimg
        binutils-dev
        bison
        build-essential
        ca-certificates
        cdbs
        clang
        cmake
        config-package-dev
        cowsay
        cpio
        creduce
        curl
        debhelper
        debootstrap
        devscripts
        doxygen
        dpkg-dev
        expect
        fakeroot
        file
        flex
        fortune
        fortunes
        gcc
        gettext
        git
        git-email
        g++
        htop
        libarchive-tools
        libauthen-sasl-perl
        libcapstone-dev
        libclang-dev
        libcurl4-openssl-dev
        libdw-dev
        libedit-dev
        libelf-dev
        libemail-valid-perl
        libevent-dev
        libexpat1-dev
        libfdt-dev
        libglib2.0-dev
        libglu1-mesa
        libgmp-dev
        libio-socket-ssl-perl
        liblz4-tool
        libmailtools-perl
        libmpc-dev
        libmpfr-dev
        libncurses-dev
        libnet-smtp-ssl-perl
        libpam0g-dev
        libpcre2-dev
        libpixman-1-dev
        libssl-dev
        libtinfo5
        lld
        llvm
        llvm-dev
        locales
        lolcat
        lsb-release
        make
        mosh
        most
        mutt
        neofetch
        ninja-build
        php
        php-curl
        pkg-config
        psmisc
        python2.7
        python3
        python3-dev
        python3-dnspython
        python3-pip
        python3-psutil
        python3-requests
        python3-setuptools
        qemu-user-static
        qemu-utils
        re2c
        slirp4netns
        ssh
        software-properties-common
        stow
        swig
        texinfo
        tcl
        tmux
        u-boot-tools
        uidmap
        unifdef
        unzip
        vim
        zip
        zlib1g-dev
        zsh
        zstd
    )
    if ${WSL}; then
        PACKAGES+=(pass)
    else
        [[ $(uname -m) = "x86_64" ]] && PACKAGES+=(gcc-multilib)
        PACKAGES+=(podman)
    fi
}

function debian_ubuntu_update_install() { (
    DEBIAN_FRONTEND=noninteractive apt upgrade -y || exit ${?}
    DEBIAN_FRONTEND=noninteractive apt install -y "${PACKAGES[@]}" || exit ${?}
    debian_ubuntu_doas
    # Reinstall 'ping' to avoid issues with permissions
    ${WSL} && apt install -y --reinstall iputils-ping
); }

# Create and configure global .gitignore
function global_gitignore() { (
    GITIGNORE=${HOME}/.gitignore_global
    git config --global core.excludesfile "${GITIGNORE}"
    curl -LSso "${GITIGNORE}" https://gist.githubusercontent.com/octocat/9257657/raw/3f9569e65df83a7b328b39a091f0ce9c6efc6429/.gitignore

    # Add my rules
    cat <<EOF >>"${GITIGNORE}"

# Personal exclusions #
#######################
build/
out.*/
*.ko
Image*
zImage*
dtbo*
net/wireguard
*.rej
EOF
); }

# Install my GPG keys
function install_gpg_keys() { (
    # KEYS_FOLDER variable must be set to properly find keys
    # SC2031: KEYS_FOLDER was modified in a subshell. That change might be lost.
    # No, it is not modified...
    # shellcheck disable=SC2031
    : "${IGK_KEYS_FOLDER:=${KEYS_FOLDER:?}}"

    # If the key is already installed then we are good
    gpg_key_usable && exit 0

    # Download keys if we do not have them already
    [[ -d ${IGK_KEYS_FOLDER} ]] || { git clone https://github.com/nathanchance/keys "${IGK_KEYS_FOLDER}" || exit ${?}; }

    # Install keys
    gpg --pinentry-mode loopback --import "${IGK_KEYS_FOLDER}"/signing/private.asc || exit ${?}
    gpg --import "${IGK_KEYS_FOLDER}"/main/public.asc
    gpg --import-ownertrust "${IGK_KEYS_FOLDER}"/main/ownertrust*.asc

    # GPG configuration
    cat <<EOF | tee -a "${HOME}"/.gnupg/gpg-agent.conf
default-cache-ttl 604800
max-cache-ttl 2419200
EOF
    gpg-connect-agent reloadagent /bye
); }

# Install my SSH keys
function install_ssh_keys() { (
    # KEYS_FOLDER variable must be set to properly find keys
    # SC2031: KEYS_FOLDER was modified in a subshell. That change might be lost.
    # No, it is not modified...
    # shellcheck disable=SC2031
    : "${ISK_KEYS_FOLDER:=${KEYS_FOLDER:?}}"

    # If the key is already installed then we are good
    SSH_FOLDER=${HOME}/.ssh
    mkdir -p "${SSH_FOLDER}"
    [[ -f ${SSH_FOLDER}/id_ed25519 ]] && exit 0

    # Download keys if we do not have them already
    [[ -d ${ISK_KEYS_FOLDER} ]] || { git clone https://github.com/nathanchance/keys "${ISK_KEYS_FOLDER}" || exit ${?}; }

    # Move keys into place and set proper permissions
    SSH_KEYS=${ISK_KEYS_FOLDER}/ssh
    cp "${SSH_KEYS}"/id_ed25519{,.pub} "${SSH_FOLDER}"
    cp "${SSH_KEYS}"/korg-nathan "${SSH_FOLDER}"/id_korg
    chmod 600 "${SSH_FOLDER}"/{id_ed25519,id_korg}

    # Special ssh config for kernel.org
    # https://korg.docs.kernel.org/access.html#if-you-received-a-ssh-private-key-from-kernel-org
    cat <<'EOF' >>"${SSH_FOLDER}"/config
Host gitolite.kernel.org
  User git
  IdentityFile ~/.ssh/id_korg
  IdentitiesOnly yes
  ClearAllForwardings yes
  # We prefer ed25519 keys, but will fall back to others if your
  # openssh client does not support that
  HostKeyAlgorithms ssh-ed25519,ecdsa-sha2-nistp256,ssh-rsa
  # Below are very useful for speeding up repeat access
  # and for 2-factor validating your sessions
  ControlPath ~/.ssh/cm-%r@%h:%p
  ControlMaster auto
  ControlPersist 30m
  # Helps behind some NAT-ing routers
  ServerAliveInterval 60
EOF
); }

# Check if a package is installed
function is_installed() { (
    case ${DISTRO} in
        arch) pacman -Q | grep -q "${1:?}" ;;
    esac
); }

function kubic_repo() { (
    echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${KUBIC_REPO}/ /" | tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
    curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/"${KUBIC_REPO}"/Release.key | apt-key add -

    apt update || exit ${?}
); }

# Setup rootless podman as necessary
function podman_setup { (
    echo "${USER_NAME:?}:100000:65536" | tee /etc/subgid /etc/subuid
    [[ -f /etc/containers/registries.conf ]] || cat <<EOF | tee /etc/containers/registries.conf
[registries.search]
registries = ['docker.io', 'quay.io']
EOF
); }

# Remove package but only if it is not installed
function remove_if_installed() { (
    is_installed "${1:?}" || exit ${?}
    case ${DISTRO} in
        arch) pacman -R --noconfirm "${1}" ;;
    esac
); }

# Setup function (as root, calls distribution specific function)
function root_setup() { (
    : "${USER_NAME:=nathan}"

    [[ ${EUID} -eq 0 ]] || exit ${?}
    set_distro
    set_wsl

    "${DISTRO}"_root_setup || exit ${?}
    common_root_setup
); }

# Set distro variable
function set_distro() {
    case "$(cat /usr/lib/os-release)" in
        *"Arch Linux"*) DISTRO=arch ;;
        *Debian* | *Raspbian*) DISTRO=debian ;;
        *Ubuntu*) DISTRO=ubuntu ;;
        *) DISTRO=unsupported ;;
    esac
}

# Set WSL variable if we are in a Windows Subsystem for Linux environment
function set_wsl() {
    uname -r | grep -iq microsoft && WSL=true
    : "${WSL:=false}"
}

function ubuntu_root_setup { (
    if ! ${WSL}; then
        # shellcheck disable=SC1091
        source /etc/os-release
        KUBIC_REPO=xUbuntu_${VERSION_ID} kubic_repo || exit ${?}
    fi

    debian_ubuntu_packages
    PACKAGES+=(python-is-python3)
    ${WSL} && PACKAGES+=(wslu)
    debian_ubuntu_update_install
    debian_ubuntu_locales
    if ! ${WSL}; then
        add_google_dns
        podman_setup
    fi
); }

function unsupported_root_setup { (
    echo "Unsupported distribution for root_setup, please add it"
    exit 1
); }
# vi: filetype=zsh
