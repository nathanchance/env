# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018-2020 Nathan Chancellor
#
# Functions used to assist with ClangBuiltLinux development

# Universal variables
CBL_ANDROID=${CBL}/android
CBL_CTTLFSH=${CBL_ANDROID}/cuttlefish
CBL_GIT=${CBL}/github
CBL_KC=${CBL_ANDROID}/common
CBL_KC_SRC=${CBL_KC}/common
CBL_KERNELS=${CBL}/kernels
CBL_TC=${CBL}/toolchains
CBL_LLVM=${CBL_TC}/llvm-tot/bin
CBL_BNTL=${CBL_TC}/binutils/bin
CBL_LLVM_BNTL=${CBL_TC}/llvm-binutils/bin
TCBLD=${CBL}/tc-build
CBL_CCACHE=${CBL}/.ccache
export CBL_ANDROID CBL_CTTLFSH CBL_GIT CBL_KC CBL_KC_SRC CBL_KERNELS CBL_TC CBL_LLVM CBL_BNTL CBL_LLVM_BNTL TCBLD CBL_CCACHE

# Patch check function
function pch() { (
    [[ ${#} -eq 0 ]] && FP_PARAMS=(-1 HEAD)
    [[ -z ${FP_PARAMS[*]} ]] && FP_PARAMS=("${@}")
    [[ -f scripts/checkpatch.pl ]] && git fp --stdout "${FP_PARAMS[@]}" | ./scripts/checkpatch.pl
    [[ -f scripts/get_maintainer.pl ]] && git fp --stdout "${FP_PARAMS[@]}" | ./scripts/get_maintainer.pl --scm
); }

# Quilt-like patch management function for Linux
function ptchmn() { (
    [[ ! -f Makefile ]] && die "You're not in a kernel folder!"

    REPO=${PWD##*/}
    TARGET_FOLDER=${GITHUB_FOLDER}/patches/${REPO}/$(git cb)
    [[ ! -d ${TARGET_FOLDER} ]] && die "${TARGET_FOLDER} doesn't exist!"

    case "${1:?}" in
        -s | --sync)
            case ${REPO} in
                linux | linux-next | linux-stable-5.4 | linux-stable-5.10) ;;
                *) die "${REPO} not supported by ptchmn!" ;;
            esac

            FIRST_HASH=$(git mfc)
            [[ -z ${FIRST_HASH} ]] && die "FIRST_HASH is empty...?"

            rm "${TARGET_FOLDER}"/*

            git fp -o "${TARGET_FOLDER}" --base="${FIRST_HASH}^" "${FIRST_HASH}"^..HEAD

            git -C "${TARGET_FOLDER}" aa

            git -C "${TARGET_FOLDER}" c -m "patches: ${REPO}: $(git cb): Sync as of $(git sh -s --format=%h)"

            git -C "${TARGET_FOLDER}" push
            ;;

        -a | --apply)
            git am "${TARGET_FOLDER}"/*
            ;;
    esac
); }

# Rebase a linux-next branch
function rbln() { (
    [[ ! -f Makefile ]] && {
        display_error "You're not in a kernel folder!"
        return 1
    }
    FIRST_HASH=$(git mfc)
    SECOND_HASH=$(git show -s --format=%H "$(git cb)")
    git rh origin/master
    git cherry-pick --gpg-sign "${FIRST_HASH}^..${SECOND_HASH}"
); }

# Download and apply an LLVM/Clang/lld patch
function phabap() { (
    [[ ! -d llvm ]] && die "You're not in the llvm-project folder!"

    while ((${#})); do
        case ${1} in
            D*) REVISION=${1} ;;
            *) GIT_AP_ARGS=("${GIT_AP_ARGS[@]}" "${1}") ;;
        esac
        shift
    done

    curl -LSs "https://reviews.llvm.org/${REVISION:?}?download=true" | git ap "${GIT_AP_ARGS[@]}" || exit ${?}
    git ac -m "${REVISION}

Link: https://reviews.llvm.org/${REVISION}"
); }

# Call ccache
function ccache_call() {
    header "${CCACHE_DIR:?}"
    [[ -d ${CCACHE_DIR} ]] && mkdir -p "${CCACHE_DIR}"
    ccache "${@}"
}

# Work with multiple ccache folders
function ccache_for_all() { (
    while ((${#})); do
        case ${1} in
            binutils | kernel | llvm) CCACHE_DIR="${CBL_CCACHE}"/${1} ;;
            clear) CCACHE_OPTS=(--clear --zero-stats) ;;
            stats) CCACHE_OPTS=(--show-stats) ;;
        esac
        shift
    done

    if [[ -z ${CCACHE_DIR} ]]; then
        for CCACHE_DIR in "${CBL_CCACHE}"/*; do
            export CCACHE_DIR
            ccache_call "${CCACHE_OPTS[@]}"
        done
    else
        export CCACHE_DIR
        ccache_call "${CCACHE_OPTS[@]}"
    fi
); }

# Print specific folder ccache stats
function ccache_stats() { (
    ccache_for_all stats "${@}"
); }

# Clear specific folder ccache
function ccache_clear() { (
    ccache_for_all clear "${@}"
); }

# Create ccache at specific size
function ccache_size() {
    while ((${#})); do
        case ${1} in
            binutils | kernel | llvm) CCACHE_DIR="${CBL_CCACHE}"/${1} ;;
            *) SIZE=${1} ;;
        esac
        shift
    done
    export CCACHE_DIR
    ccache_call --max-size="${SIZE:?}"G >/dev/null
    ccache --set-config=compression=true
    ccache --set-config=compression_level=9
}

# Show local LLVM patches via git log
function llvm_log() {
    local LLVM_PROJ=${TCBLD:?}/llvm-project

    MLFC=$(git -C "${LLVM_PROJ}" mfc)
    if [[ -n ${MLFC} ]]; then
        echo
        echo "LLVM commit log:"
        echo
        git -C "${LLVM_PROJ}" lo "${MLFC}"^^..HEAD
    fi
}

# linux testing
function lt() { (
    : "${KRNL_DIR:=${CBL_KERNELS}/${TREE:=linux-next}}"
    LOG_DIR=${CBL}/build-logs/${KRNL_DIR##*/}-$(date +%Y%m%d-%H%M)
    mkdir -p "${LOG_DIR}"

    TC_BLD_ARGS=()
    ${DO:=false} && TC_BLD_ARGS+=(--defconfigs)
    [[ -n ${ARCHES} ]] && TC_BLD_ARGS+=(--arches "${ARCHES}")
    [[ ${KRNL_DIR##*/} = "linux" ]] && TC_BLD_ARGS+=(--test-lto-cfi-kernel)
    "${CBL}"/llvm-kernel-testing/test.sh \
        --linux-src "${KRNL_DIR}" \
        --log-dir "${LOG_DIR}" \
        --skip-tc-build \
        --tc-prefix "${TC_DIR:=${CBL_LLVM_BNTL%/*}}" \
        "${TC_BLD_ARGS[@]}" || die "llvm-kernel-testing failed (${?})"

    {
        echo "Host: $(uname -n)"
        echo
        cat "${LOG_DIR}"/results.log
        echo
        echo "Full warning report:"
        echo
        # arch/powerpc/boot/main.c: A warning we do not really care about
        # being placed in: Orphan section placement
        # DWARF2 only supports one section per compilation unit: Irrelevant for now
        # objtool: Too many to deal with for now
        # results.log: Any warnings from this will be in the other logs
        # same module names found: Kbuild warnings that are not a result of clang
        BLOCKLIST="arch/powerpc/boot/inffast.c|being placed in|DWARF2 only supports one section per compilation unit|objtool:|results.log|same module names found|include/linux/bcache.h:35|Section mismatch in reference from the function r4k_cache_init|Section mismatch in reference from the function mips_sc_init"
        rg "error:|FATAL:|undefined|warning:|WARNING:" "${LOG_DIR}"/*.log |& rg -v -- "${BLOCKLIST}" |& sed 's/.*.log://g' |& cut -d / -f 7- |& sort |& uniq
        MFC=$(git -C "${KRNL_DIR}" mfc)
        if [[ -n ${MFC} ]]; then
            echo
            echo "${KRNL_DIR##*/} commit log:"
            echo
            git -C "${KRNL_DIR}" lo "${MFC}"^^..HEAD
        fi
        llvm_log
    } >"${LOG_DIR}"/deldog.log

    MESSAGE="${LOG_DIR##*/} build results: $(deldog "${LOG_DIR}/deldog.log")"

    tg_msg "${MESSAGE}"

    echo
    echo "${MESSAGE}"
    echo "Full logs available at: ${LOG_DIR}"
    echo

    rm "${LOG_DIR}"/deldog.log
); }

# Pull the latest CBL Docker image and run it with podman
function pdmnrn() { (
    [[ -z ${PODMAN_IMAGE} ]] && PODMAN_IMAGE=clangbuiltlinux/debian
    [[ -z ${LOCAL} ]] && podman pull "${PODMAN_IMAGE}"
    podman_mount \
        --interactive \
        --rm \
        --tty \
        "${PODMAN_IMAGE}" "${@}"
); }

# Strip executables within a folder
function stripall() { (
    cd "${1:?}"
    for FILE in $(fd -t file -x file | grep 'not stripped' | cut -d: -f1); do strip "${FILE}"; done
); }

# Build LLVM
function bldllvm() { (
    # Setup ccache
    ccache_size llvm 75

    "${TCBLD}"/build-llvm.py "${@}"
); }

# Build binutils
function bldbn() { (
    # Setup ccache
    ccache_size binutils 25

    "${TCBLD}"/build-binutils.py "${@}"
); }

# Build LLVM/Clang/lld and arm{32,64} and powerpc binutils from source
function bldtcs() { (
    DATE_TIME=$(date +%Y%m%d-%H%M)

    # Build binutils
    TC_BLD_BNTLS=${TCBLD}/binutils
    [[ -d ${TC_BLD_BNTLS} ]] || git clone https://sourceware.org/git/binutils-gdb.git "${TC_BLD_BNTLS}"
    git -C "${TC_BLD_BNTLS}" pull --rebase || die "Updating binutils failed (${?})"
    BLDBN_INSTALL_FOLDER=${CBL_TC}/binutils-${DATE_TIME}-$(git -C "${TC_BLD_BNTLS}" sh -s --format=%H origin/master)
    bldbn --install-folder "${BLDBN_INSTALL_FOLDER}" || die "bldbn failed with exit code ${?}"
    stripall "${BLDBN_INSTALL_FOLDER}"

    # Update binutils
    (cd "${CBL_TC}" &&
        rm -f binutils &&
        ln -s "${BLDBN_INSTALL_FOLDER##*/}" binutils)

    # Build LLVM/Clang/lld
    TC_BLD_LLVM_PRJCT=${TCBLD}/llvm-project
    [[ -d ${TC_BLD_LLVM_PRJCT} ]] || git -C "${TCBLD}" clone https://github.com/llvm/llvm-project
    git -C "${TC_BLD_LLVM_PRJCT}" pull --rebase || die "Updating llvm-project failed (${?})"
    BLDLLVM_INSTALL_FOLDER=${CBL_TC}/llvm-${DATE_TIME}-$(git -C "${TC_BLD_LLVM_PRJCT}" sh -s --format=%H origin/master)
    bldllvm \
        --assertions \
        --check-targets lld clang llvm \
        --install-folder "${BLDLLVM_INSTALL_FOLDER}" \
        --lto=thin \
        --pgo || die "bldllvm failed with exit code ${?}"
    stripall "${BLDLLVM_INSTALL_FOLDER}"

    # Update llvm-tot symlink
    (cd "${CBL_TC}" &&
        rm -f llvm-tot &&
        ln -sf "${BLDLLVM_INSTALL_FOLDER##*/}" llvm-tot)

    # Combine CBL_LLVM and CBL_BNTL for llvm-kernel-testing
    rm -rf "${CBL_LLVM_BNTL%/*}" &&
        mkdir -p "${CBL_LLVM_BNTL%/*}" &&
        cp -frs "${CBL_LLVM%/*}"/* "${CBL_LLVM_BNTL%/*}" &&
        cp -frs "${CBL_BNTL%/*}"/* "${CBL_LLVM_BNTL%/*}"

    # Invalidate our kernel ccache because we have a new compiler that will be used for it
    ccache_clear kernel
); }

# Build all kernel trees
function bldallk() {
    local TREE

    for TREE in linux{,-next,-stable-5.{10,4}}; do TREE=${TREE} lt ""; done
    "${CBL_KERNELS}"/pi-scripts/build.sh -k "${CBL_KERNELS}"/rpi
    "${CBL_KERNELS}"/wsl2/bin/build.sh
}

# Build new LLVM/Clang/lld and test all kernel trees
function bldall() { (
    export TG=true
    bldtcs && bldallk
); }

# Function to test build-{binutils,llvm}.py in multiple Docker images
function bld_llvm_bntls_py() { (
    CCACHE_FOLDER=${CBL_CCACHE}/bld_llvm_bntls_py
    LOG=$(mktemp)
    echo "Log: ${LOG}"
    SCRIPT=$(mktemp --suffix=.sh)
    TC_BLD=${CBL_GIT}/tc-build

    mkdir -p "${CCACHE_FOLDER}"
    cd "${TC_BLD}" || die "Could not move into ${TC_BLD}!"
    [[ -f build-llvm.py ]] || die "build-llvm.py script could not be found!"

    cat <<'EOF' >"${SCRIPT}"
#!/usr/env/bash

PACKAGES=( ccache clang cmake git python3 )

# Debian/Ubuntu
if command -v apt-get &>/dev/null; then
    PACKAGES+=( ca-certificates curl file gcc g++ make ninja-build texinfo xz-utils zlib1g-dev )
    case "$(cat /etc/os-release)" in
        *xenial*) ;;
        *) PACKAGES+=( lld ) ;;
    esac
    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y "${PACKAGES[@]}"
# Fedora
elif command -v dnf &>/dev/null; then
    PACKAGES+=( gcc gcc-c++ lld make ninja-build texinfo-tex xz zlib-devel )
    dnf update -y
    dnf install -y "${PACKAGES[@]}"
# Arch
elif command -v pacman &>/dev/null; then
    PACKAGES+=( base-devel lld ninja )
    pacman -Syyu --noconfirm
    pacman -S --noconfirm "${PACKAGES[@]}"
# OpenSUSE Leap/Tumbleweed
elif command -v zypper &>/dev/null; then
    PACKAGES+=( curl gcc gcc-c++ gzip lld make ninja tar texinfo xz zlib-devel )
    zypper -n up
    zypper -n in "${PACKAGES[@]}"
fi

ccache -M 50G
ccache --set-config=compression=true
ccache --set-config=compression_level=9
ccache --set-config=cache_dir=/ccache

TEXT_TO_REPLACE

./build-binutils.py -t all || exit 1
CC=gcc ./build-llvm.py || exit 1
CC=clang ./build-llvm.py || exit 1

for FILE in clang ld.lld aarch64-linux-gnu-as arm-linux-gnueabi-as mips-linux-gnu-as mipsel-linux-gnu-as powerpc-linux-gnu-as powerpc64-linux-gnu-as powerpc64le-linux-gnu-as riscv64-linux-gnu-as s390x-linux-gnu-as as; do
    ./install/bin/${FILE} --version || exit 1
done
EOF

    sed -i "s;TEXT_TO_REPLACE;git clone /${PWD##*/} /${PWD##*/}2 \&\& cd /${PWD##*/}2;g" "${SCRIPT}"

    for IMAGE in \
        archlinux/base:latest \
        debian:stable-slim \
        debian:testing-slim \
        debian:unstable-slim \
        fedora:latest \
        fedora:rawhide \
        opensuse/leap:latest \
        opensuse/tumbleweed:latest \
        ubuntu:xenial \
        ubuntu:bionic \
        ubuntu:latest \
        ubuntu:rolling \
        ubuntu:devel; do
        podman pull "${IMAGE}"
        podman_mount \
            --interactive \
            --mount type=bind,source="${CCACHE_FOLDER}",target=/ccache \
            --mount type=bind,source="${SCRIPT}",target=/script.sh \
            --rm \
            --tty \
            "${IMAGE}" bash /script.sh || {
            echo "${IMAGE} failed" >>"${LOG}"
            continue
        }
        echo "${IMAGE} successful" >>"${LOG}"
    done

    echo
    echo "Results:"
    cat "${LOG}"
    tg_msg "$(cat "${LOG}")"
    echo
); }

function yapf() {
    PYTHONPATH=${CBL_GIT}/yapf python3 "${CBL_GIT}"/yapf/yapf -i -p "${@}"
}

function qualify_tc_bld_uprev() { (
    TC_BLD_SRC=${CBL_GIT}/tc-build
    LNX_STBL=${SRC_FOLDER}/linux-stable
    WORK_DIR=$(mktemp -d)
    TC_BLD=${WORK_DIR}/tc-build

    header "Setting up folders"

    git -C "${TC_BLD_SRC}" worktree add "${TC_BLD}"
    git -C "${LNX_STBL}" ru
    for LNX_VER in 5.10 5.4; do git -C "${LNX_STBL}" worktree add "${WORK_DIR}"/linux-stable-"${LNX_VER}" origin/linux-"${LNX_VER}".y; done

    header "Building toolchains"

    "${TC_BLD}"/build-binutils.py --install-folder "${WORK_DIR}" || exit ${?}
    "${TC_BLD}"/build-llvm.py --check-targets clang lld llvm --install-folder "${WORK_DIR}" --pgo --use-good-revision || exit ${?}

    header "Toolchain information"

    "${WORK_DIR}"/bin/clang --version
    git -C "${TC_BLD}"/llvm-project show -s

    header "Testing toolchain"

    for SRC_FOLDER in "${WORK_DIR}"/linux-stable-{5.10,5.4}; do
        KRNL_DIR=${SRC_FOLDER} TC_DIR=${WORK_DIR} lt
    done

    header "Remove worktrees"
    git -C "${TC_BLD_SRC}" worktree remove "${TC_BLD}"
    for LNX_VER in 5.10 5.4; do git -C "${LNX_STBL}" worktree remove "${WORK_DIR}"/linux-stable-"${LNX_VER}"; done
    rm -rf "${WORK_DIR}"
); }

function upd_lnx_tcbld() { (
    while ((${#})); do
        case ${1} in
            -p | --personal) MODE=personal ;;
            -r | --release) MODE=release ;;
        esac
        shift
    done
    : ${MODE:=personal}

    LINUX=${HOME}/src/linux
    cd "${LINUX}"
    git fetch origin
    KVER=$(git describe --abbrev=0 origin/master | sed 's/v//')

    case ${MODE} in
        personal)
            BPREFIX=pgo
            KERNEL=${CBL}/tc-build/kernel
            TAR_EXT=gz
            URL=https://git.kernel.org/torvalds/t
            ;;
        release)
            BPREFIX=v${KVER}-pgo
            KERNEL=${CBL_GIT}/tc-build/kernel
            TAR_EXT=xz
            URL=https://cdn.kernel.org/pub/linux/kernel/v5.x
            ;;
    esac

    set -ex

    rm -f "${KERNEL}"/linux*
    for CONFIG in defconfig allyesconfig; do
        git checkout "${BPREFIX}"-${CONFIG} || continue
        case ${CONFIG} in
            defconfig) git rebase v"${KVER}" ;;
            allyesconfig) git rebase "${BPREFIX}"-defconfig ;;
        esac
        git format-patch --stdout v"${KVER}".."${BPREFIX}"-"${CONFIG}" >"${KERNEL}"/linux-"${KVER}"-"${CONFIG}".patch
    done

    TARBALL=linux-${KVER}.tar.${TAR_EXT}
    cd "${KERNEL}"
    gen_sha256sum "${URL}/${TARBALL}"

    sed -i "s/LINUX=.*/LINUX=linux-${KVER}/" "${KERNEL}"/build.sh
); }

function rbpi() { (
    PI_SRC=${CBL_KERNELS}/rpi

    set -x

    cd "${PI_SRC}" || exit ${?}
    git ru || exit ${?}
    git rh origin/master
    PATCHES_FOLDER=${GITHUB_FOLDER}/patches/rpi-next
    FIXES=${PATCHES_FOLDER}/fixes.series
    [[ -f ${FIXES} ]] && { git am "${FIXES}" || exit ${?}; }
    ../pi-scripts/build.sh || exit ${?}
    if ! git pll --no-edit mainline master; then
        rg "<<<<<<< HEAD" && exit ${?}
        ../pi-scripts/build.sh || exit ${?}
        git aa
        git c || exit ${?}
    fi
    if ! git pll --no-edit sami clang-cfi; then
        rg "<<<<<<< HEAD" && exit ${?}
        ../pi-scripts/build.sh || exit ${?}
        git aa
        git c --no-edit || exit ${?}
    fi
    ../pi-scripts/build.sh || exit ${?}
); }

function build_stable_llvm() { (
    TC_BLD=${CBL_GIT}/tc-build

    # Build LLVM 10.0.1 and binutils if necessary
    LLVM_10=${CBL_TC}/llvm-10.0.1
    [[ -x ${LLVM_10}/bin/clang ]] ||
        "${TC_BLD}"/build-llvm.py \
            --assertions \
            --branch llvmorg-10.0.1 \
            --install-folder "${LLVM_10}" \
            --pgo \
            --targets "$(grep "AArch64;ARM" "${TC_BLD}"/build-llvm.py | cut -d \" -f 2 | sed 's/RISCV;//')"
    [[ -x ${LLVM_10}/bin/as ]] || "${TC_BLD}"/build-binutils.py --install-folder "${LLVM_10}"

    # Build LLVM 11.0.0 and binutils if neccesary
    LLVM_11=${CBL_TC}/llvm-11.0.0
    [[ -x ${LLVM_11}/bin/clang ]] ||
        "${TC_BLD}"/build-llvm.py \
            --assertions \
            --branch llvmorg-11.0.0 \
            --install-folder "${LLVM_11}" \
            --pgo
    [[ -x ${LLVM_11}/bin/as ]] || "${TC_BLD}"/build-binutils.py --install-folder "${LLVM_11}"

    # Build LLVM 11.0.1-rc1 and binutils if neccesary
    LLVM_11_RC=${CBL_TC}/llvm-11.0.1-rc2
    [[ -x ${LLVM_11_RC}/bin/clang ]] ||
        "${TC_BLD}"/build-llvm.py \
            --assertions \
            --branch llvmorg-11.0.1-rc2 \
            --install-folder "${LLVM_11_RC}" \
            --pgo
    [[ -x ${LLVM_11_RC}/bin/as ]] || "${TC_BLD}"/build-binutils.py --install-folder "${LLVM_11_RC}"
); }

function test_stable_llvm_linux() { (
    # Build LLVM if necessary
    build_stable_llvm

    # Update all trees
    LINUX=${HOME}/src/linux
    [[ -d ${LINUX} ]] || git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/ "${LINUX}"
    cd "${LINUX}"
    git ch master-qualify || git ch -b master-qualify origin/master
    git pull

    LINUX_STABLE=${HOME}/src/linux-stable
    [[ -d ${LINUX_STABLE} ]] || git clone https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/ "${LINUX_STABLE}"
    cd "${LINUX_STABLE}"
    for SBR in 5.10 5.4; do
        git ch linux-${SBR}.y-qualify || git ch -b linux-${SBR}.y-qualify origin/linux-${SBR}.y
        git pull
    done

    # Build the trees
    for LLVM_TC in ${CBL_TC}/llvm-{10.0.1,11.0.1-rc2}; do
        KRNL_DIR=${LINUX} TC_DIR=${LLVM_TC} lt
        for SBR in 5.10 5.4; do
            git ch linux-${SBR}.y-qualify
            KRNL_DIR=${LINUX_STABLE} TC_DIR=${LLVM_TC} lt
        done
    done
); }
# vi: filetype=zsh
