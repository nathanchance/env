#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful
#
# Copyright (C) 2018-2021 Nathan Chancellor
#
# Functions used to assist with ClangBuiltLinux development

# Universal variables
CBL_ANDROID=${CBL}/android
CBL_BLD=${CBL}/build
CBL_BLD_C=${CBL_BLD}/clean
CBL_BLD_P=${CBL_BLD}/patched
CBL_CTTLFSH=${CBL_ANDROID}/cuttlefish
CBL_GIT=${CBL}/github
CBL_KC=${CBL_ANDROID}/common
CBL_KC_SRC=${CBL_KC}/common
CBL_TC=${CBL}/toolchains
CBL_LLVM=${CBL_TC}/llvm-tot/bin
CBL_BNTL=${CBL_TC}/binutils/bin
CBL_LLVM_BNTL=${CBL_TC}/llvm-binutils/bin
CBL_SRC=${CBL}/src
CBL_WRKTR=${CBL}/worktrees
CBL_QEMU=${CBL}/qemu
CBL_QEMU_BIN=${CBL_QEMU}/bin
CBL_QEMU_INSTALL=${CBL_QEMU}/install
CBL_QEMU_SRC=${CBL_QEMU}/src
TCBLD=${CBL}/tc-build
CBL_CCACHE=${CBL}/.ccache
export CBL_ANDROID CBL_BLD CBL_BLD_C CBL_BLD_P CBL_CTTLFSH CBL_GIT CBL_KC CBL_KC_SRC CBL_TC CBL_LLVM CBL_BNTL CBL_LLVM_BNTL CBL_SRC CBL_WRKTR CBL_QEMU CBL_QEMU_BIN CBL_QEMU_INSTALL CBL_QEMU_SRC TCBLD CBL_CCACHE

# Build new LLVM/Clang/lld and test all kernel trees
function bldall() { (
    export TG=true
    bldtcs && bldallk
); }

# Build all kernel trees
function bldallk() { (
    for BLDALLK_TREE in linux{-next,,-stable-5.{11,10,4}}; do TREE=${BLDALLK_TREE} lt ""; done
    for RPI_ARCH in arm arm64; do "${CBL_BLD}"/pi-scripts/build.sh -k "${CBL_BLD}"/rpi ARCH=${RPI_ARCH}; done
    "${CBL_BLD}"/wsl2/bin/build.sh
); }

# Build binutils
function bldbn() { (
    # Setup ccache
    ccache_setup binutils 25

    PATH=${CCACHE_BIN}:${PATH} "${TCBLD}"/build-binutils.py "${@}"
); }

# Build LLVM
function bldllvm() { (
    # Setup ccache
    ccache_setup llvm 75

    "${TCBLD}"/build-llvm.py "${@}"
); }

# Build LLVM/Clang/lld and arm{32,64} and powerpc binutils from source
function bldtcs() { (
    DATE_TIME=$(date +%F_%H-%M-%S)

    # Build binutils
    [[ -d ${TCBLD} ]] || git clone -b personal git@github.com:nathanchance/tc-build.git "${TCBLD}"
    TC_BLD_BNTLS=${TCBLD}/binutils
    [[ -d ${TC_BLD_BNTLS} ]] || git clone https://sourceware.org/git/binutils-gdb.git "${TC_BLD_BNTLS}"
    git -C "${TC_BLD_BNTLS}" pull --rebase || die "Updating binutils failed (${?})"
    BLDBN_INSTALL_FOLDER=${CBL_TC}/binutils-${DATE_TIME}-$(git -C "${TC_BLD_BNTLS}" sh -s --format=%H origin/master)
    bldbn --install-folder "${BLDBN_INSTALL_FOLDER}" || die "bldbn failed with exit code ${?}"
    stripall "${BLDBN_INSTALL_FOLDER}"

    # Update binutils
    ln -fnrsv "${BLDBN_INSTALL_FOLDER}" "${CBL_BNTL%/*}"

    # Build LLVM/Clang/lld
    TC_BLD_LLVM_PRJCT=${TCBLD}/llvm-project
    [[ -d ${TC_BLD_LLVM_PRJCT} ]] || git -C "${TCBLD}" clone https://github.com/llvm/llvm-project
    cd "${TC_BLD_LLVM_PRJCT}"
    git rh || die "Error resetting llvm-project"
    git pull --rebase || die "Updating llvm-project failed (${?})"
    crl 'https://reviews.llvm.org/D97971?download=true' | git ap || die "Error applying D97971"
    BLDLLVM_INSTALL_FOLDER=${CBL_TC}/llvm-${DATE_TIME}-$(git -C "${TC_BLD_LLVM_PRJCT}" sh -s --format=%H origin/master)
    BLD_LLVM_ARGS=()
    ${LTO:-false} && BLD_LLVM_ARGS+=(--lto=thin)
    bldllvm \
        --assertions \
        --check-targets lld clang llvm \
        --install-folder "${BLDLLVM_INSTALL_FOLDER}" \
        "${BLD_LLVM_ARGS[@]}" \
        --pgo || die "bldllvm failed with exit code ${?}"
    stripall "${BLDLLVM_INSTALL_FOLDER}"

    # Update llvm-tot symlink
    ln -fnrsv "${BLDLLVM_INSTALL_FOLDER##*/}" "${CBL_LLVM%/*}"

    # Combine CBL_LLVM and CBL_BNTL for llvm-kernel-testing
    stow -d "${CBL_TC}" -R -t "${CBL_LLVM_BNTL%/*}" -v "$(basename "${CBL_BNTL%/*}")"
    stow -d "${CBL_TC}" -R -t "${CBL_LLVM_BNTL%/*}" -v "$(basename "${CBL_LLVM%/*}")"

    # Invalidate our kernel ccache because we have a new compiler that will be used for it
    ccache_clear kernel
); }

# Function to test build-{binutils,llvm}.py in multiple Docker images
function bld_llvm_bntls_py() { (
    CCACHE_FOLDER=${CBL_CCACHE}/bld_llvm_bntls_py
    TC_BLD=${CBL_GIT}/tc-build
    SCRIPT=$(mktemp -p "${TC_BLD}" --suffix=.sh)

    LOG=$(mktemp)
    echo "Log: ${LOG}"

    mkdir -p "${CCACHE_FOLDER}"
    cd "${TC_BLD}" || die "Could not move into ${TC_BLD}!"
    [[ -f build-llvm.py ]] || die "build-llvm.py script could not be found!"

    cat <<'EOF' >"${SCRIPT}"
#!/usr/bin/env bash

set -x

PACKAGES=(ccache clang cmake git python3)

# Debian/Ubuntu
if command -v apt-get &>/dev/null; then
    PACKAGES+=(
        bc
        binutils-dev
        bison
        ca-certificates
        curl
        file
        flex
        gcc
        g++
        lld
        libelf-dev
        libssl-dev
        make
        ninja-build
        texinfo
        u-boot-tools
        xz-utils
        zlib1g-dev
    )
    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y "${PACKAGES[@]}"
# Fedora
elif command -v dnf &>/dev/null; then
    PACKAGES+=(
        bc
        binutils-devel
        bison
        elfutils-libelf-devel
        flex
        gcc
        gcc-c++
        lld
        make
        ninja-build
        openssl-devel
        texinfo-tex
        uboot-tools
        xz
        zlib-devel
    )
    dnf update -y
    dnf install -y "${PACKAGES[@]}"
# Arch
elif command -v pacman &>/dev/null; then
    PACKAGES+=(
        bc
        base-devel
        bison
        flex
        libelf
        lld
        ninja
        openssl
        uboot-tools
    )
    pacman -Syyu --noconfirm
    pacman -S --noconfirm "${PACKAGES[@]}"
# Clear Linux
elif command -v swupd &>/dev/null; then
    PACKAGES=(
        c-basic
        ccache
        curl
        dev-utils
        devpkg-elfutils
        devpkg-openssl
        git
        python3-basic
        which
    )
    swupd update
    swupd bundle-add "${PACKAGES[@]}"

    # Build u-boot-tools
    (
        UBOOT_VERSION=u-boot-2021.01
        cd /usr/src
        curl -LSs https://ftp.denx.de/pub/u-boot/"${UBOOT_VERSION}".tar.bz2 | tar -xjf -
        cd "${UBOOT_VERSION}" || exit ${?}
        make -j"$(nproc)" defconfig tools-all || exit ${?}
        install -Dm755 tools/mkimage /usr/local/bin/mkimage
        mkimage -V
    ) || exit ${?}
# OpenSUSE Leap/Tumbleweed
elif command -v zypper &>/dev/null; then
    PACKAGES+=(
        bc
        binutils-devel
        binutils-gold
        bison
        ccache
        clang
        cmake
        curl
        flex
        gcc
        gcc-c++
        git
        gzip
        libelf-devel
        libopenssl-devel
        lld
        make
        ninja
        python3
        tar
        texinfo
        u-boot-tools
        xz
        zlib-devel
    )
    zypper -n up
    zypper -n in "${PACKAGES[@]}"
fi

TMP=$(mktemp -d)
cp -v "$(command -v ccache)" "${TMP}"
for BINARY in cc c++ clang clang++ gcc g++; do
    ln -fsv ccache "${TMP}/${BINARY}"
done

ccache --max-size=100G
ccache --set-config=compression=true
ccache --set-config=compression_level=9
ccache --show-stats

PATH=${TMP}:${PATH} ./build-binutils.py || exit ${?}
CC=gcc ./build-llvm.py --branch "release/12.x" || exit ${?}
# Clear Linux defines these in the environment and it causes issues
# We do not do this sooner because we want the optimized flags that Clear Linux provides for GCC
unset CC CFLAGS CXX CXXFLAGS
CC=clang ./build-llvm.py --branch "release/12.x" || exit ${?}

for FILE in clang ld.lld aarch64-linux-gnu-as arm-linux-gnueabi-as m68k-linux-gnu-as mips-linux-gnu-as mipsel-linux-gnu-as powerpc-linux-gnu-as powerpc64-linux-gnu-as powerpc64le-linux-gnu-as riscv64-linux-gnu-as s390x-linux-gnu-as as; do
    install/bin/${FILE} --version || exit ${?}
done

rm -rf /linux/out
kernel/build.sh -s /linux -t "PowerPC;X86"
EOF

    IMAGES=(
        archlinux
        clearlinux
        debian:buster
        debian:stable
        debian:testing
        debian:unstable
        fedora
        fedora:rawhide
        opensuse/leap
        opensuse/tumbleweed
        ubuntu:20.04
        ubuntu
        ubuntu:rolling
        ubuntu:devel
    )

    for IMAGE in "${IMAGES[@]}"; do
        rm -rf "${TC_BLD}"/install
        podman pull docker.io/"${IMAGE}"
        podman run \
            --env="CCACHE_DIR=${CCACHE_FOLDER}" \
            --interactive \
            --rm \
            --tty \
            --volume="${CCACHE_FOLDER}:${CCACHE_FOLDER}" \
            --volume="${TC_BLD}:${TC_BLD}" \
            --volume="${CBL_BLD_P}/linux:/linux" \
            --workdir="${TC_BLD}" \
            "${IMAGE}" bash "${SCRIPT}" || {
            echo "${IMAGE} failed" >>"${LOG}"
            continue
        }
        echo "${IMAGE} successful" >>"${LOG}"
    done
    rm "${SCRIPT}"

    echo
    echo "Results:"
    cat "${LOG}"
    tg_msg "$(cat "${LOG}")"
    echo
); }

function build_stable_llvm() { (
    TC_BLD=${CBL_GIT}/tc-build

    # Use the latest binutils throughout this function
    rm -rf "${TC_BLD}"/install
    "${TC_BLD}"/build-binutils.py || exit ${?}
    path_push "${TC_BLD}"/install/bin

    # Build LLVM 10.0.1 and binutils if necessary
    LLVM_10=${CBL_TC}/llvm-10.0.1
    [[ -x ${LLVM_10}/bin/clang ]] ||
        "${TC_BLD}"/build-llvm.py \
            --assertions \
            --branch llvmorg-10.0.1 \
            --install-folder "${LLVM_10}" \
            --pgo \
            --targets "$(grep "AArch64;ARM" "${TC_BLD}"/build-llvm.py | cut -d \" -f 2 | sed 's/RISCV;//')"
    [[ -x ${LLVM_10}/bin/as ]] || "${TC_BLD}"/build-binutils.py --install-folder "${LLVM_10}"

    # Build LLVM 11.1.0 and binutils if neccesary
    LLVM_11_RC=${CBL_TC}/llvm-11.1.0
    [[ -x ${LLVM_11_RC}/bin/clang ]] ||
        "${TC_BLD}"/build-llvm.py \
            --assertions \
            --branch llvmorg-11.1.0 \
            --install-folder "${LLVM_11_RC}" \
            --pgo
    [[ -x ${LLVM_11_RC}/bin/as ]] || "${TC_BLD}"/build-binutils.py --install-folder "${LLVM_11_RC}"

    # Build LLVM 12.0.0-rc3 and binutils if neccesary
    LLVM_12_RC=${CBL_TC}/llvm-12.0.0-rc3
    [[ -x ${LLVM_12_RC}/bin/clang ]] ||
        "${TC_BLD}"/build-llvm.py \
            --assertions \
            --branch llvmorg-12.0.0-rc3 \
            --install-folder "${LLVM_12_RC}" \
            --pgo
    [[ -x ${LLVM_12_RC}/bin/as ]] || "${TC_BLD}"/build-binutils.py --install-folder "${LLVM_12_RC}"
); }

function cbl_qemu_build() { (
    while ((${#})); do
        case ${1} in
            -u | --update) UPDATE=true ;;
        esac
        shift
    done

    QEMU_501=${CBL_QEMU_SRC}/qemu-5.0.1
    QEMU_501_BLD=${QEMU_501}/build

    if [[ ! -x ${CBL_QEMU_INSTALL}/qemu-5.0.1/bin/qemu-system-ppc ]]; then
        cd "${QEMU_501}" || exit ${?}
        grep -q 'LDFLAGS_NOPIE="-no-pie"' configure && cat <<'EOF' | patch -p1
diff --git a/configure b/configure
index 23b5e93752..c74f0910f7 100755
--- a/configure
+++ b/configure
@@ -2116,7 +2116,6 @@ EOF
 # Check we support --no-pie first; we will need this for building ROMs.
 if compile_prog "-Werror -fno-pie" "-no-pie"; then
   CFLAGS_NOPIE="-fno-pie"
-  LDFLAGS_NOPIE="-no-pie"
 fi
 
 if test "$static" = "yes"; then
@@ -2132,7 +2131,6 @@ if test "$static" = "yes"; then
   fi
 elif test "$pie" = "no"; then
   QEMU_CFLAGS="$CFLAGS_NOPIE $QEMU_CFLAGS"
-  QEMU_LDFLAGS="$LDFLAGS_NOPIE $QEMU_LDFLAGS"
 elif compile_prog "-Werror -fPIE -DPIE" "-pie"; then
   QEMU_CFLAGS="-fPIE -DPIE $QEMU_CFLAGS"
   QEMU_LDFLAGS="-pie $QEMU_LDFLAGS"
@@ -7673,7 +7671,6 @@ if test "$sparse" = "yes" ; then
   echo "QEMU_CFLAGS  += -Wbitwise -Wno-transparent-union -Wno-old-initializer -Wno-non-pointer-null" >> $config_host_mak
 fi
 echo "QEMU_LDFLAGS=$QEMU_LDFLAGS" >> $config_host_mak
-echo "LDFLAGS_NOPIE=$LDFLAGS_NOPIE" >> $config_host_mak
 echo "LD_REL_FLAGS=$LD_REL_FLAGS" >> $config_host_mak
 echo "LD_I386_EMULATION=$ld_i386_emulation" >> $config_host_mak
 echo "LIBS+=$LIBS" >> $config_host_mak
EOF
        rm -rf "${QEMU_501_BLD}"
        mkdir -p "${QEMU_501_BLD}"
        cd "${QEMU_501_BLD}" || exit ${?}
        "${QEMU_501}"/configure \
            --prefix="${CBL_QEMU_INSTALL}"/qemu-5.0.1 \
            --target-list=ppc-softmmu || exit ${?}
        make -skj"$(nproc)" install || exit ${?}
    fi

    QEMU_TOT=${CBL_QEMU_SRC}/qemu
    QEMU_TOT_BLD=${QEMU_TOT}/build

    cd "${QEMU_TOT}" || exit ${?}

    # Cleanup
    git clean -dfqx
    git submodule foreach --recursive git clean -dfqx

    # Update QEMU if requested
    if ${UPDATE:=false}; then
        git reset --hard
        git submodule foreach git reset --hard
        git pull --rebase || exit ${?}
        git submodule update --recursive || exit ${?}
    fi
    grep -q "0xeb7e, ALGSI,   SIY,   GIE, la1, i2, new, 0, asiu64, addu64, MO_TEQ" target/s390x/insn-data.def ||
        { b4 am -o - https://lore.kernel.org/qemu-devel/20210111163845.18148-1-david@redhat.com/ | git ap || exit ${?}; }
    grep -q "r &= ~CPUID_EXT2_LM" target/i386/cpu.c ||
        { b4 am -o - -P 8 https://lore.kernel.org/qemu-devel/20210129111814.566629-9-pbonzini@redhat.com/ | git ap || exit ${?}; }

    # Build qemu
    [[ -z ${QEMU_PREFIX} ]] && QEMU_PREFIX=${CBL_QEMU_INSTALL}/$(git sh -s --format=%H)-$(date +%F-%H-%M-%S)
    if [[ ! -x ${QEMU_PREFIX}/bin/qemu-system-x86_64 ]]; then
        rm -rf "${QEMU_TOT_BLD}"
        mkdir -p "${QEMU_TOT_BLD}"
        cd "${QEMU_TOT_BLD}" || exit ${?}
        "${QEMU_TOT}"/configure --prefix="${QEMU_PREFIX}" || exit ${?}
        if [[ -f build.ninja ]]; then
            ninja install || exit ${?}
        else
            make -skj"$(nproc)" install || exit ${?}
        fi
    fi

    # Symlink latest QEMU into bin folder
    rm -rf "${CBL_QEMU_BIN}"
    mkdir -p "${CBL_QEMU_BIN}"
    ln -fsv "${CBL_QEMU_INSTALL}"/qemu-5.0.1/bin/qemu-system-ppc "${CBL_QEMU_BIN}"
    for ARCH in arm aarch64 i386 m68k mips mipsel ppc64 riscv64 s390x x86_64; do
        ln -fsv "${QEMU_PREFIX}"/bin/qemu-system-${ARCH} "${CBL_QEMU_BIN}"
    done
    ln -fsv "${QEMU_PREFIX}"/bin/qemu-img "${CBL_QEMU_BIN}"
); }

function cbl_sunday() { (
    upd_qemu || exit ${?}
    updllvm
    rld
    test_llvm_linux
); }

# Show local LLVM patches via git log
function llvm_log() { (
    cd "${TCBLD:?}"/llvm-project || exit ${?}

    MLFC=$(git mfc)
    if [[ -n ${MLFC} ]]; then
        echo
        echo "LLVM commit log:"
        echo
        git lo "${MLFC}"^^..HEAD
    fi
); }

# linux testing
function lt() { (
    ccache_setup kernel 250

    : "${KRNL_DIR:=${CBL_BLD_P}/${TREE:=linux-next}}" "${TC_DIR:=${CBL_LLVM_BNTL%/*}}"

    # Make sure that clang can be found in ${TC_DIR}/bin/clang first, otherwise the wrong
    # value was probably passed
    [[ -d ${TC_DIR}/bin ]] || die "${TC_DIR} value is wrong, no bin folder"
    for BIN in "${TC_DIR}"/bin/*; do
        case ${BIN##*/} in
            clang) CLANG_FOUND=true ;;
            as | *-linux-gnu-as) AS_FOUND=true ;;
        esac
    done
    ${AS_FOUND:=false} || die "GNU as could not be found in ${TC_DIR}/bin"
    ${CLANG_FOUND:=false} || die "clang could not be found in ${TC_DIR}/bin"

    LOG_DIR=${CBL}/build-logs/${KRNL_DIR##*/}-$(date +%F-%T)
    mkdir -p "${LOG_DIR}"

    TC_BLD_ARGS=()
    [[ -n ${ARCHES} ]] && TC_BLD_ARGS+=(--arches "${ARCHES}")
    [[ -n ${BOOT_UTILS} ]] && TC_BLD_ARGS+=(--boot-utils "${BOOT_UTILS}")
    ${DO:=false} && TC_BLD_ARGS+=(--defconfigs)
    ${LTO:-true} && [[ ${KRNL_DIR##*/} = "linux" ]] && TC_BLD_ARGS+=(--test-lto-cfi-kernel)
    PATH=${CBL_QEMU_BIN}:${PATH} \
        "${CBL}"/llvm-kernel-testing/test.sh \
        --linux-src "${KRNL_DIR}" \
        --log-dir "${LOG_DIR}" \
        --skip-tc-build \
        --tc-prefix "${TC_DIR}" \
        "${TC_BLD_ARGS[@]}" || die "llvm-kernel-testing failed (${?})"

    # arch/powerpc/boot/inffast.c: A warning we do not really care about (https://github.com/ClangBuiltLinux/linux/issues/664)
    # DWARF2 only supports one section per compilation unit: Irrelevant for now
    # objtool: Too many to deal with for now
    # override: CPU_BIG_ENDIAN changes choice state | override: LTO_CLANG_THIN changes choice state: Warnings from merge_config that are harmless in this context
    # results.log: Any warnings from this will be in the other logs
    # include/linux/bcache.h:3: https://github.com/ClangBuiltLinux/linux/issues/1065
    BLOCKLIST="arch/powerpc/boot/inffast.c|DWARF3 only supports one section per compilation unit|objtool:|override: CPU_BIG_ENDIAN changes choice state|override: LTO_CLANG_THIN changes choice state|results.log|union jset::\(anonymous at ./usr/include/linux/bcache.h:"
    SEARCHLIST="error:|FATAL:|undefined|Unsupported relocation type:|warning:|WARNING:"

    # File paths to remove from logs
    SED_ARGS=()
    for FILE_PATH in ${LOG_DIR} ${KRNL_DIR} ${CBL}/llvm-kernel-testing/src/linux-clang-cfi; do
        SED_ARGS+=(-e "s;${FILE_PATH}/;;g")
    done

    # Cache filtered logs
    TMP_FILE=$(mktemp)
    rg "${SEARCHLIST}" "${LOG_DIR}"/*.log |& rg -v -- "${BLOCKLIST}" |& sed "${SED_ARGS[@]}" |& sort |& uniq >"${TMP_FILE}"

    {
        echo "Host: $(uname -n)"
        echo
        cat "${LOG_DIR}"/results.log
        # Filter harder
        UNIQUE_WARNINGS=$(sed -e 's/^[^:]*://g' -e 's/^.*Section mismatch/Section mismatch/' "${TMP_FILE}" |& sort |& uniq)
        if [[ -n ${UNIQUE_WARNINGS} ]]; then
            echo
            echo "Unique warning report:"
            echo "${UNIQUE_WARNINGS}"
        fi
        FULL_WARNINGS=$(cat "${TMP_FILE}")
        if [[ -n ${FULL_WARNINGS} ]]; then
            echo
            echo "Full warning report:"
            echo "${FULL_WARNINGS}"
        fi
        MFC=$(git -C "${KRNL_DIR}" mfc)
        if [[ -n ${MFC} ]]; then
            echo
            echo "${KRNL_DIR##*/} commit log:"
            echo
            git -C "${KRNL_DIR}" lo "${MFC}"^^..HEAD
        fi
        llvm_log
    } >"${LOG_DIR}"/haste.log

    rm "${TMP_FILE}"

    MESSAGE="${LOG_DIR##*/} build results: $(haste "${LOG_DIR}/haste.log")"

    tg_msg "${MESSAGE}"

    echo
    echo "${MESSAGE}"
    echo "Full logs available at: ${LOG_DIR}"
    echo

    rm "${LOG_DIR}"/haste.log
); }

# Download and apply an LLVM/Clang/lld patch
function phabap() { (
    [[ ! -d llvm ]] && die "You're not in the llvm-project folder!"

    while ((${#})); do
        case ${1} in
            D*) REVISION=${1} ;;
            *) GIT_AP_ARGS=("${GIT_AP_ARGS[@]}" "${1}") ;;
        esac
        shift
    done

    curl -LSs "https://reviews.llvm.org/${REVISION:?}?download=true" | git ap "${GIT_AP_ARGS[@]}" || exit ${?}
    git ac -m "${REVISION}

Link: https://reviews.llvm.org/${REVISION}"
); }

function qualify_tc_bld_uprev() { (
    TC_BLD_SRC=${CBL_GIT}/tc-build
    LNX_STBL=${CBL_SRC}/linux-stable
    WORK_DIR=$(mktemp -d -p "${TMP_FOLDER}")
    TC_BLD=$(mktemp -d -p "${WORK_DIR}" -u)

    header "Setting up folders"

    git -C "${TC_BLD_SRC}" worktree add "${TC_BLD}" || exit ${?}
    git -C "${LNX_STBL}" ru || exit ${?}
    for LNX_VER in 5.11 5.10 5.4; do git -C "${LNX_STBL}" worktree add "${WORK_DIR}"/linux-stable-"${LNX_VER}" origin/linux-"${LNX_VER}".y || exit ${?}; done

    header "Building toolchains"

    "${TC_BLD}"/build-binutils.py --install-folder "${WORK_DIR}" || exit ${?}
    "${TC_BLD}"/build-llvm.py --check-targets clang lld llvm --install-folder "${WORK_DIR}" --pgo --use-good-revision || exit ${?}

    header "Toolchain information"

    "${WORK_DIR}"/bin/clang --version
    git -C "${TC_BLD}"/llvm-project show -s

    header "Testing toolchain"

    for SRC_FOLDER in "${WORK_DIR}"/linux-stable-{5.11,5.10,5.4}; do
        KRNL_DIR=${SRC_FOLDER} TC_DIR=${WORK_DIR} lt
    done

    header "Remove worktrees"
    git -C "${TC_BLD_SRC}" worktree remove "${TC_BLD}"
    for LNX_VER in 5.11 5.10 5.4; do git -C "${LNX_STBL}" worktree remove "${WORK_DIR}"/linux-stable-"${LNX_VER}"; done
    rm -rf "${WORK_DIR}"
); }

# Strip executables within a folder
function stripall() { (
    cd "${1:?}"
    for FILE in $(fd -t file -x file | grep 'not stripped' | cut -d: -f1); do strip "${FILE}"; done
); }

function test_llvm_linux() { (
    test_llvm_mainline_linux
    test_llvm_stable_linux
); }

function test_llvm_mainline_linux() { (
    # Build LLVM if necessary
    build_stable_llvm

    # Update all trees
    LINUX=${CBL_BLD_C}/linux
    [[ -d ${LINUX} ]] || git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/ "${LINUX}"
    git -C "${LINUX}" pull --rebase

    # Build the tree
    for LLVM_TC in ${CBL_TC}/llvm-{10.0.1,11.1.0,12.0.0-rc3,binutils}; do
        KRNL_DIR=${LINUX} TC_DIR=${LLVM_TC} lt
    done
); }

function test_llvm_stable_linux() { (
    # Build LLVM if necessary
    build_stable_llvm

    for SBR in 5.11 5.10 5.4; do
        LINUX_STABLE=${CBL_BLD_C}/linux-stable-${SBR}
        [[ -d ${LINUX_STABLE} ]] || git clone https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/ "${LINUX_STABLE}"
        cd "${LINUX_STABLE}"
        git ch linux-${SBR}.y
        git pull --rebase
    done

    # Build the trees
    for LLVM_TC in ${CBL_TC}/llvm-{10.0.1,11.1.0,12.0.0-rc3,binutils}; do
        for TEST_KRNL_DIR in ${CBL_BLD_C}/linux-stable-{5.10,5.4}; do
            KRNL_DIR=${TEST_KRNL_DIR} TC_DIR=${LLVM_TC} lt
        done
    done
); }

function upd_qemu() { (
    cbl_qemu_build -u
    DO=true KRNL_DIR=${CBL_BLD_P:-${HOME}/cbl/build/patched}/linux PATH=${CBL_QEMU_BIN}:${PATH} lt
); }

function upd_lnx_tcbld() { (
    while ((${#})); do
        case ${1} in
            -p | --personal) MODE=personal ;;
            -r | --release) MODE=release ;;
        esac
        shift
    done
    : ${MODE:=personal}

    LINUX=${CBL_SRC}/linux
    cd "${LINUX}" || exit ${?}
    git fetch origin
    KVER=$(git describe --abbrev=0 origin/master | sed 's/v//')

    case ${MODE} in
        personal)
            BPREFIX=pgo
            KERNEL=${CBL}/tc-build/kernel
            TAR_EXT=gz
            URL=https://git.kernel.org/torvalds/t
            ;;
        release)
            BPREFIX=v${KVER}-pgo
            KERNEL=${CBL_GIT}/tc-build/kernel
            TAR_EXT=xz
            URL=https://cdn.kernel.org/pub/linux/kernel/v5.x
            ;;
    esac

    set -ex

    rm -f "${KERNEL}"/linux*
    for CONFIG in defconfig allyesconfig; do
        git checkout "${BPREFIX}"-${CONFIG} || continue
        case ${CONFIG} in
            defconfig) git rebase v"${KVER}" ;;
            allyesconfig) git rebase "${BPREFIX}"-defconfig ;;
        esac
        git format-patch --stdout v"${KVER}".."${BPREFIX}"-"${CONFIG}" >"${KERNEL}"/linux-"${KVER}"-"${CONFIG}".patch
    done

    TARBALL=linux-${KVER}.tar.${TAR_EXT}
    cd "${KERNEL}"
    gen_sha256sum "${URL}/${TARBALL}"

    sed -i "s/LINUX=.*/LINUX=linux-${KVER}/" "${KERNEL}"/build.sh
); }

function yapf() {
    PYTHONPATH=${CBL_GIT}/yapf python3 "${CBL_GIT}"/yapf/yapf -i -p "${@}"
}
# vi: filetype=zsh
