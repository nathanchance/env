#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful
#
# Copyright (C) 2021 Nathan Chancellor
#
# Functions for managing multiple ccache folders

# Common ccache variable
CCACHE=$(
    path_push "${HOME}/usr/bin"
    command -v ccache
)
export CCACHE

CCACHE_BIN=${HOME}/.ccachebin
export CCACHE_BIN

# Call ccache
function ccache_call() {
    [[ -d ${CCACHE_DIR} ]] && mkdir -p "${CCACHE_DIR}"
    "${CCACHE:-ccache}" "${@}"
}

# https://ccache.dev/manual/4.2.html#_location_of_the_primary_configuration_file
function ccache_dir() {
    CCACHE_DIR=${1}
    [[ -z ${CCACHE_DIR} ]] && CCACHE_DIR=${HOME}/.cache/ccache
    export CCACHE_DIR
}

# Work with multiple ccache folders
function ccache_for_all() { (
    CCACHE_DIRS=()
    while ((${#})); do
        case ${1} in
            binutils | kernel | llvm) CCACHE_DIRS+=("${CBL_CCACHE}/${1}") ;;
            */*) CCACHE_DIRS+=("${1}") ;;
            clear) CCACHE_OPTS=(--clear --zero-stats) ;;
            stats) CCACHE_OPTS=(--show-stats) ;;
        esac
        shift
    done
    if [[ -z ${CCACHE_DIRS[*]} ]]; then
        ccache_dir
        CCACHE_DIRS=("${CCACHE_DIR}")
    fi

    for DIR in "${CCACHE_DIRS[@]}"; do
        ccache_dir "${DIR}"
        header "${CCACHE_DIR:?}"
        ccache_call "${CCACHE_OPTS[@]}"
    done
); }

# Clear specific folder ccache
function ccache_clear() { (
    ccache_for_all clear "${@}"
); }

# Setup ccache
function ccache_setup() {
    while ((${#})); do
        case ${1} in
            [0-9] | [0-9][0-9] | [0-9][0-9][0-9]) SIZE=${1} ;;
            binutils | kernel | llvm) DIR=${CBL_CCACHE}/${1} ;;
            */*) DIR=${1} ;;
        esac
        shift
    done
    [[ -f ${CCACHE} ]] || die "\${CCACHE} is not set"
    [[ -x ${CCACHE} ]] || die "\${CCACHE} cannot be executed"
    [[ -n ${SIZE} ]] || die "Size of cache is not set"

    mkdir -p "${CCACHE_BIN}"
    for BINARY in cc c++ clang clang++ gcc g++; do
        ln -fs "${CCACHE}" "${CCACHE_BIN}"/"${BINARY}"
    done

    ccache_dir "${DIR}"
    ccache_call --max-size="${SIZE}"G >/dev/null
    ccache_call --set-config=compression=true
    ccache_call --set-config=compression_level=9
}

# Print specific folder ccache stats
function ccache_stats() { (
    ccache_for_all stats "${@}"
); }
# vi: filetype=zsh
