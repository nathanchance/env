#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful
#
# Copyright (C) 2021 Nathan Chancellor
#
# Functions used to assist with upstream kernel development

# checkpatch.pl shorthand
function chp() { (
    [[ -x scripts/checkpatch.pl ]] || die "checkpatch.pl does not exist"
    scripts/checkpatch.pl "${@}"
); }

# Grab an thread as an mbox file with b4
function gmbx() { (
    command -v b4 &>/dev/null || die "b4 needs to be installed"

    MSG_ID=${1:?}
    MBOX=$(mktemp --suffix=.mbox)

    set -x

    b4 mbox -n "${MBOX}" "${MSG_ID}" || exit ${?}
    neomutt -f "${MBOX}"
    rm "${MBOX}"
); }

# get_maintainer.pl shorthand
# SC2120: gtm references arguments, but none are ever passed.
# shellcheck disable=SC2120
function gtm() { (
    [[ -x scripts/get_maintainer.pl ]] || die "get_maintainer.pl does not exist"
    scripts/get_maintainer.pl --scm "${@}"
); }

# Check if we are in a kernel tree or not
function in_kernel_tree() {
    [[ -f Makefile ]] || die "You do not appear to be in a kernel tree"
}

# Patch check function
function pch() { (
    in_kernel_tree

    REV=${1}
    [[ -z ${REV} ]] && REV=HEAD~1..HEAD

    for SHA in $(git log --format=%H --no-merges --reverse "${REV}"); do
        TITLE="Commit $(git kf "${SHA}")"
        HEADER=$(for _ in $(seq ${#TITLE}); do printf '-'; done)
        printf "\n%s\n%s\n%s\n\n" "${HEADER}" "${TITLE}" "${HEADER}"
        chp -g "${SHA}"
        # SC2119: Use gtm "$@" if function's $1 should mean script's $1.
        # shellcheck disable=SC2119
        git fp -1 --stdout "${SHA}" | gtm
    done
); }

# Quilt-like patch management function for Linux
function ptchmn() { (
    in_kernel_tree

    REPO=${PWD##*/}
    TARGET_FOLDER=${GITHUB_FOLDER}/patches/${REPO}/$(git cb)
    [[ ! -d ${TARGET_FOLDER} ]] && die "${TARGET_FOLDER} doesn't exist!"

    case "${1:?}" in
        -s | --sync)
            case ${REPO} in
                linux | linux-next | linux-stable-5.4 | linux-stable-5.10 | linux-stable-5.11) ;;
                *) die "${REPO} not supported by ptchmn!" ;;
            esac

            FIRST_HASH=$(git mfc)
            [[ -z ${FIRST_HASH} ]] && die "FIRST_HASH is empty...?"

            rm "${TARGET_FOLDER}"/*

            git fp -o "${TARGET_FOLDER}" --base="${FIRST_HASH}^" "${FIRST_HASH}"^..HEAD

            git -C "${TARGET_FOLDER}" aa

            git -C "${TARGET_FOLDER}" c -m "patches: ${REPO}: $(git cb): Sync as of $(git sh -s --format=%h)"

            git -C "${TARGET_FOLDER}" push
            ;;

        -a | --apply)
            git am "${TARGET_FOLDER}"/*
            ;;
    esac
); }

# Rebase a linux-next branch
function rbln() { (
    in_kernel_tree

    FIRST_HASH=$(git mfc)
    SECOND_HASH=$(git show -s --format=%H "$(git cb)")
    git rh origin/master
    git cherry-pick --gpg-sign "${FIRST_HASH}^..${SECOND_HASH}"
); }

# Rebase Raspberry Pi kernel
function rbpi() { (
    PI_SRC=${CBL_BLD:?}/rpi

    set -x

    cd "${PI_SRC}" || exit ${?}
    git ru || exit ${?}
    git rh origin/master
    PATCHES_FOLDER=${GITHUB_FOLDER}/patches/rpi-next
    FIXES=${PATCHES_FOLDER}/fixes.series
    [[ -f ${FIXES} ]] && { git am "${FIXES}" || exit ${?}; }
    git b4 ams 20210325185749.27984-1-nsaenz@kernel.org
    git b4 ams 20210330230249.709221-1-jiancai@google.com
    cat <<'EOF' | git am || exit ${?}
From 9ced2a22f691c32a9009535bce9122a69b4d7c24 Mon Sep 17 00:00:00 2001
From: Nathan Chancellor <nathan@kernel.org>
Date: Wed, 7 Apr 2021 22:54:06 -0700
Subject: [PATCH] ALSA: led control - Move info and value onto the heap in
 snd_ctl_led_get

Signed-off-by: Nathan Chancellor <nathan@kernel.org>
---
 sound/core/control_led.c | 64 ++++++++++++++++++++++++----------------
 1 file changed, 38 insertions(+), 26 deletions(-)

diff --git a/sound/core/control_led.c b/sound/core/control_led.c
index d756a52e58db..c481b3b1d172 100644
--- a/sound/core/control_led.c
+++ b/sound/core/control_led.c
@@ -97,34 +97,46 @@ static struct snd_ctl_led *snd_ctl_led_get_by_access(unsigned int access)
 static int snd_ctl_led_get(struct snd_ctl_led_ctl *lctl)
 {
 	struct snd_kcontrol *kctl = lctl->kctl;
-	struct snd_ctl_elem_info info;
-	struct snd_ctl_elem_value value;
+	struct snd_ctl_elem_info *info;
+	struct snd_ctl_elem_value *value;
 	unsigned int i;
-	int result;
-
-	memset(&info, 0, sizeof(info));
-	info.id = kctl->id;
-	info.id.index += lctl->index_offset;
-	info.id.numid += lctl->index_offset;
-	result = kctl->info(kctl, &info);
-	if (result < 0)
-		return -1;
-	memset(&value, 0, sizeof(value));
-	value.id = info.id;
-	result = kctl->get(kctl, &value);
-	if (result < 0)
-		return -1;
-	if (info.type == SNDRV_CTL_ELEM_TYPE_BOOLEAN ||
-	    info.type == SNDRV_CTL_ELEM_TYPE_INTEGER) {
-		for (i = 0; i < info.count; i++)
-			if (value.value.integer.value[i] != info.value.integer.min)
-				return 1;
-	} else if (info.type == SNDRV_CTL_ELEM_TYPE_INTEGER64) {
-		for (i = 0; i < info.count; i++)
-			if (value.value.integer64.value[i] != info.value.integer64.min)
-				return 1;
+	int result, ret = 0;
+
+	info = kzalloc(sizeof(*info), GFP_KERNEL);
+	info->id = kctl->id;
+	info->id.index += lctl->index_offset;
+	info->id.numid += lctl->index_offset;
+	result = kctl->info(kctl, info);
+	if (result < 0) {
+		ret = -1;
+		goto free_info;
 	}
-	return 0;
+	value = kzalloc(sizeof(*value), GFP_KERNEL);
+	value->id = info->id;
+	result = kctl->get(kctl, value);
+	if (result < 0) {
+		ret = -1;
+		goto free_value;
+	}
+	if (info->type == SNDRV_CTL_ELEM_TYPE_BOOLEAN ||
+	    info->type == SNDRV_CTL_ELEM_TYPE_INTEGER) {
+		for (i = 0; i < info->count; i++)
+			if (value->value.integer.value[i] != info->value.integer.min) {
+				ret = 1;
+				goto free_value;
+			}
+	} else if (info->type == SNDRV_CTL_ELEM_TYPE_INTEGER64) {
+		for (i = 0; i < info->count; i++)
+			if (value->value.integer64.value[i] != info->value.integer64.min) {
+				ret = 1;
+				goto free_value;
+			}
+	}
+free_value:
+	kfree(value);
+free_info:
+	kfree(info);
+	return ret;
 }
 
 static void snd_ctl_led_set_state(struct snd_card *card, unsigned int access,
-- 
2.31.1.189.g2e36527f23

EOF
    for SHA in 358afb8b746d4a7ebaeeeaab7a1523895a8572c2 4564363351e2680e55edc23c7953aebd2acb4ab7; do
        git fp -1 --stdout "${SHA}" arch/arm/boot/dts/bcm2711-rpi-4-b.dts | git ap -R || exit ${?}
    done
    git ac -m "ARM: dts: bcm2711: Disable the display pipeline"
    ../pi-scripts/build.sh ARCH=arm || exit ${?}
    ../pi-scripts/build.sh ARCH=arm64 || exit ${?}
    if ! git pll --no-edit mainline master; then
        rg "<<<<<<< HEAD" && exit ${?}
        ../pi-scripts/build.sh ARCH=arm || exit ${?}
        ../pi-scripts/build.sh ARCH=arm64 || exit ${?}
        git aa
        git c || exit ${?}
    fi
    if ! git pll --no-edit sami clang-cfi; then
        rg "<<<<<<< HEAD" && exit ${?}
        ../pi-scripts/build.sh ARCH=arm || exit ${?}
        ../pi-scripts/build.sh ARCH=arm64 || exit ${?}
        git aa
        git c --no-edit || exit ${?}
    fi
    ../pi-scripts/build.sh ARCH=arm || exit ${?}
    ../pi-scripts/build.sh ARCH=arm64 || exit ${?}
); }

# Update wsl2-kernel to latest -next
function rbwk() { (
    case ${LOCATION} in
        workstation) WSL2_KERNEL=${HOME}/cbl/build/wsl2 ;;
        wsl) WSL2_KERNEL=${HOME}/src/wsl2-kernel ;;
        *) die "rbwk() is not supported by ${LOCATION}" ;;
    esac

    set -x
    cd "${WSL2_KERNEL}" || exit ${?}
    git ru || exit ${?}
    for BRANCH in clearlinux-patchset microsoft-patchset; do
        git ch "${BRANCH}" || exit ${?}
        git rb -i next/master || exit ${?}
    done
    git ch next || exit ${?}
    git rh next/master
    if ! git pll --no-edit mainline master; then
        rg "<<<<<<< HEAD" && exit ${?}
        git aa
        git c || exit ${?}
    fi
    if ! git pll --no-edit sami clang-cfi; then
        rg "<<<<<<< HEAD" && exit ${?}
        git aa
        git c || exit ${?}
    fi
    git ml --no-edit clearlinux-patchset microsoft-patchset || exit ${?}
    git cp "$(git lo --merges -1 --format=%H origin/HEAD)".."$(git sh -s --format=%H origin/HEAD)"
); }
# vi: filetype=zsh
