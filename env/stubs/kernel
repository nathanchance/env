# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2021 Nathan Chancellor
#
# Functions used to assist with upstream kernel development

# Apply patch from LKML using b4
function b4a() { (
    command -v b4 &>/dev/null || die "b4 needs to be installed"
    in_kernel_tree

    B4_ARGS=()
    while ((${#})); do
        case ${1} in
            http* | *@*) MSG_ID=${1} ;;
            -P) B4_ARGS+=(-P "${1}") && shift ;;
            am) METHOD=(am) ;;
            ams) METHOD=(ams) ;;
            # The default
            ap | apply) ;;
        esac
        shift
    done
    [[ -z ${MSG_ID} ]] && die "Message ID needs to be passed to script"
    [[ -z ${METHOD[*]} ]] && METHOD=(apply -v)

    b4 am -o - -l "${B4_ARGS[@]}" "${MSG_ID}" | git "${METHOD[@]}" -3
); }

# checkpatch.pl shorthand
function chp() { (
    [[ -x scripts/checkpatch.pl ]] || die "checkpatch.pl does not exist"
    scripts/checkpatch.pl "${@}"
); }

# Grab an thread as an mbox file with b4
function gmbx() { (
    command -v b4 &>/dev/null || die "b4 needs to be installed"

    MSG_ID=${1:?}
    MBOX=$(mktemp --suffix=.mbox)

    set -x

    b4 mbox -n "${MBOX}" "${MSG_ID}" || exit ${?}
    mutt -f "${MBOX}"
    rm "${MBOX}"
); }

# get_maintainer.pl shorthand
# SC2120: gtm references arguments, but none are ever passed.
# shellcheck disable=SC2120
function gtm() { (
    [[ -x scripts/get_maintainer.pl ]] || die "get_maintainer.pl does not exist"
    scripts/get_maintainer.pl --scm "${@}"
); }

# Check if we are in a kernel tree or not
function in_kernel_tree() {
    [[ -f Makefile ]] || die "You do not appear to be in a kernel tree"
}

# Patch check function
function pch() { (
    in_kernel_tree

    REV=${1}
    [[ -z ${REV} ]] && REV=HEAD~1..HEAD

    for SHA in $(git log --format=%H --no-merges --reverse "${REV}"); do
        TITLE="Commit $(git kf "${SHA}")"
        HEADER=$(for _ in $(seq ${#TITLE}); do printf '-'; done)
        printf "\n%s\n%s\n%s\n\n" "${HEADER}" "${TITLE}" "${HEADER}"
        chp -g "${SHA}"
        # SC2119: Use gtm "$@" if function's $1 should mean script's $1.
        # shellcheck disable=SC2119
        git fp -1 --stdout "${SHA}" | gtm
    done
); }

# Quilt-like patch management function for Linux
function ptchmn() { (
    in_kernel_tree

    REPO=${PWD##*/}
    TARGET_FOLDER=${GITHUB_FOLDER}/patches/${REPO}/$(git cb)
    [[ ! -d ${TARGET_FOLDER} ]] && die "${TARGET_FOLDER} doesn't exist!"

    case "${1:?}" in
        -s | --sync)
            case ${REPO} in
                linux | linux-next | linux-stable-5.4 | linux-stable-5.10 | linux-stable-5.11) ;;
                *) die "${REPO} not supported by ptchmn!" ;;
            esac

            FIRST_HASH=$(git mfc)
            [[ -z ${FIRST_HASH} ]] && die "FIRST_HASH is empty...?"

            rm "${TARGET_FOLDER}"/*

            git fp -o "${TARGET_FOLDER}" --base="${FIRST_HASH}^" "${FIRST_HASH}"^..HEAD

            git -C "${TARGET_FOLDER}" aa

            git -C "${TARGET_FOLDER}" c -m "patches: ${REPO}: $(git cb): Sync as of $(git sh -s --format=%h)"

            git -C "${TARGET_FOLDER}" push
            ;;

        -a | --apply)
            git am "${TARGET_FOLDER}"/*
            ;;
    esac
); }

# Rebase a linux-next branch
function rbln() { (
    in_kernel_tree

    FIRST_HASH=$(git mfc)
    SECOND_HASH=$(git show -s --format=%H "$(git cb)")
    git rh origin/master
    git cherry-pick --gpg-sign "${FIRST_HASH}^..${SECOND_HASH}"
); }

# Rebase Raspberry Pi kernel
function rbpi() { (
    PI_SRC=${CBL_BLD:?}/rpi

    set -x

    cd "${PI_SRC}" || exit ${?}
    git ru || exit ${?}
    git rh origin/master
    PATCHES_FOLDER=${GITHUB_FOLDER}/patches/rpi-next
    FIXES=${PATCHES_FOLDER}/fixes.series
    [[ -f ${FIXES} ]] && { git am "${FIXES}" || exit ${?}; }
    git rv --no-edit e8805271b82793e6d1f3de786c2278e4d622bdb6 || exit ${?}
    ../pi-scripts/build.sh ARCH=arm || exit ${?}
    ../pi-scripts/build.sh ARCH=arm64 || exit ${?}
    if ! git pll --no-edit mainline master; then
        rg "<<<<<<< HEAD" && exit ${?}
        ../pi-scripts/build.sh ARCH=arm || exit ${?}
        ../pi-scripts/build.sh ARCH=arm64 || exit ${?}
        git aa
        git c || exit ${?}
    fi
    if ! git pll --no-edit sami clang-cfi; then
        rg "<<<<<<< HEAD" && exit ${?}
        ../pi-scripts/build.sh ARCH=arm || exit ${?}
        ../pi-scripts/build.sh ARCH=arm64 || exit ${?}
        git aa
        git c --no-edit || exit ${?}
    fi
    ../pi-scripts/build.sh ARCH=arm || exit ${?}
    ../pi-scripts/build.sh ARCH=arm64 || exit ${?}
); }

# Update wsl2-kernel to latest -next
function rbwk() { (
    case ${LOCATION} in
        workstation) WSL2_KERNEL=${HOME}/cbl/build/wsl2 ;;
        wsl) WSL2_KERNEL=${HOME}/src/wsl2-kernel ;;
        *) die "rbwk() is not supported by ${LOCATION}" ;;
    esac

    set -x
    cd "${WSL2_KERNEL}" || exit ${?}
    git ru || exit ${?}
    for BRANCH in clearlinux-patchset microsoft-patchset; do
        git ch "${BRANCH}" || exit ${?}
        git rb -i next/master || exit ${?}
    done
    git ch next || exit ${?}
    git rh next/master
    if ! git pll --no-edit mainline master; then
        rg "<<<<<<< HEAD" && exit ${?}
        git aa
        git c || exit ${?}
    fi
    if ! git pll --no-edit sami clang-cfi; then
        rg "<<<<<<< HEAD" && exit ${?}
        git aa
        git c || exit ${?}
    fi
    git ml --no-edit clearlinux-patchset microsoft-patchset || exit ${?}
    git cp "$(git lo --merges -1 --format=%H origin/HEAD)".."$(git sh -s --format=%H origin/HEAD)"
); }
# vi: filetype=zsh
