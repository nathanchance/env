#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful
#
# Copyright (C) 2021 Nathan Chancellor
#
# Functions used to assist with upstream kernel development

# checkpatch.pl shorthand
function chp() { (
    [[ -x scripts/checkpatch.pl ]] || die "checkpatch.pl does not exist"
    scripts/checkpatch.pl "${@}"
); }

# Grab an thread as an mbox file with b4
function gmbx() { (
    command -v b4 &>/dev/null || die "b4 needs to be installed"

    MSG_ID=${1:?}
    MBOX=$(mktemp --suffix=.mbox)

    set -x

    b4 mbox -n "${MBOX}" "${MSG_ID}" || exit ${?}
    neomutt -f "${MBOX}"
    rm "${MBOX}"
); }

# get_maintainer.pl shorthand
# SC2120: gtm references arguments, but none are ever passed.
# shellcheck disable=SC2120
function gtm() { (
    [[ -x scripts/get_maintainer.pl ]] || die "get_maintainer.pl does not exist"
    scripts/get_maintainer.pl --scm "${@}"
); }

# Check if we are in a kernel tree or not
function in_kernel_tree() {
    [[ -f Makefile ]] || die "You do not appear to be in a kernel tree"
}

# Patch check function
function pch() { (
    in_kernel_tree

    REV=${1}
    [[ -z ${REV} ]] && REV=HEAD~1..HEAD

    for SHA in $(git log --format=%H --no-merges --reverse "${REV}"); do
        TITLE="Commit $(git kf "${SHA}")"
        HEADER=$(for _ in $(seq ${#TITLE}); do printf '-'; done)
        printf "\n%s\n%s\n%s\n\n" "${HEADER}" "${TITLE}" "${HEADER}"
        chp -g "${SHA}"
        # SC2119: Use gtm "$@" if function's $1 should mean script's $1.
        # shellcheck disable=SC2119
        git fp -1 --stdout "${SHA}" | gtm
    done
); }

# Quilt-like patch management function for Linux
function ptchmn() { (
    in_kernel_tree

    REPO=${PWD##*/}
    TARGET_FOLDER=${GITHUB_FOLDER}/patches/${REPO}/$(git cb)
    [[ ! -d ${TARGET_FOLDER} ]] && die "${TARGET_FOLDER} doesn't exist!"

    case "${1:?}" in
        -s | --sync)
            case ${REPO} in
                linux | linux-next | linux-stable-5.4 | linux-stable-5.10 | linux-stable-5.11) ;;
                *) die "${REPO} not supported by ptchmn!" ;;
            esac

            FIRST_HASH=$(git mfc)
            [[ -z ${FIRST_HASH} ]] && die "FIRST_HASH is empty...?"

            rm "${TARGET_FOLDER}"/*

            git fp -o "${TARGET_FOLDER}" --base="${FIRST_HASH}^" "${FIRST_HASH}"^..HEAD

            git -C "${TARGET_FOLDER}" aa

            git -C "${TARGET_FOLDER}" c -m "patches: ${REPO}: $(git cb): Sync as of $(git sh -s --format=%h)"

            git -C "${TARGET_FOLDER}" push
            ;;

        -a | --apply)
            git am "${TARGET_FOLDER}"/*
            ;;
    esac
); }

# Rebase a linux-next branch
function rbln() { (
    in_kernel_tree

    FIRST_HASH=$(git mfc)
    SECOND_HASH=$(git show -s --format=%H "$(git cb)")
    git rh origin/master
    git cherry-pick --gpg-sign "${FIRST_HASH}^..${SECOND_HASH}"
); }

# Rebase Raspberry Pi kernel
function rbpi() { (
    PI_SRC=${CBL_BLD:?}/rpi

    set -x

    cd "${PI_SRC}" || exit ${?}
    git ru || exit ${?}
    git rh origin/master
    PATCHES_FOLDER=${GITHUB_FOLDER}/patches/rpi-next
    FIXES=${PATCHES_FOLDER}/fixes.series
    [[ -f ${FIXES} ]] && { git am "${FIXES}" || exit ${?}; }
    git b4 ams 20210324071128.1723273-1-masahiroy@kernel.org || exit ${?}
    cat <<'EOF' | git am || exit ${?}
From 8b07b642a452185c9101f2d7105c49d7c925d4fe Mon Sep 17 00:00:00 2001
From: Nathan Chancellor <nathan@kernel.org>
Date: Wed, 10 Mar 2021 16:11:57 -0700
Subject: [PATCH 1/2] kbuild: Add macros for controlling warnings to
 compiler-clang.h

Similar to commit 8793bb7f4a9d ("kbuild: add macro for controlling
warnings to linux/compiler.h") but for clang. This allows developers to
have more local control over clang warnings.

Signed-off-by: Nathan Chancellor <nathan@kernel.org>
---
 include/linux/compiler-clang.h | 22 ++++++++++++++++++++++
 include/linux/compiler_types.h |  4 ++++
 2 files changed, 26 insertions(+)

diff --git a/include/linux/compiler-clang.h b/include/linux/compiler-clang.h
index d217c382b02d..9dc3ab51a241 100644
--- a/include/linux/compiler-clang.h
+++ b/include/linux/compiler-clang.h
@@ -61,3 +61,25 @@
 #if __has_feature(shadow_call_stack)
 # define __noscs	__attribute__((__no_sanitize__("shadow-call-stack")))
 #endif
+
+/*
+ * Turn individual warnings and errors on and off locally, depending
+ * on version.
+ */
+#define __diag_clang(version, severity, s) \
+		__diag_clang_ ## version(__diag_clang_ ## severity s)
+
+/* Severity used in pragma directives */
+#define __diag_clang_ignore	ignored
+#define __diag_clang_warn	warning
+#define __diag_clang_error	error
+
+#define __diag_str1(s)		#s
+#define __diag_str(s)		__diag_str1(s)
+#define __diag(s)		_Pragma(__diag_str(clang diagnostic s))
+
+#if CONFIG_CLANG_VERSION >= 130000
+#define __diag_clang_13(s)		__diag(s)
+#else
+#define __diag_clang_13(s)
+#endif
diff --git a/include/linux/compiler_types.h b/include/linux/compiler_types.h
index e5dd5a4ae946..a505d8a4302d 100644
--- a/include/linux/compiler_types.h
+++ b/include/linux/compiler_types.h
@@ -328,6 +328,10 @@ struct ftrace_likely_data {
 #define __diag(string)
 #endif
 
+#ifndef __diag_clang
+#define __diag_clang(version, severity, string)
+#endif
+
 #ifndef __diag_GCC
 #define __diag_GCC(version, severity, string)
 #endif
-- 
2.31.0.rc1


From e7149e7bb5ece72ff5fc4adde6751c5902c70448 Mon Sep 17 00:00:00 2001
From: Nathan Chancellor <nathan@kernel.org>
Date: Wed, 10 Mar 2021 16:15:17 -0700
Subject: [PATCH 2/2] blk-mq: Disable -Walign-mismatch in
 blk_mq_complete_send_ipi

When compiling with clang-13:

block/blk-mq.c:630:39: warning: passing 8-byte aligned argument to
32-byte aligned parameter 2 of 'smp_call_function_single_async' may
result in an unaligned pointer access [-Walign-mismatch]
                smp_call_function_single_async(cpu, &rq->csd);
                                                    ^
1 warning generated.

This was purposefully done in commit 4ccafe032005 ("block: unalign
call_single_data in struct request") and there is no real bug here.
Disable the warning using the __diag_ignore infrastructure.

Link: https://github.com/ClangBuiltLinux/linux/issues/1328
Link: https://lore.kernel.org/r/20210310182307.zzcbi5w5jrmveld4@archlinux-ax161/
Signed-off-by: Nathan Chancellor <nathan@kernel.org>
---
 block/blk-mq.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/block/blk-mq.c b/block/blk-mq.c
index 2e825a7a3606..3f738b1b748b 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -627,7 +627,10 @@ static void blk_mq_complete_send_ipi(struct request *rq)
 	list = &per_cpu(blk_cpu_done, cpu);
 	if (llist_add(&rq->ipi_list, list)) {
 		INIT_CSD(&rq->csd, __blk_mq_complete_request_remote, rq);
+		__diag_push();
+		__diag_ignore(clang, 13, "-Walign-mismatch", "There is no issue with misalignment here");
 		smp_call_function_single_async(cpu, &rq->csd);
+		__diag_pop();
 	}
 }
 
-- 
2.31.0.rc1

EOF
    for SHA in 358afb8b746d4a7ebaeeeaab7a1523895a8572c2 4564363351e2680e55edc23c7953aebd2acb4ab7; do
        git fp -1 --stdout "${SHA}" arch/arm/boot/dts/bcm2711-rpi-4-b.dts | git ap -R || exit ${?}
    done
    git ac -m "ARM: dts: bcm2711: Disable the display pipeline"
    ../pi-scripts/build.sh ARCH=arm || exit ${?}
    ../pi-scripts/build.sh ARCH=arm64 || exit ${?}
    if ! git pll --no-edit mainline master; then
        rg "<<<<<<< HEAD" && exit ${?}
        ../pi-scripts/build.sh ARCH=arm || exit ${?}
        ../pi-scripts/build.sh ARCH=arm64 || exit ${?}
        git aa
        git c || exit ${?}
    fi
    if ! git pll --no-edit sami clang-cfi; then
        rg "<<<<<<< HEAD" && exit ${?}
        ../pi-scripts/build.sh ARCH=arm || exit ${?}
        ../pi-scripts/build.sh ARCH=arm64 || exit ${?}
        git aa
        git c --no-edit || exit ${?}
    fi
    ../pi-scripts/build.sh ARCH=arm || exit ${?}
    ../pi-scripts/build.sh ARCH=arm64 || exit ${?}
); }

# Update wsl2-kernel to latest -next
function rbwk() { (
    case ${LOCATION} in
        workstation) WSL2_KERNEL=${HOME}/cbl/build/wsl2 ;;
        wsl) WSL2_KERNEL=${HOME}/src/wsl2-kernel ;;
        *) die "rbwk() is not supported by ${LOCATION}" ;;
    esac

    set -x
    cd "${WSL2_KERNEL}" || exit ${?}
    git ru || exit ${?}
    for BRANCH in clearlinux-patchset microsoft-patchset; do
        git ch "${BRANCH}" || exit ${?}
        git rb -i next/master || exit ${?}
    done
    git ch next || exit ${?}
    git rh next/master
    if ! git pll --no-edit mainline master; then
        rg "<<<<<<< HEAD" && exit ${?}
        git aa
        git c || exit ${?}
    fi
    if ! git pll --no-edit sami clang-cfi; then
        rg "<<<<<<< HEAD" && exit ${?}
        git aa
        git c || exit ${?}
    fi
    git ml --no-edit clearlinux-patchset microsoft-patchset || exit ${?}
    git cp "$(git lo --merges -1 --format=%H origin/HEAD)".."$(git sh -s --format=%H origin/HEAD)"
); }
# vi: filetype=zsh
