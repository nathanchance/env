From 1f89c32946a0b61a4e5ebedba0892e911731c00f Mon Sep 17 00:00:00 2001
From: Nathan Chancellor <nathan@kernel.org>
Date: Mon, 26 Sep 2022 09:08:36 -0700
Subject: [PATCH] thermal: Diff of v4 -> v5 of "Rework the trip points
 creation"

Signed-off-by: Nathan Chancellor <nathan@kernel.org>
---
 drivers/thermal/gov_bang_bang.c       |  8 +++++++-
 drivers/thermal/gov_fair_share.c      |  2 +-
 drivers/thermal/gov_power_allocator.c | 12 ++++++------
 drivers/thermal/gov_step_wise.c       |  2 +-
 drivers/thermal/thermal_core.c        | 10 ++++++----
 drivers/thermal/thermal_core.h        |  2 ++
 drivers/thermal/thermal_helpers.c     |  4 ++--
 drivers/thermal/thermal_netlink.c     |  2 +-
 drivers/thermal/thermal_sysfs.c       |  4 ++--
 9 files changed, 28 insertions(+), 18 deletions(-)

diff --git a/drivers/thermal/gov_bang_bang.c b/drivers/thermal/gov_bang_bang.c
index 09234f3d2fb9..f681fa10ed2d 100644
--- a/drivers/thermal/gov_bang_bang.c
+++ b/drivers/thermal/gov_bang_bang.c
@@ -17,8 +17,14 @@ static void thermal_zone_trip_update(struct thermal_zone_device *tz, int trip_id
 {
 	struct thermal_trip trip;
 	struct thermal_instance *instance;
+	int ret;
 
-	thermal_zone_get_trip(tz, trip_id, &trip);
+	ret = __thermal_zone_get_trip(tz, trip_id, &trip);
+	if (ret)
+		pr_warn_once("Failed to retrieve trip point %d\n", trip_id);
+
+	if (!trip.hysteresis)
+		pr_warn_once("Zero hysteresis value for thermal zone %s\n", tz->type);
 
 	dev_dbg(&tz->device, "Trip%d[temp=%d]:temp=%d:hyst=%d\n",
 				trip_id, trip.temperature, tz->temperature,
diff --git a/drivers/thermal/gov_fair_share.c b/drivers/thermal/gov_fair_share.c
index c515e7a52294..bca60cd21655 100644
--- a/drivers/thermal/gov_fair_share.c
+++ b/drivers/thermal/gov_fair_share.c
@@ -25,7 +25,7 @@ static int get_trip_level(struct thermal_zone_device *tz)
 	int count;
 
 	for (count = 0; count < tz->num_trips; count++) {
-		thermal_zone_get_trip(tz, count, &trip);
+		__thermal_zone_get_trip(tz, count, &trip);
 		if (tz->temperature < trip.temperature)
 			break;
 	}
diff --git a/drivers/thermal/gov_power_allocator.c b/drivers/thermal/gov_power_allocator.c
index 2ef86ced4c7c..eafb28839281 100644
--- a/drivers/thermal/gov_power_allocator.c
+++ b/drivers/thermal/gov_power_allocator.c
@@ -130,7 +130,7 @@ static void estimate_pid_constants(struct thermal_zone_device *tz,
 	int ret;
 	s32 k_i;
 
-	ret = thermal_zone_get_trip(tz, trip_switch_on, &trip);
+	ret = __thermal_zone_get_trip(tz, trip_switch_on, &trip);
 	if (!ret)
 		temperature_threshold -= trip.temperature;
 
@@ -522,7 +522,7 @@ static void get_governor_trips(struct thermal_zone_device *tz,
 		struct thermal_trip trip;
 		int ret;
 
-		ret = thermal_zone_get_trip(tz, i, &trip);
+		ret = __thermal_zone_get_trip(tz, i, &trip);
 		if (ret) {
 			dev_warn(&tz->device,
 				 "Failed to get trip point %d type: %d\n", i,
@@ -658,8 +658,8 @@ static int power_allocator_bind(struct thermal_zone_device *tz)
 	get_governor_trips(tz, params);
 
 	if (tz->num_trips > 0) {
-		ret = thermal_zone_get_trip(tz, params->trip_max_desired_temperature,
-					    &trip);
+		ret = __thermal_zone_get_trip(tz, params->trip_max_desired_temperature,
+					      &trip);
 		if (!ret)
 			estimate_pid_constants(tz, tz->tzp->sustainable_power,
 					       params->trip_switch_on,
@@ -709,7 +709,7 @@ static int power_allocator_throttle(struct thermal_zone_device *tz, int trip_id)
 	if (trip_id != params->trip_max_desired_temperature)
 		return 0;
 
-	ret = thermal_zone_get_trip(tz, params->trip_switch_on, &trip);
+	ret = __thermal_zone_get_trip(tz, params->trip_switch_on, &trip);
 	if (!ret && (tz->temperature < trip.temperature)) {
 		update = (tz->last_temperature >= trip.temperature);
 		tz->passive = 0;
@@ -720,7 +720,7 @@ static int power_allocator_throttle(struct thermal_zone_device *tz, int trip_id)
 
 	tz->passive = 1;
 
-	ret = thermal_zone_get_trip(tz, params->trip_max_desired_temperature, &trip);
+	ret = __thermal_zone_get_trip(tz, params->trip_max_desired_temperature, &trip);
 	if (ret) {
 		dev_warn(&tz->device, "Failed to get the maximum desired temperature: %d\n",
 			 ret);
diff --git a/drivers/thermal/gov_step_wise.c b/drivers/thermal/gov_step_wise.c
index 3cb16d7e65d1..31235e169c5a 100644
--- a/drivers/thermal/gov_step_wise.c
+++ b/drivers/thermal/gov_step_wise.c
@@ -103,7 +103,7 @@ static void thermal_zone_trip_update(struct thermal_zone_device *tz, int trip_id
 	bool throttle = false;
 	int old_target;
 
-	thermal_zone_get_trip(tz, trip_id, &trip);
+	__thermal_zone_get_trip(tz, trip_id, &trip);
 
 	trend = get_tz_trend(tz, trip_id);
 
diff --git a/drivers/thermal/thermal_core.c b/drivers/thermal/thermal_core.c
index 9b27211b806f..d2e6b6aed6f5 100644
--- a/drivers/thermal/thermal_core.c
+++ b/drivers/thermal/thermal_core.c
@@ -349,7 +349,7 @@ static void handle_thermal_trip(struct thermal_zone_device *tz, int trip_id)
 	if (test_bit(trip_id, &tz->trips_disabled))
 		return;
 
-	thermal_zone_get_trip(tz, trip_id, &trip);
+	__thermal_zone_get_trip(tz, trip_id, &trip);
 
 	if (tz->last_temperature != THERMAL_TEMP_INVALID) {
 		if (tz->last_temperature < trip.temperature &&
@@ -1171,8 +1171,8 @@ int thermal_zone_get_crit_temp(struct thermal_zone_device *tz, int *temp)
 }
 EXPORT_SYMBOL_GPL(thermal_zone_get_crit_temp);
 
-static int __thermal_zone_get_trip(struct thermal_zone_device *tz, int trip_id,
-				   struct thermal_trip *trip)
+int __thermal_zone_get_trip(struct thermal_zone_device *tz, int trip_id,
+			    struct thermal_trip *trip)
 {
 	int ret;
 
@@ -1188,7 +1188,9 @@ static int __thermal_zone_get_trip(struct thermal_zone_device *tz, int trip_id,
 		ret = tz->ops->get_trip_hyst(tz, trip_id, &trip->hysteresis);
 		if (ret)
 			return ret;
-	} else trip->hysteresis = 0;
+	} else {
+		trip->hysteresis = 0;
+	}
 
 	ret = tz->ops->get_trip_temp(tz, trip_id, &trip->temperature);
 	if (ret)
diff --git a/drivers/thermal/thermal_core.h b/drivers/thermal/thermal_core.h
index 4d1af11a6eb4..e9b3af6c2084 100644
--- a/drivers/thermal/thermal_core.h
+++ b/drivers/thermal/thermal_core.h
@@ -113,6 +113,8 @@ int thermal_build_list_of_policies(char *buf);
 /* Helpers */
 void thermal_zone_set_trips(struct thermal_zone_device *tz);
 void __thermal_zone_set_trips(struct thermal_zone_device *tz);
+int __thermal_zone_get_trip(struct thermal_zone_device *tz, int trip_id,
+			    struct thermal_trip *trip);
 int __thermal_zone_get_temp(struct thermal_zone_device *tz, int *temp);
 
 /* sysfs I/F */
diff --git a/drivers/thermal/thermal_helpers.c b/drivers/thermal/thermal_helpers.c
index e1264940136a..06dded36e95e 100644
--- a/drivers/thermal/thermal_helpers.c
+++ b/drivers/thermal/thermal_helpers.c
@@ -80,7 +80,7 @@ int __thermal_zone_get_temp(struct thermal_zone_device *tz, int *temp)
 
 	if (IS_ENABLED(CONFIG_THERMAL_EMULATION) && tz->emul_temperature) {
 		for (count = 0; count < tz->num_trips; count++) {
-			ret = thermal_zone_get_trip(tz, count, &trip);
+			ret = __thermal_zone_get_trip(tz, count, &trip);
 			if (!ret && trip.type == THERMAL_TRIP_CRITICAL) {
 				crit_temp = trip.temperature;
 				break;
@@ -135,7 +135,7 @@ void __thermal_zone_set_trips(struct thermal_zone_device *tz)
 	for (i = 0; i < tz->num_trips; i++) {
 		int trip_low;
 
-		ret = thermal_zone_get_trip(tz, i , &trip);
+		ret = __thermal_zone_get_trip(tz, i , &trip);
 		if (ret)
 			return;
 
diff --git a/drivers/thermal/thermal_netlink.c b/drivers/thermal/thermal_netlink.c
index 36cb2fd31e20..1d482ba708bd 100644
--- a/drivers/thermal/thermal_netlink.c
+++ b/drivers/thermal/thermal_netlink.c
@@ -472,7 +472,7 @@ static int thermal_genl_cmd_tz_get_trip(struct param *p)
 
 	for (i = 0; i < tz->num_trips; i++) {
 
-		ret = thermal_zone_get_trip(tz, i, &trip);
+		ret = __thermal_zone_get_trip(tz, i, &trip);
 		if (ret)
 			goto out_cancel_nest;
 		
diff --git a/drivers/thermal/thermal_sysfs.c b/drivers/thermal/thermal_sysfs.c
index 609b257fa107..8d7b25ab67c2 100644
--- a/drivers/thermal/thermal_sysfs.c
+++ b/drivers/thermal/thermal_sysfs.c
@@ -119,8 +119,8 @@ trip_point_temp_store(struct device *dev, struct device_attribute *attr,
 		return -EINVAL;
 
 	ret = thermal_zone_get_trip(tz, trip_id, &trip);
- 	if (ret)
- 		return ret;
+	if (ret)
+		return ret;
 
 	if (kstrtoint(buf, 10, &trip.temperature))
 		return -EINVAL;
-- 
2.37.3

