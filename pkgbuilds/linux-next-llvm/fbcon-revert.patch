diff --git b/drivers/video/fbdev/core/fbcon.c a/drivers/video/fbdev/core/fbcon.c
index 6a7d470beec7..4f9752ee9189 100644
--- b/drivers/video/fbdev/core/fbcon.c
+++ a/drivers/video/fbdev/core/fbcon.c
@@ -86,6 +86,10 @@
  * - fbcon state itself is protected by the console_lock, and the code does a
  *   pretty good job at making sure that lock is held everywhere it's needed.
  *
+ * - access to the registered_fb array is entirely unprotected. This should use
+ *   proper object lifetime handling, i.e. get/put_fb_info. This also means
+ *   switching from indices to proper pointers for fb_info everywhere.
+ *
  * - fbcon doesn't bother with fb_lock/unlock at all. This is buggy, since it
  *   means concurrent access to the same fbdev from both fbcon and userspace
  *   will blow up. To fix this all fbcon calls from fbmem.c need to be moved out
@@ -103,13 +107,6 @@ enum {
 
 static struct fbcon_display fb_display[MAX_NR_CONSOLES];
 
-struct fb_info *fbcon_registered_fb[FB_MAX];
-int fbcon_num_registered_fb;
-
-#define fbcon_for_each_registered_fb(i)		\
-	for (i = 0; WARN_CONSOLE_UNLOCKED(), i < FB_MAX; i++)		\
-		if (!fbcon_registered_fb[i]) {} else
-
 static signed char con2fb_map[MAX_NR_CONSOLES];
 static signed char con2fb_map_boot[MAX_NR_CONSOLES];
 
@@ -117,7 +114,12 @@ static struct fb_info *fbcon_info_from_console(int console)
 {
 	WARN_CONSOLE_UNLOCKED();
 
-	return fbcon_registered_fb[con2fb_map[console]];
+	/*
+	 * Note that only con2fb_map is protected by the console lock,
+	 * registered_fb is protected by a separate mutex. This lookup can
+	 * therefore race.
+	 */
+	return registered_fb[con2fb_map[console]];
 }
 
 static int logo_lines;
@@ -185,6 +187,7 @@ static void fbcon_redraw_move(struct vc_data *vc, struct fbcon_display *p,
 			      int line, int count, int dy);
 static void fbcon_modechanged(struct fb_info *info);
 static void fbcon_set_all_vcs(struct fb_info *info);
+static void fbcon_exit(void);
 
 static struct device *fbcon_device;
 
@@ -516,7 +519,7 @@ static int do_fbcon_takeover(int show_logo)
 {
 	int err, i;
 
-	if (!fbcon_num_registered_fb)
+	if (!num_registered_fb)
 		return -ENODEV;
 
 	if (!show_logo)
@@ -687,18 +690,6 @@ static void fbcon_release(struct fb_info *info)
 	unlock_fb_info(info);
 
 	module_put(info->fbops->owner);
-
-	if (info->fbcon_par) {
-		struct fbcon_ops *ops = info->fbcon_par;
-
-		fbcon_del_cursor_work(info);
-		kfree(ops->cursor_state.mask);
-		kfree(ops->cursor_data);
-		kfree(ops->cursor_src);
-		kfree(ops->fontbuffer);
-		kfree(info->fbcon_par);
-		info->fbcon_par = NULL;
-	}
 }
 
 static int fbcon_open(struct fb_info *info)
@@ -749,10 +740,18 @@ static int con2fb_acquire_newinfo(struct vc_data *vc, struct fb_info *info,
 static void con2fb_release_oldinfo(struct vc_data *vc, struct fb_info *oldinfo,
 				   struct fb_info *newinfo)
 {
+	struct fbcon_ops *ops = oldinfo->fbcon_par;
 	int ret;
 
 	fbcon_release(oldinfo);
 
+	fbcon_del_cursor_work(oldinfo);
+	kfree(ops->cursor_state.mask);
+	kfree(ops->cursor_data);
+	kfree(ops->cursor_src);
+	kfree(ops->fontbuffer);
+	kfree(oldinfo->fbcon_par);
+	oldinfo->fbcon_par = NULL;
 	/*
 	  If oldinfo and newinfo are driving the same hardware,
 	  the fb_release() method of oldinfo may attempt to
@@ -819,7 +818,7 @@ static int set_con2fb_map(int unit, int newidx, int user)
 {
 	struct vc_data *vc = vc_cons[unit].d;
 	int oldidx = con2fb_map[unit];
-	struct fb_info *info = fbcon_registered_fb[newidx];
+	struct fb_info *info = registered_fb[newidx];
 	struct fb_info *oldinfo = NULL;
 	int found, err = 0, show_logo;
 
@@ -837,7 +836,7 @@ static int set_con2fb_map(int unit, int newidx, int user)
 	}
 
 	if (oldidx != -1)
-		oldinfo = fbcon_registered_fb[oldidx];
+		oldinfo = registered_fb[oldidx];
 
 	found = search_fb_in_map(newidx);
 
@@ -929,13 +928,13 @@ static const char *fbcon_startup(void)
 	 *  If num_registered_fb is zero, this is a call for the dummy part.
 	 *  The frame buffer devices weren't initialized yet.
 	 */
-	if (!fbcon_num_registered_fb || info_idx == -1)
+	if (!num_registered_fb || info_idx == -1)
 		return display_desc;
 	/*
 	 * Instead of blindly using registered_fb[0], we use info_idx, set by
 	 * fbcon_fb_registered();
 	 */
-	info = fbcon_registered_fb[info_idx];
+	info = registered_fb[info_idx];
 	if (!info)
 		return NULL;
 	
@@ -1143,27 +1142,6 @@ static void fbcon_free_font(struct fbcon_display *p, bool freefont)
 
 static void set_vc_hi_font(struct vc_data *vc, bool set);
 
-static void fbcon_release_all(void)
-{
-	struct fb_info *info;
-	int i, j, mapped;
-
-	fbcon_for_each_registered_fb(i) {
-		mapped = 0;
-		info = fbcon_registered_fb[i];
-
-		for (j = first_fb_vc; j <= last_fb_vc; j++) {
-			if (con2fb_map[j] == i) {
-				mapped = 1;
-				con2fb_map[j] = -1;
-			}
-		}
-
-		if (mapped)
-			fbcon_release(info);
-	}
-}
-
 static void fbcon_deinit(struct vc_data *vc)
 {
 	struct fbcon_display *p = &fb_display[vc->vc_num];
@@ -1177,7 +1155,7 @@ static void fbcon_deinit(struct vc_data *vc)
 	if (idx == -1)
 		goto finished;
 
-	info = fbcon_registered_fb[idx];
+	info = registered_fb[idx];
 
 	if (!info)
 		goto finished;
@@ -1203,7 +1181,7 @@ static void fbcon_deinit(struct vc_data *vc)
 		set_vc_hi_font(vc, false);
 
 	if (!con_is_bound(&fb_con))
-		fbcon_release_all();
+		fbcon_exit();
 
 	if (vc->vc_num == logo_shown)
 		logo_shown = FBCON_LOGO_CANSHOW;
@@ -2096,9 +2074,9 @@ static int fbcon_switch(struct vc_data *vc)
 	 *
 	 * info->currcon = vc->vc_num;
 	 */
-	fbcon_for_each_registered_fb(i) {
-		if (fbcon_registered_fb[i]->fbcon_par) {
-			struct fbcon_ops *o = fbcon_registered_fb[i]->fbcon_par;
+	for_each_registered_fb(i) {
+		if (registered_fb[i]->fbcon_par) {
+			struct fbcon_ops *o = registered_fb[i]->fbcon_par;
 
 			o->currcon = vc->vc_num;
 		}
@@ -2743,7 +2721,7 @@ int fbcon_mode_deleted(struct fb_info *info,
 		j = con2fb_map[i];
 		if (j == -1)
 			continue;
-		fb_info = fbcon_registered_fb[j];
+		fb_info = registered_fb[j];
 		if (fb_info != info)
 			continue;
 		p = &fb_display[i];
@@ -2778,12 +2756,10 @@ void fbcon_fb_unbind(struct fb_info *info)
 	int i, new_idx = -1;
 	int idx = info->node;
 
-	console_lock();
+	WARN_CONSOLE_UNLOCKED();
 
-	if (!fbcon_has_console_bind) {
-		console_unlock();
+	if (!fbcon_has_console_bind)
 		return;
-	}
 
 	for (i = first_fb_vc; i <= last_fb_vc; i++) {
 		if (con2fb_map[i] != idx &&
@@ -2799,7 +2775,7 @@ void fbcon_fb_unbind(struct fb_info *info)
 				set_con2fb_map(i, new_idx, 0);
 		}
 	} else {
-		struct fb_info *info = fbcon_registered_fb[idx];
+		struct fb_info *info = registered_fb[idx];
 
 		/* This is sort of like set_con2fb_map, except it maps
 		 * the consoles to no device and then releases the
@@ -2818,8 +2794,6 @@ void fbcon_fb_unbind(struct fb_info *info)
 		}
 		fbcon_unbind();
 	}
-
-	console_unlock();
 }
 
 /* called with console_lock held */
@@ -2827,15 +2801,10 @@ void fbcon_fb_unregistered(struct fb_info *info)
 {
 	int i, idx;
 
-	console_lock();
-
-	fbcon_registered_fb[info->node] = NULL;
-	fbcon_num_registered_fb--;
+	WARN_CONSOLE_UNLOCKED();
 
-	if (deferred_takeover) {
-		console_unlock();
+	if (deferred_takeover)
 		return;
-	}
 
 	idx = info->node;
 	for (i = first_fb_vc; i <= last_fb_vc; i++) {
@@ -2846,7 +2815,7 @@ void fbcon_fb_unregistered(struct fb_info *info)
 	if (idx == info_idx) {
 		info_idx = -1;
 
-		fbcon_for_each_registered_fb(i) {
+		for_each_registered_fb(i) {
 			info_idx = i;
 			break;
 		}
@@ -2862,9 +2831,8 @@ void fbcon_fb_unregistered(struct fb_info *info)
 	if (primary_device == idx)
 		primary_device = -1;
 
-	if (!fbcon_num_registered_fb)
+	if (!num_registered_fb)
 		do_unregister_con_driver(&fb_con);
-	console_unlock();
 }
 
 void fbcon_remap_all(struct fb_info *info)
@@ -2922,30 +2890,19 @@ static inline void fbcon_select_primary(struct fb_info *info)
 }
 #endif /* CONFIG_FRAMEBUFFER_DETECT_PRIMARY */
 
-static bool lockless_register_fb;
-module_param_named_unsafe(lockless_register_fb, lockless_register_fb, bool, 0400);
-MODULE_PARM_DESC(lockless_register_fb,
-	"Lockless framebuffer registration for debugging [default=off]");
-
 /* called with console_lock held */
 int fbcon_fb_registered(struct fb_info *info)
 {
 	int ret = 0, i, idx;
 
-	if (!lockless_register_fb)
-		console_lock();
-	else
-		atomic_inc(&ignore_console_lock_warning);
-
-	fbcon_registered_fb[info->node] = info;
-	fbcon_num_registered_fb++;
+	WARN_CONSOLE_UNLOCKED();
 
 	idx = info->node;
 	fbcon_select_primary(info);
 
 	if (deferred_takeover) {
 		pr_info("fbcon: Deferring console take-over\n");
-		goto out;
+		return 0;
 	}
 
 	if (info_idx == -1) {
@@ -2965,12 +2922,6 @@ int fbcon_fb_registered(struct fb_info *info)
 		}
 	}
 
-out:
-	if (!lockless_register_fb)
-		console_unlock();
-	else
-		atomic_dec(&ignore_console_lock_warning);
-
 	return ret;
 }
 
@@ -3059,9 +3010,9 @@ int fbcon_set_con2fb_map_ioctl(void __user *argp)
 		return -EINVAL;
 	if (con2fb.framebuffer >= FB_MAX)
 		return -EINVAL;
-	if (!fbcon_registered_fb[con2fb.framebuffer])
+	if (!registered_fb[con2fb.framebuffer])
 		request_module("fb%d", con2fb.framebuffer);
-	if (!fbcon_registered_fb[con2fb.framebuffer]) {
+	if (!registered_fb[con2fb.framebuffer]) {
 		return -EINVAL;
 	}
 
@@ -3128,10 +3079,10 @@ static ssize_t store_rotate(struct device *device,
 	console_lock();
 	idx = con2fb_map[fg_console];
 
-	if (idx == -1 || fbcon_registered_fb[idx] == NULL)
+	if (idx == -1 || registered_fb[idx] == NULL)
 		goto err;
 
-	info = fbcon_registered_fb[idx];
+	info = registered_fb[idx];
 	rotate = simple_strtoul(buf, last, 0);
 	fbcon_rotate(info, rotate);
 err:
@@ -3150,10 +3101,10 @@ static ssize_t store_rotate_all(struct device *device,
 	console_lock();
 	idx = con2fb_map[fg_console];
 
-	if (idx == -1 || fbcon_registered_fb[idx] == NULL)
+	if (idx == -1 || registered_fb[idx] == NULL)
 		goto err;
 
-	info = fbcon_registered_fb[idx];
+	info = registered_fb[idx];
 	rotate = simple_strtoul(buf, last, 0);
 	fbcon_rotate_all(info, rotate);
 err:
@@ -3170,10 +3121,10 @@ static ssize_t show_rotate(struct device *device,
 	console_lock();
 	idx = con2fb_map[fg_console];
 
-	if (idx == -1 || fbcon_registered_fb[idx] == NULL)
+	if (idx == -1 || registered_fb[idx] == NULL)
 		goto err;
 
-	info = fbcon_registered_fb[idx];
+	info = registered_fb[idx];
 	rotate = fbcon_get_rotate(info);
 err:
 	console_unlock();
@@ -3190,10 +3141,10 @@ static ssize_t show_cursor_blink(struct device *device,
 	console_lock();
 	idx = con2fb_map[fg_console];
 
-	if (idx == -1 || fbcon_registered_fb[idx] == NULL)
+	if (idx == -1 || registered_fb[idx] == NULL)
 		goto err;
 
-	info = fbcon_registered_fb[idx];
+	info = registered_fb[idx];
 	ops = info->fbcon_par;
 
 	if (!ops)
@@ -3216,10 +3167,10 @@ static ssize_t store_cursor_blink(struct device *device,
 	console_lock();
 	idx = con2fb_map[fg_console];
 
-	if (idx == -1 || fbcon_registered_fb[idx] == NULL)
+	if (idx == -1 || registered_fb[idx] == NULL)
 		goto err;
 
-	info = fbcon_registered_fb[idx];
+	info = registered_fb[idx];
 
 	if (!info->fbcon_par)
 		goto err;
@@ -3279,8 +3230,8 @@ static void fbcon_register_existing_fbs(struct work_struct *work)
 	deferred_takeover = false;
 	logo_shown = FBCON_LOGO_DONTSHOW;
 
-	fbcon_for_each_registered_fb(i)
-		fbcon_fb_registered(fbcon_registered_fb[i]);
+	for_each_registered_fb(i)
+		fbcon_fb_registered(registered_fb[i]);
 
 	console_unlock();
 }
@@ -3320,6 +3271,45 @@ static void fbcon_start(void)
 #endif
 }
 
+static void fbcon_exit(void)
+{
+	struct fb_info *info;
+	int i, j, mapped;
+
+#ifdef CONFIG_FRAMEBUFFER_CONSOLE_DEFERRED_TAKEOVER
+	if (deferred_takeover) {
+		dummycon_unregister_output_notifier(&fbcon_output_nb);
+		deferred_takeover = false;
+	}
+#endif
+
+	for_each_registered_fb(i) {
+		mapped = 0;
+		info = registered_fb[i];
+
+		for (j = first_fb_vc; j <= last_fb_vc; j++) {
+			if (con2fb_map[j] == i) {
+				mapped = 1;
+				con2fb_map[j] = -1;
+			}
+		}
+
+		if (mapped) {
+			if (info->fbcon_par) {
+				struct fbcon_ops *ops = info->fbcon_par;
+
+				fbcon_del_cursor_work(info);
+				kfree(ops->cursor_src);
+				kfree(ops->cursor_state.mask);
+				kfree(info->fbcon_par);
+				info->fbcon_par = NULL;
+			}
+
+			fbcon_release(info);
+		}
+	}
+}
+
 void __init fb_console_init(void)
 {
 	int i;
@@ -3359,19 +3349,10 @@ static void __exit fbcon_deinit_device(void)
 
 void __exit fb_console_exit(void)
 {
-#ifdef CONFIG_FRAMEBUFFER_CONSOLE_DEFERRED_TAKEOVER
-	console_lock();
-	if (deferred_takeover)
-		dummycon_unregister_output_notifier(&fbcon_output_nb);
-	console_unlock();
-
-	cancel_work_sync(&fbcon_deferred_takeover_work);
-#endif
-
 	console_lock();
 	fbcon_deinit_device();
 	device_destroy(fb_class, MKDEV(0, 0));
-
+	fbcon_exit();
 	do_unregister_con_driver(&fb_con);
 	console_unlock();
 }	
diff --git b/drivers/video/fbdev/core/fbmem.c a/drivers/video/fbdev/core/fbmem.c
index bdd00d381bbc..0e68d9456bc2 100644
--- b/drivers/video/fbdev/core/fbmem.c
+++ a/drivers/video/fbdev/core/fbmem.c
@@ -1590,9 +1590,14 @@ static void do_remove_conflicting_framebuffers(struct apertures_struct *a,
 	}
 }
 
+static bool lockless_register_fb;
+module_param_named_unsafe(lockless_register_fb, lockless_register_fb, bool, 0400);
+MODULE_PARM_DESC(lockless_register_fb,
+	"Lockless framebuffer registration for debugging [default=off]");
+
 static int do_register_framebuffer(struct fb_info *fb_info)
 {
-	int i;
+	int i, ret;
 	struct fb_videomode mode;
 
 	if (fb_check_foreignness(fb_info))
@@ -1661,7 +1666,17 @@ static int do_register_framebuffer(struct fb_info *fb_info)
 	}
 #endif
 
-	return fbcon_fb_registered(fb_info);
+	if (!lockless_register_fb)
+		console_lock();
+	else
+		atomic_inc(&ignore_console_lock_warning);
+	ret = fbcon_fb_registered(fb_info);
+
+	if (!lockless_register_fb)
+		console_unlock();
+	else
+		atomic_dec(&ignore_console_lock_warning);
+	return ret;
 }
 
 static void unbind_console(struct fb_info *fb_info)
@@ -1671,7 +1686,9 @@ static void unbind_console(struct fb_info *fb_info)
 	if (WARN_ON(i < 0 || i >= FB_MAX || registered_fb[i] != fb_info))
 		return;
 
+	console_lock();
 	fbcon_fb_unbind(fb_info);
+	console_unlock();
 }
 
 static void unlink_framebuffer(struct fb_info *fb_info)
@@ -1714,7 +1731,9 @@ static void do_unregister_framebuffer(struct fb_info *fb_info)
 		fb_notifier_call_chain(FB_EVENT_FB_UNREGISTERED, &event);
 	}
 #endif
+	console_lock();
 	fbcon_fb_unregistered(fb_info);
+	console_unlock();
 
 	/* this may free fb info */
 	put_fb_info(fb_info);
