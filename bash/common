#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright (C) 2021-2022 Nathan Chancellor

function assert_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "$0 requires root."
        exit 1
    fi
}

function chsh_fish() {
    fish_path=$(readlink -f "$(command -v fish)")

    if [[ ! -x $fish_path ]]; then
        print_error "fish not installed?"
        exit 1
    fi

    if ! grep -q "$fish_path" /etc/shells; then
        print_error "$fish_path not in /etc/shells?"
        exit 1
    fi

    chsh -s "$fish_path" "$user_name" || exit
}

function clone_env() {
    env_folder=/tmp/env
    if [[ ! -d $env_folder ]]; then
        git clone https://github.com/nathanchance/env "$env_folder" || exit
    fi
    git -C "$env_folder" pull -qr || exit
    chown -R "$user_name:$user_name" "$env_folder" || exit
}

function is_installed() {
    if command -v dnf &>/dev/null; then
        dnf list --installed "${@:?}" &>/dev/null
    elif command -v pacman &>/dev/null; then
        pacman -Q "${@:?}" &>/dev/null
    else
        print_error "is_installed not implemented for current package manager."
        exit 1
    fi
}

function is_virtual_machine() {
    case "$(uname -n)" in
        hyperv | qemu | vmware) return 0 ;;
        *) return 1 ;;
    esac
}

function parse_parameters() {
    while (($#)); do
        case $1 in
            -r | --root-password)
                shift
                # This script should be sourced, where this variable will be used.
                # shellcheck disable=SC2034
                root_pass=$1
                ;;

            -u | --user-password)
                shift
                # This script should be sourced, where this variable will be used.
                # shellcheck disable=SC2034
                user_pass=$1
                ;;

            -U | --user-name)
                shift
                user_name=$1
                ;;
        esac
        shift
    done
}

function print_error() {
    printf '\n%bERROR: %s%b\n\n' '\033[01;31m' "$1" '\033[0m'
}

function podman_setup() {
    echo "${user_name:?}:100000:65536" | tee /etc/subgid /etc/subuid
    [[ -f /etc/containers/registries.conf ]] || cat <<EOF | tee /etc/containers/registries.conf
[registries.search]
registries = ['docker.io', 'ghcr.io', 'quay.io']
EOF
}

function remove_if_installed() {
    # Do not return an error if the package is not installed
    is_installed "$@" || return 0

    if command -v dnf &>/dev/null; then
        dnf remove -y "$@"
    elif command -v pacman &>/dev/null; then
        pacman -R --noconfirm "$@"
    else
        print_error "is_installed not implemented for current package manager."
        exit 1
    fi
}

function set_date_time() {
    if ! $wsl; then
        timedatectl set-timezone America/Phoenix
    fi
}

function set_global_variables() {
    uname -n | grep -Pq "[a|c|f|g|m|n|s|t|x]{1}[1-3]{1}-.*" && equinix=true
    [[ $(uname -n) = "honeycomb" ]] && honeycomb=true
    [[ $(uname -n) = "raspberrypi" ]] && user_name=pi
    uname -r | grep -iq microsoft && wsl=true

    [[ -z $equinix ]] && equinix=false
    [[ -z $honeycomb ]] && honeycomb=false
    [[ -z $user_name ]] && user_name=nathan
    [[ -z $wsl ]] && wsl=false
}

function setup_initial_fish_config() {
    # Check that fish 3.4.0 or newer is available, which is needed for env to work
    # shellcheck disable=SC2016
    fish_version=$(fish -c 'echo $version' | sed -e 's;-.*$;;g' -e 's;\.;;g')
    if [[ $fish_version -lt 340 ]]; then
        print_error "$(fish --version) is too old!"
        exit 1
    fi

    fish_cfg=/home/$user_name/.config/fish/config.fish
    if [[ ! -L $fish_cfg ]]; then
        mkdir -p "${fish_cfg%/*}"
        touch "$fish_cfg"

        cat <<'EOF' >"$fish_cfg"
# Start an ssh-agent
if not set -q SSH_AUTH_SOCK
    eval (ssh-agent -c)
end

# If we are in a login shell...
status is-login
# or Konsole, which does not use login shells by default...
or set -q KONSOLE_VERSION
# and we are not already in a tmux environment...
and not set -q TMUX
# and we have it installed,
and command -q tmux
# attempt to attach to a session named "main" while detaching everyone
# else or create a new session if one does not already exist
and tmux new-session -AD -s main

# Set up user environment wrapper
function env_setup
    if not set -q TMUX
        printf '\n%bERROR: %s%b\n\n' '\033[01;31m' 'env_setup needs to be run in tmux.' '\033[0m'
        return 1
    end

    if not test -d /tmp/env
        git -C /tmp clone -q https://github.com/nathanchance/env
    end
    git -C /tmp/env pull -qr

    curl -LSs https://git.io/fisher | source
    and fisher install jorgebucaran/fisher 1>/dev/null
    and fisher install /tmp/env/fish 1>/dev/null
    and user_setup
end
EOF
    fi

    # Make sure permissions of newly created folder are not messed up
    chown -R "$user_name:$user_name" /home/"$user_name"/.config
}

function setup_libvirt_common() {
    # Add user to libvirt group for rootless access to system sessions.
    usermod -aG libvirt "$user_name" || exit

    # Enable libvirtd systemd service to ensure it is brought up on restart.
    systemctl enable --now libvirtd.service || exit

    # Make the default network come up automatically on restart.
    virsh net-autostart default || exit

    # Start network if it is not already started
    if virsh net-info default | grep -q "Active:.*no"; then
        virsh net-start default || exit
    fi
}

function setup_sudo_symlink() {
    sudo_prefix=${PREFIX:-/usr/local}/stow/sudo
    sudo_bin=$sudo_prefix/bin/sudo
    mkdir -p "${sudo_bin%/*}"
    ln -frsv "$(command -v doas)" "$sudo_bin"
    stow -d "${sudo_prefix%/*}" -R "${sudo_prefix##*/}" -v
}

function user_exists() {
    getent passwd "$@"
}
