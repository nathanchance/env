#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright (C) 2021-2022 Nathan Chancellor

bash_root=$(dirname "$0")

# Add common functions
# shellcheck disable=SC1091
source "$bash_root"/common || exit

function reality_check() {
    assert_root

    # Certain Arch Linux installs will be set up with archinstall, which sets
    # up the user account/password and root password, so we do not need to do
    # anything here
    if ! user_exists "${user_name:?}"; then
        : "${root_pass:?}" "${user_pass:?}"

        # Remove the root password so that all commands that would normally
        # require a root password are non-interactive
        passwd -d root
    fi
}

function pacman_settings() {
    # Update /etc/{makepkg,pacman}.conf if necessary
    [[ -f /etc/makepkg.conf.pacnew ]] && mv -v /etc/makepkg.conf{.pacnew,}
    [[ -f /etc/pacman.conf.pacnew ]] && mv -v /etc/pacman.conf{.pacnew,}

    # Enable colors for pacman
    sed -i 's/^#Color/Color/g' /etc/pacman.conf

    # Enable parallel downloads
    sed -i 's/^#ParallelDownloads = 5/ParallelDownloads = 7/g' /etc/pacman.conf

    # Show verbose package information
    sed -i 's/^#VerbosePkgLists/VerbosePkgLists/g' /etc/pacman.conf

    # My personal repo of packages
    grep -Fq "[nathan]" /etc/pacman.conf || cat <<'EOF' >>/etc/pacman.conf

[nathan]
SigLevel = Optional TrustAll
Server = https://raw.githubusercontent.com/nathanchance/arch-repo/main/$arch
EOF
}

function pacman_key_setup() {
    pacman-key --init || exit
    pacman-key --populate archlinux || exit
}

function pacman_update() {
    pacman -Syyu --noconfirm || exit
}

function remove_fakeroot_tcp() {
    sed -i 's/IgnorePkg   = fakeroot/#IgnorePkg   =/g' /etc/pacman.conf
    remove_if_installed fakeroot-tcp || exit
}

function add_ignorepkg() {
    # Handle IgnorePkg as necessary
    # sed -i 's/#IgnorePkg   =/IgnorePkg    =/g' /etc/pacman.conf
    :
}

function install_pkgs() {
    packages=(
        # Administration tools
        btop
        iputils
        neofetch
        reflector

        # arc
        php

        # b4
        b4
        python-dkim
        patatt

        # Container tools
        aardvark-dns
        buildah
        catatonit
        distrobox
        netavark
        podman

        # continuous-integration2 (generate.sh)
        python-yaml

        # debian.sh from boot-utils
        debootstrap

        # Development tools
        dos2unix
        hyperfine
        patch
        tuxmake
        vim{,-spell-en}

        # Disk management utilities
        nfs-utils
        nvme-cli
        parted
        smartmontools

        # Downloading and extracting utilities
        ca-certificates
        curl
        unzip
        wget

        # Email
        mutt

        # env
        fish
        fzf
        hugo
        jq
        shfmt
        stow
        tmux{,p}
        zoxide

        # git
        git{,-delta}
        github-cli
        perl-authen-sasl
        perl-mime-tools
        perl-net-smtp-ssl
        repo

        # Miscellaneous
        libxkbcommon
        lm_sensors
        man-db
        which

        # Nicer versions of certain GNU utilities
        bat{,-extras}
        diskus
        duf
        dust
        exa
        fd
        ripgrep

        # Package management
        pacman-contrib

        # Remote work
        mosh
        openssh
    )

    # This variable is assigned in bash/common
    # shellcheck disable=SC2154
    if ! $wsl; then
        packages+=(modprobed-db)

        if [[ -n $DISPLAY ]]; then
            packages+=(
                # Chat applications
                discord
                telegram-desktop

                # Fonts
                cantarell-fonts
                ttc-iosevka-ss08

                # Streaming
                obs-studio

                # Web browsing
                firefox

                # Video viewing
                vlc
            )
        fi

        # https://wiki.archlinux.org/title/VMware/Install_Arch_Linux_as_a_guest
        if [[ $(uname -n) = "vmware" ]]; then
            packages+=(
                # All of these are needed for autofit
                gtkmm
                gtk2
                open-vm-tools
            )
        fi

        # Install libvirt and virt-install for easy management of VMs on
        # Equinix Metal servers; iptables-nft is also needed for networking but
        # that will be installed later to avoid potential issues with replacing
        # iptables.
        # shellcheck disable=SC2154
        if $equinix; then
            packages+=(
                dmidecode
                dnsmasq
                libvirt
                qemu-desktop
                virt-install
            )
        fi

        if is_virtual_machine; then
            packages+=(devtools)
        else
            packages+=(tailscale)
        fi
    fi

    pacman -S --needed --noconfirm "${packages[@]}" || exit

    # Reinstall shadow to fix permissions with newuidmap
    pacman -S --noconfirm shadow

    # Set the capability flag on ping in WSL to fix pinging without root
    $wsl && setcap cap_net_raw+ep /usr/bin/ping
}

function setup_doas() {
    # sudo is a little bit more functional. Keep it in virtual machines.
    is_virtual_machine && return 0

    pacman -S --noconfirm opendoas || exit

    cat <<EOF >/etc/doas.conf
# Allow me to be root for 5 minutes at a time
permit persist ${user_name} as root
# Allow me to update or install packages without a password
permit nopass ${user_name} cmd pacman
# Do not require root to put in a password (makes no sense)
permit nopass root
EOF

    cat <<EOF >/etc/pam.d/doas
#%PAM-1.0
auth        include     system-auth
account     include     system-auth
session     include     system-auth
EOF

    remove_if_installed sudo || exit
    pacman -S --noconfirm opendoas-sudo || exit
}

function setup_user() {
    if user_exists "$user_name"; then
        chsh_fish
        usermod -aG uucp "$user_name"
    else
        useradd -G wheel,uucp -m -s "$(readlink -f "$(command -v fish)")" "$user_name"
        echo "$user_name:$user_pass" | chpasswd
    fi
}

function vmware_adjustments() {
    if [[ $(uname -n) = "vmware" ]]; then
        # https://wiki.archlinux.org/title/VMware/Install_Arch_Linux_as_a_guest#In-kernel_drivers
        sed -i 's;MODULES=();MODULES=(vsock vmw_vsock_vmci_transport vmw_balloon vmw_vmci vmwgfx);g' /etc/mkinitcpio.conf
        mkinitcpio -P

        # https://wiki.archlinux.org/title/VMware/Install_Arch_Linux_as_a_guest#Installation
        systemctl enable vmtoolsd.service
        systemctl enable vmware-vmblock-fuse.service
    fi
}

function setup_libvirt() {
    is_installed libvirt || return 0

    # The default network requires iptables-nft but iptables is installed by
    # default due to systemd. Replace iptables with iptables-nft
    # non-interactively:
    # https://unix.stackexchange.com/questions/274727/how-to-force-pacman-to-answer-yes-to-all-questions
    pacman -S --noconfirm --ask 4 iptables-nft || exit

    setup_libvirt_common

    # For domains with KVM to autostart, the kvm_<vendor> module needs to be
    # loaded during init.
    if grep -q svm /proc/cpuinfo; then
        sed -i 's;MODULES=();MODULES=(kvm_amd);g' /etc/mkinitcpio.conf
    elif grep -q vmx /proc/cpuinfo; then
        sed -i 's;MODULES=();MODULES=(kvm_intel);g' /etc/mkinitcpio.conf
    fi
}

function wsl_tmpfs() {
    if $wsl; then
        # Make /tmp a true tmpfs, needed for podman and avoiding stale sockets after a reboot
        printf "tmpfs\t/tmp\ttmpfs\tdefaults\t0\t0\n" | tee -a /etc/fstab
    fi
}

function enable_reflector() {
    if ! $wsl; then
        cat <<'EOF' >/etc/xdg/reflector/reflector.conf
--country "United States"
--latest 15
--protocol https
--save /etc/pacman.d/mirrorlist
--sort rate
EOF
        systemctl enable --now reflector.{service,timer}
    fi
}

function enable_ssh() {
    if ! $wsl; then
        sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin prohibit-password/g' /etc/ssh/sshd_config
        systemctl enable --now sshd.service
    fi
}

function enable_tailscale() {
    if is_installed tailscale; then
        systemctl enable --now tailscaled
    fi
}

function fix_lightdm() {
    if is_installed lightdm; then
        # https://wiki.archlinux.org/title/LightDM#LightDM_does_not_appear_or_monitor_only_displays_TTY_output
        sed -i 's/#logind-check-graphical=false/logind-check-graphical=true/g' /etc/lightdm/lightdm.conf
    fi
}

# For archinstall, which causes ^M in /etc/fstab
function fix_fstab() {
    dos2unix /etc/fstab
}

parse_parameters "$@"
set_global_variables
reality_check
pacman_settings
pacman_key_setup
pacman_update
remove_fakeroot_tcp
add_ignorepkg
install_pkgs
setup_doas
setup_user
clone_env
podman_setup
vmware_adjustments
setup_libvirt
wsl_tmpfs
enable_reflector
enable_ssh
enable_tailscale
fix_lightdm
fix_fstab
set_date_time
setup_initial_fish_config
