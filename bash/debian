#!/usr/bin/env bash
# shellcheck disable=SC1091
# SPDX-License-Identifier: MIT
# Copyright (C) 2021-2022 Nathan Chancellor

bash_root=$(dirname "$0")
dpkg_arch=$(dpkg --print-architecture)

# Add common functions
source "$bash_root"/common || exit

# Source os-release file for version variables
source /usr/lib/os-release || exit

function reality_check() {
    assert_root

    : "${root_pass:?}" "${user_pass:?}"

    # This setup script only supports Debian 11
    case ${VERSION_CODENAME:?} in
        bullseye) ;;
        *)
            print_error "This script requires Debian 11"
            exit 1
            ;;
    esac
}

function set_apt_variables() {
    export APT_LISTCHANGES_FRONTEND=none
    export DEBIAN_FRONTEND=noninteractive
    export NEEDRESTART_SUSPEND=true
}

function install_initial_packages() {
    apt update -qq || exit
    apt install -y --no-install-recommends \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg || exit
}

function setup_docker_repo() {
    local docker_gpg_key=/etc/apt/trusted.gpg.d/docker.gpg

    curl -fLSs https://download.docker.com/linux/debian/gpg | gpg --dearmor | dd of=$docker_gpg_key
    echo "deb [arch=$dpkg_arch signed-by=$docker_gpg_key] https://download.docker.com/linux/debian $VERSION_CODENAME stable" | tee /etc/apt/sources.list.d/docker.list || exit
}

function setup_fish_repo() {
    curl -fLSs https://download.opensuse.org/repositories/shells:fish:release:3/Debian_"${VERSION_ID:?}"/Release.key | gpg --dearmor | dd of=/etc/apt/trusted.gpg.d/shells_fish_release_3.gpg || exit
    echo "deb http://download.opensuse.org/repositories/shells:/fish:/release:/3/Debian_$VERSION_ID/ /" | tee /etc/apt/sources.list.d/shells:fish:release:3.list || exit
}

function setup_gh_repo() {
    local gh_gpg_key=/etc/apt/trusted.gpg.d/githubcli-archive-keyring.gpg

    curl -fLSs https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=$gh_gpg_key || exit
    echo "deb [arch=$dpkg_arch signed-by=$gh_gpg_key] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list || exit
}

function setup_tailscale_repo() {
    curl -fLSs https://pkgs.tailscale.com/stable/raspbian/bullseye.noarmor.gpg | dd of=/usr/share/keyrings/tailscale-archive-keyring.gpg || exit
    curl -fLSs https://pkgs.tailscale.com/stable/raspbian/bullseye.tailscale-keyring.list | tee /etc/apt/sources.list.d/tailscale.list || exit
}

function install_packages() {
    packages=(
        # arc
        php{,-curl}

        # b4
        python3{,-{dkim,requests}}

        # /dev/kvm
        qemu-system-arm

        # doas
        libpam0g

        # Docker
        containerd.io
        docker-ce
        docker-ce-cli
        docker-compose-plugin

        # Downloading/extracting utilities
        ca-certificates
        curl
        unzip
        zip
        zstd

        # email
        mutt

        # env
        fish
        jq
        neofetch
        python3-pip
        ripgrep
        stow
        tmux
        vim

        # git
        gh
        git
        git-email
        libauthen-sasl-perl
        libemail-valid-perl
        libio-socket-ssl-perl
        libnet-smtp-ssl-perl

        # Miscellaneous
        file
        locales

        # Remote work
        mosh
        ssh
        tailscale

        # repo
        python-is-python3
    )

    apt_args=(
        -o Dpkg::Options::='--force-confdef'
        -o Dpkg::Options::='--force-confold'
        -y
    )

    apt update -qq || exit
    apt upgrade "${apt_args[@]}" || exit
    apt install \
        --no-install-recommends \
        "${apt_args[@]}" \
        "${packages[@]}" || exit
}

function pi_setup() {
    # Add user account to kvm group for /dev/kvm access
    # shellcheck disable=SC2154
    usermod -aG kvm "$user_name"

    # Expand the rootfs to its full capacity
    raspi-config --expand-rootfs

    # Turn on the serial console by default
    raspi-config nonint do_serial 0

    # Update the pi account's password
    # shellcheck disable=SC2154
    echo "$user_name:$user_pass" | chpasswd

    # If the Pi has an external hard drive attached to it, add it to the fstab
    ssd_part=/dev/sda1
    if [[ -b $ssd_part ]]; then
        mnt_point=/mnt/ssd
        mkdir -p "$mnt_point"
        chown -R "$user_name:$user_name" "$mnt_point"
        grep -q "$mnt_point" /etc/fstab || printf "PARTUUID=%s\t%s\text4\tdefaults,noatime\t0\t1\n" "$(blkid -o value -s PARTUUID $ssd_part)" "$mnt_point" | tee -a /etc/fstab

        docker_json=/etc/docker/daemon.json
        mkdir -p "${docker_json%/*}"
        cat <<EOF >$docker_json
{
"data-root": "$mnt_point/docker"
}
EOF
    fi
}

function setup_doas() {
    work_dir=$(mktemp -d)

    doas_version=6.8.1-3
    doas_deb="$work_dir"/doas_"$doas_version"_"$dpkg_arch".deb

    curl -LSso "$doas_deb" http://http.us.debian.org/debian/pool/main/d/doas/"${doas_deb##*/}" || exit
    dpkg -i "$doas_deb" || exit

    cat <<EOF >/etc/doas.conf
# Allow me to be root for 5 minutes at a time
permit persist ${user_name:?} as root
# Do not require root to put in a password (makes no sense)
permit nopass root
EOF

    # Add a root password if requested so that there is no warning about removing sudo
    [[ -n $root_pass ]] && echo "root:$root_pass" | chpasswd

    # Uninstall sudo but create a symlink in case a program expects only sudo
    apt remove -y sudo
    setup_sudo_symlink

    rm -fr "$work_dir"
}

function setup_docker() {
    groupadd -f docker
    usermod -aG docker "$user_name" || exit

    # Pick up changes to daemon.json file
    systemctl restart {containerd,docker}.service || exit
}

function setup_locales() {
    echo "locales locales/default_environment_locale select en_US.UTF-8" | debconf-set-selections
    echo "locales locales/locales_to_be_generated multiselect en_US.UTF-8 UTF-8" | debconf-set-selections
    rm -f /etc/locale.gen
    dpkg-reconfigure --frontend noninteractive locales
}

function disable_ssh_agent_x11() {
    sed -i 's/^use-ssh-agent$/# use-ssh-agent/g' /etc/X11/Xsession.options
}

parse_parameters "$@"
set_global_variables
reality_check
set_apt_variables
install_initial_packages
setup_docker_repo
setup_fish_repo
setup_gh_repo
setup_tailscale_repo
install_packages
chsh_fish
pi_setup
setup_doas
setup_docker
setup_locales
disable_ssh_agent_x11
clone_env
set_date_time
setup_initial_fish_config
