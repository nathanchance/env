#!/usr/bin/env bash
# shellcheck disable=SC1091
# SPDX-License-Identifier: MIT
# Copyright (C) 2021-2022 Nathan Chancellor

bash_root=$(dirname "$0")

# Add common functions
source "$bash_root"/common || exit

# Source os-release file for version variables
source /usr/lib/os-release || exit

function reality_check() {
    assert_root

    # This setup script only supports Fedora 35 and 36
    case $VERSION_ID in
        35 | 36) ;;
        *)
            print_error "Fedora $VERSION_ID is not tested with this script, add support for it if it works."
            exit 1
            ;;
    esac
}

function resize_rootfs() {
    dev_mapper=$(df -T | grep /dev/mapper/)
    if [[ -n $dev_mapper ]]; then
        dev_mapper_path=$(echo "$dev_mapper" | cut -d ' ' -f 1)
        lvextend -l +100%FREE "$dev_mapper_path"

        dev_mapper_fs_type=$(echo "$dev_mapper" | cut -d ' ' -f 2)
        if [[ $dev_mapper_fs_type = "xfs" ]]; then
            xfs_growfs "$dev_mapper_path"
        fi
    fi
}

function install_initial_packages() {
    dnf update -y || exit
    dnf install -y dnf-plugins-core || exit
}

function setup_gh_repo() {
    dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo || exit
}

function setup_tailscale_repo() {
    # shellcheck disable=SC2154
    $honeycomb || return 0

    dnf config-manager --add-repo https://pkgs.tailscale.com/stable/fedora/tailscale.repo || exit
}

function setup_tuxmake_repo() {
    cat <<EOF >/etc/yum.repos.d/tuxmake.repo
[tuxmake]
name=tuxmake
type=rpm-md
baseurl=https://tuxmake.org/packages/
gpgcheck=1
gpgkey=https://tuxmake.org/packages/repodata/repomd.xml.key
enabled=1
EOF
}

function install_packages() {
    packages=(
        # administration
        mosh
        opendoas
        util-linux-user

        # b4
        b4

        # compression and decompression
        zstd

        # distrobox
        distrobox
        podman

        # email
        cyrus-sasl-plain
        mutt

        # env
        curl
        fish
        fzf
        jq
        neofetch
        openssh
        python-{pip,tmuxp}
        stow
        tmux
        vim
        zoxide

        # git
        gh
        git{,-delta,-email}

        # nicer GNU utilities
        duf
        exa
        ripgrep

        # repo
        python

        # tuxmake
        tuxmake
    )

    # Install Virtualization group on Equinix Metal servers or Honeycomb LX2
    # shellcheck disable=SC2154
    if $equinix || $honeycomb; then
        packages+=(@virtualization)
    fi

    if $honeycomb; then
        packages+=(tailscale)
    fi

    dnf install -y "${packages[@]}" || exit
}

function setup_doas() {
    # Fedora provides a doas.conf already, just modify it to suit our needs
    sed -i 's/permit :wheel/permit persist :wheel/g' /etc/doas.conf
    cat <<EOF >>/etc/doas.conf

# Do not require root to put in a password (makes no sense)
permit nopass root
EOF

    # Remove sudo but set up a symlink for compatibility
    rm -f /etc/dnf/protected.d/sudo.conf
    remove_if_installed sudo || exit
    setup_sudo_symlink
}

function setup_kernel_args() {
    if $honeycomb; then
        # Until firmware supports new IORT RMR patches?
        grubby \
            --args "arm-smmu.disable_bypass=0 iommu.passthrough=1" \
            --update-kernel ALL
    fi
}

function setup_libvirt() {
    is_installed virt-install || return 0

    setup_libvirt_common
}

function setup_mosh() {
    # mosh can use ports 60000 through 61000
    if command -v firewall-cmd &>/dev/null; then
        firewall-cmd --add-port=60000-61000/udp --permanent
        firewall-cmd --reload
    fi
}

function setup_tailscale() {
    is_installed tailscale || return 0

    systemctl enable --now tailscaled || exit
}

set_global_variables
reality_check
resize_rootfs
install_initial_packages
setup_gh_repo
setup_tailscale_repo
setup_tuxmake_repo
install_packages
setup_doas
setup_kernel_args
setup_libvirt
setup_mosh
setup_tailscale
chsh_fish
clone_env
setup_initial_fish_config
