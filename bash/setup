#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# Copyright (C) 2021 Nathan Chancellor
#
# Shebang is purely for syntax highlighting and shellcheck auditing; script must be sourced to be useful

# Add Google DNS servers to resolv.conf
function add_google_dns() { (
    grep -q "nameserver 8.8.8.8" /etc/resolv.conf || cat <<EOF | tee -a /etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF
); }

function arch_root_setup() { (
    set -x

    # Certain Arch Linux installs will be set up with archinstall, which sets
    # up the user account/password and root password, so we do not need to do
    # anything here
    if ! getent passwd "${USER_NAME}"; then
        : "${ROOT_PASS:?}" "${USER_PASS:?}"

        # Remove the root password so that all commands that would normally
        # require a root password are non-interactive
        passwd -d root
    fi

    # Modify /etc/{makepkg,pacman}.conf
    pacman_settings

    # Populate pacman keyring
    pacman-key --init || exit ${?}
    pacman-key --populate archlinux || exit ${?}

    # Update all currently installed packages
    pacman -Syyu --noconfirm || exit ${?}

    # Remove fakeroot-tcp if it is installed (fakeroot is in the base-devel packages)
    sed -i 's/IgnorePkg   = fakeroot/#IgnorePkg   =/g' /etc/pacman.conf
    remove_if_installed fakeroot-tcp

    # Handle IgnorePkg as necessary
    # sed -i 's/#IgnorePkg   =/IgnorePkg    =/g' /etc/pacman.conf

    # Install all packages that we want
    PACKAGES=(
        # Nicer versions of certain GNU utilities
        bat
        diskus
        duf
        dust
        exa
        fd
        ripgrep

        # Downloading and extracting utilities
        ca-certificates
        curl
        unzip
        wget

        # Administration tools
        htop
        opendoas

        # Container tools
        buildah
        catatonit
        podman

        # Development tools
        debootstrap
        dpkg
        git
        github-cli
        hyperfine
        jq
        mutt
        openssh
        pacman-contrib
        patch
        perl-authen-sasl
        perl-mime-tools
        perl-net-smtp-ssl
        php
        python-dkim
        python-requests
        python-yaml
        repo
        stow
        tmux

        # Other packages and tools
        dos2unix
        fish
        hugo
        iputils # ping
        less
        libxkbcommon
        lm_sensors
        mosh
        neofetch
        shfmt
        which
        zoxide
    )
    if ! ${WSL}; then
        PACKAGES+=(tailscale)

        if [[ -n ${DISPLAY} ]]; then
            PACKAGES+=(
                cantarell-fonts
                discord
                firefox
                obs-studio
                telegram-desktop
                ttc-iosevka-ss08
                vlc
            )

            if [[ $(uname -n) = "vmware" ]]; then
                PACKAGES+=(
                    gtkmm
                    gtk2
                    open-vm-tools
                )
            fi
        fi
    fi
    pacman -S --needed --noconfirm "${PACKAGES[@]}" || exit ${?}
    # Reinstall shadow to fix permissions with newuidmap
    pacman -S --noconfirm shadow

    # doas configuration
    cat <<EOF >/etc/doas.conf
# Allow me to be root for 5 minutes at a time
permit persist ${USER_NAME} as root
# Allow me to update or install packages without a password
permit nopass ${USER_NAME} cmd pacman
# Do not require root to put in a password (makes no sense)
permit nopass root
EOF
    cat <<EOF >/etc/pam.d/doas
#%PAM-1.0
auth        include     system-auth
account     include     system-auth
session     include     system-auth
EOF
    remove_if_installed sudo

    # Set shell to fish if user account has already been created
    if getent passwd "${USER_NAME}"; then
        chsh -s /bin/fish "${USER_NAME}"
    # Create my user account and password if it is not already created
    else
        useradd -G wheel -m -s /bin/fish "${USER_NAME}"
        echo "${USER_NAME}:${USER_PASS}" | chpasswd
    fi

    # Download temporary copy of env for PKGBULDs and environment bootstrapping
    clone_env

    # Rootless podman (https://wiki.archlinux.org/index.php/Podman#Rootless_Podman)
    podman_setup

    # VMware needs a few more steps for seamless integration
    if [[ $(uname -n) = "vmware" ]]; then
        sed -i 's;MODULES=();MODULES=(vsock vmw_vsock_vmci_transport vmw_balloon vmw_vmci vmwgfx);g' /etc/mkinitcpio.conf
        mkinitcpio -P
        systemctl enable vmtoolsd.service
        systemctl enable vmware-vmblock-fuse.service
    fi

    if ${WSL}; then
        # Make /tmp a true tmpfs, needed for podman and avoiding stale sockets after a reboot
        printf "tmpfs\t/tmp\ttmpfs\tdefaults\t0\t0\n" | tee -a /etc/fstab
    else
        # Set SSH options
        systemctl enable sshd.service
        systemctl start sshd.service
        set_sshd_config

        # Enable Tailscale
        systemctl enable --now tailscaled
    fi

    # Make sure LightDM does not start too quickly
    is_installed lightdm && sed -i 's/#logind-check-graphical=false/logind-check-graphical=true/g' /etc/lightdm/lightdm.conf

    return 0
); }

# Skip podman steps if we are on 32-bit Raspberry Pi OS
function can_install_podman() { (
    ${PI} && [[ $(dpkg --print-architecture) = "armhf" ]] && return 1
    return 0
); }

# Download temporary copy of env for PKGBULDs and environment bootstrapping
function clone_env() { (
    ENV_FOLDER=/tmp/env
    [[ -d ${ENV_FOLDER} ]] || git clone https://github.com/nathanchance/env "${ENV_FOLDER}"
    git -C "${ENV_FOLDER}" pull -qr
    chown -R "${USER_NAME}:${USER_NAME}" ${ENV_FOLDER}
); }

function common_root_setup { (
    # Set time zone to Arizona time
    # Not needed in WSL
    ${WSL} || timedatectl set-timezone America/Phoenix

    # Always setup my config.fish if it has not already been so that we can use it during setup
    FSH_CFG=/home/${USER_NAME}/.config/fish/config.fish
    if [[ ! -L ${FSH_CFG} ]]; then
        mkdir -p "${FSH_CFG%/*}"
        touch "${FSH_CFG}"
        cat <<'EOF' >"${FSH_CFG}"
# Start an ssh-agent
if test -z "$SSH_AUTH_SOCK"
    eval (ssh-agent -c)
end

# If we are in a login shell...
status is-login
# or Konsole, which does not use login shells by default...
or set -q KONSOLE_VERSION
# and we are not already in a tmux environment...
and not set -q TMUX
# and we have it installed,
and command -q tmux
# attempt to attach to a session named "main" while detaching everyone
# else or create a new session if one does not already exist
and tmux new-session -AD -s main

# Set up user environment wrapper
function env_setup
    if not set -q TMUX
        printf '\n%bERROR: %s%b\n\n' '\033[01;31m' 'env_setup needs to be run in tmux.' '\033[0m'
        return 1
    end
    if not test -d /tmp/env
        git -C /tmp clone -q https://github.com/nathanchance/env
    end
    git -C /tmp/env pull -qr
    curl -LSs https://git.io/fisher | source
    and fisher install jorgebucaran/fisher 1>/dev/null
    and fisher install /tmp/env/fish 1>/dev/null
    and user_setup
end
EOF
    fi
    chown -R "${USER_NAME}:${USER_NAME}" /home/"${USER_NAME}"/.config

    # Allow these functions to be re-run in a root shell
    # TODO: This is brittle and duplicated from fish/conf.d/variables.fish
    if [[ -d /mnt/ssd ]]; then
        # Raspberry Pi 4
        MAIN_FOLDER=/mnt/ssd
    elif [[ -n ${DISPLAY} && $(uname -n) != "raspberrypi" ]]; then
        # Virtual machine or laptop
        MAIN_FOLDER=/home/${USER_NAME}/Dev
    else
        # Server or WSL
        MAIN_FOLDER=/home/${USER_NAME}
    fi
    echo "SETUP=${MAIN_FOLDER}/github/env/bash/setup" >/root/.bashrc
    # shellcheck disable=SC2016
    echo '[[ -f ${SETUP} ]] && source ${SETUP}' >>/root/.bashrc
); }

function debian_root_setup { (
    # shellcheck disable=SC1091
    source /etc/os-release

    debian_ubuntu_fish_repo
    debian_ubuntu_gh_repo

    # For rootless podman
    if can_install_podman; then
        echo "kernel.unprivileged_userns_clone=1" | tee /etc/sysctl.d/00-local-userns.conf
        if command -v systemctl &>/dev/null; then
            systemctl restart procps
        fi

        if grep -q buster /etc/apt/sources.list; then
            grep -q "buster-backports" /etc/apt/sources.list || echo "deb http://deb.debian.org/debian buster-backports main" | tee -a /etc/apt/sources.list
            KUBIC_REPO=Debian_10 kubic_repo || exit ${?}
            apt -y -t buster-backports install libseccomp2 || exit ${?}
        elif grep -q bullseye /etc/apt/sources.list; then
            KUBIC_REPO=Debian_11 kubic_repo || exit ${?}
        fi
    fi

    debian_ubuntu_packages
    debian_ubuntu_update_install || exit ${?}

    # https://tailscale.com/download/linux/rpi
    if ${PI}; then
        apt install -y apt-transport-https

        curl -fLSs https://pkgs.tailscale.com/stable/raspbian/bullseye.noarmor.gpg | tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
        curl -fLSs https://pkgs.tailscale.com/stable/raspbian/bullseye.tailscale-keyring.list | tee /etc/apt/sources.list.d/tailscale.list

        apt update
        apt install -y tailscale
    fi

    debian_ubuntu_doas

    if [[ $VERSION_ID = "10" ]]; then
        update-alternatives --install /usr/bin/python python /usr/bin/python3.7 1
    fi

    debian_ubuntu_locales

    clone_env

    podman_setup
    if ! ${WSL}; then
        add_google_dns
        systemctl --user restart dbus 2>/dev/null

        ${PI} && pi_root_setup
    fi

    return 0
); }

function debian_ubuntu_doas() { (
    WORK_DIR=$(mktemp -d)
    cd "${WORK_DIR}" || exit ${?}

    DOAS_VERSION=6.8.1-3
    DOAS_DEB=doas_"$DOAS_VERSION"_"$(dpkg --print-architecture)".deb

    curl -LSsO http://http.us.debian.org/debian/pool/main/d/doas/"$DOAS_DEB"
    dpkg -i "$DOAS_DEB" || exit ${?}

    cat <<EOF >/etc/doas.conf
# Allow me to be root for 5 minutes at a time
permit persist ${USER_NAME:?} as root
# Do not require root to put in a password (makes no sense)
permit nopass root
EOF

    # Uninstall sudo but create a symlink in case a program expects only sudo
    [[ -n ${ROOT_PASS} ]] && echo "root:${ROOT_PASS}" | chpasswd
    apt remove -y sudo
    SUDO_PREFIX=${PREFIX:-/usr/local}/stow/sudo
    SUDO_BIN=${SUDO_PREFIX}/bin/sudo
    mkdir -p "${SUDO_BIN%/*}"
    ln -frsv "$(command -v doas)" "${SUDO_BIN}"
    stow -d "${SUDO_PREFIX%/*}" -R -v "${SUDO_PREFIX##*/}"
); }

function debian_ubuntu_fish_repo() { (
    export DEBIAN_FRONTEND=noninteractive
    apt update -qq || exit
    case $DISTRO in
        debian)
            apt-get install -y --no-install-recommends \
                ca-certificates \
                curl \
                gnupg
            echo "deb http://download.opensuse.org/repositories/shells:/fish:/release:/3/Debian_$VERSION_ID/ /" | tee /etc/apt/sources.list.d/shells:fish:release:3.list
            curl -fLSs https://download.opensuse.org/repositories/shells:fish:release:3/Debian_"$VERSION_ID"/Release.key | gpg --dearmor | tee /etc/apt/trusted.gpg.d/shells_fish_release_3.gpg >/dev/null
            ;;
        ubuntu)
            apt install -y --no-install-recommends \
                gpg-agent \
                software-properties-common || exit
            apt-add-repository ppa:fish-shell/release-3 -y || exit
            ;;
    esac
); }

function debian_ubuntu_gh_repo() { (
    curl -fLSs https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/etc/apt/trusted.gpg.d/githubcli-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/trusted.gpg.d/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list
); }

function debian_ubuntu_locales() { (
    echo "locales locales/default_environment_locale select en_US.UTF-8" | debconf-set-selections
    echo "locales locales/locales_to_be_generated multiselect en_US.UTF-8 UTF-8" | debconf-set-selections
    rm -f /etc/locale.gen
    dpkg-reconfigure --frontend noninteractive locales
); }

# List of Debian and Ubuntu packages to install
function debian_ubuntu_packages() {
    PACKAGES=(
        ca-certificates
        curl
        debootstrap
        file
        fish
        gh
        git
        git-email
        htop
        jq
        libauthen-sasl-perl
        libemail-valid-perl
        libio-socket-ssl-perl
        libnet-smtp-ssl-perl
        libpam0g
        locales
        mosh
        mutt
        neofetch
        php
        php-curl
        python3
        python3-dkim
        python3-requests
        ripgrep
        ssh
        stow
        tmux
        unzip
        vim
        zip
        zstd
    )

    if ${PI}; then
        PACKAGES+=(
            qemu-system-arm
            qemu-system-x86
        )
    else
        PACKAGES+=(
            qemu-user-static
            qemu-utils
        )
    fi

    if can_install_podman; then
        PACKAGES+=(
            buildah
            containernetworking-plugins
            fuse-overlayfs
            podman
            slirp4netns
            uidmap
        )
    fi

    case ${VERSION_ID:?} in
        20.* | 21.* | 11)
            PACKAGES+=(python-is-python3)
            ;;
    esac
}

function debian_ubuntu_update_install() { (
    export APT_LISTCHANGES_FRONTEND=none
    export DEBIAN_FRONTEND=noninteractive
    export NEEDRESTART_SUSPEND=true

    apt update -y || exit ${?}
    apt upgrade \
        -o Dpkg::Options::='--force-confdef' \
        -o Dpkg::Options::='--force-confold' \
        -y || exit ${?}
    apt install \
        -o Dpkg::Options::='--force-confdef' \
        -o Dpkg::Options::='--force-confold' \
        -y "${PACKAGES[@]}" || exit ${?}
    chsh -s /usr/bin/fish "${USER_NAME}"
    # Reinstall 'ping' to avoid issues with permissions
    ${WSL} && apt install -y --reinstall iputils-ping
    return 0
); }

# Check if a package is installed
function is_installed() { (
    case ${DISTRO} in
        arch) pacman -Q "${@:?}" &>/dev/null ;;
    esac
) }

function kubic_repo() { (
    echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${KUBIC_REPO}/ /" | tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
    curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/"${KUBIC_REPO}"/Release.key | apt-key add -

    apt update -qq || exit ${?}
); }

function pacman_settings() { (
    # Update /etc/{makepkg,pacman}.conf if necessary
    [[ -f /etc/makepkg.conf.pacnew ]] && mv -v /etc/makepkg.conf{.pacnew,}
    [[ -f /etc/pacman.conf.pacnew ]] && mv -v /etc/pacman.conf{.pacnew,}

    # Enable colors for pacman
    sed -i 's/#Color/Color/g' /etc/pacman.conf

    # Enable parallel downloads
    sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 7/g' /etc/pacman.conf
); }

# Pi specific setup steps
function pi_root_setup() { (
    grep -q configs /etc/modules || printf 'configs\nsnd_bcm2835\n' | tee -a /etc/modules
    usermod -a -G kvm pi
    raspi-config --expand-rootfs
    raspi-config nonint do_serial 0
    echo "${USER_NAME}:${USER_PASS}" | chpasswd

    if [[ -b /dev/sda1 ]]; then
        MNT_PNT=/mnt/ssd
        mkdir -p "${MNT_PNT}"
        chown -R "${USER_NAME:?}:${USER_NAME}" "${MNT_PNT}"
        grep -q "${MNT_PNT}" /etc/fstab || printf "PARTUUID=%s\t%s\text4\tdefaults,noatime\t0\t1\n" "$(blkid -o value -s PARTUUID "/dev/sda1")" "${MNT_PNT}" | tee -a "${MOUNT_DIR}"/etc/fstab
    fi
); }

# Setup rootless podman as necessary
function podman_setup { (
    can_install_podman || return 0
    echo "${USER_NAME:?}:100000:65536" | tee /etc/subgid /etc/subuid
    [[ -f /etc/containers/registries.conf ]] || cat <<EOF | tee /etc/containers/registries.conf
[registries.search]
registries = ['docker.io', 'quay.io']
EOF
); }

# Remove package but only if it is not installed
function remove_if_installed() { (
    is_installed "${1:?}" || exit ${?}
    case ${DISTRO} in
        arch) pacman -R --noconfirm "${1}" ;;
    esac
) }

# Setup function (as root, calls distribution specific function)
function root_setup() { (
    : "${USER_NAME:=nathan}"

    [[ ${EUID} -eq 0 ]] || exit ${?}
    set_global_variables

    "${DISTRO}"_root_setup || exit ${?}
    common_root_setup
); }

# Set global variables to control behavior
function set_global_variables() {
    case "$(cat /usr/lib/os-release)" in
        *"Arch Linux"*) DISTRO=arch ;;
        *Debian* | *Raspbian*) DISTRO=debian ;;
        *Ubuntu*) DISTRO=ubuntu ;;
    esac

    if [[ $(uname -n) = "raspberrypi" ]]; then
        PI=true
        USER_NAME=pi
        : "${ROOT_PASS:?}" "${USER_PASS:?}"
    fi

    uname -r | grep -iq microsoft && WSL=true

    : "${DISTRO:=unsupported}" "${PI:=false}" "${WSL:=false}"
}

# Set sshd_config options
function set_sshd_config() { (
    sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin prohibit-password/g' /etc/ssh/sshd_config
); }

function ubuntu_root_setup { (
    # shellcheck disable=SC1091
    source /etc/os-release
    export VERSION_ID

    case ${VERSION_ID:?} in
        20.04 | 20.10 | 21.04)
            KUBIC_REPO=xUbuntu_$VERSION_ID kubic_repo || exit ${?}
            ;;
    esac

    debian_ubuntu_fish_repo
    debian_ubuntu_gh_repo
    apt-add-repository -y ppa:git-core/ppa || exit ${?}
    debian_ubuntu_packages
    debian_ubuntu_update_install || exit ${?}
    debian_ubuntu_locales

    clone_env

    if ! ${WSL}; then
        add_google_dns
    fi
    podman_setup

    return 0
); }

function unsupported_root_setup { (
    echo "Unsupported distribution for root_setup, please add it"
    exit 1
); }
# vi: filetype=zsh
